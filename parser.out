Grammar:

Rule 0     S' -> program
Rule 1     program -> statement_full program
Rule 2     program -> statement_full
Rule 3     statement_full -> statement
Rule 4     statement_full -> statement NEWLINE  [precedence=left, level=3]
Rule 5     statement -> type COLON NAME ASSIGN expression  [precedence=left, level=2]
Rule 6     statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]
Rule 7     statement -> NAME ASSIGN expression  [precedence=left, level=2]
Rule 8     statement -> RETURN expression
Rule 9     statement -> WHILE expression COLON NEWLINE block  [precedence=left, level=3]
Rule 10    statement -> IF expression COLON NEWLINE block NEWLINE  [precedence=left, level=3]
Rule 11    statement -> IF expression COLON NEWLINE block NEWLINE else_statement  [precedence=left, level=3]
Rule 12    statement -> IF expression COLON NEWLINE block NEWLINE elif_statement  [precedence=left, level=3]
Rule 13    statement -> expression
Rule 14    statement -> PASS
Rule 15    statement -> import_statement
Rule 16    statement -> chain_statement
Rule 17    import_statement -> FROM NAME IMPORT module_list
Rule 18    module_list -> NAME
Rule 19    module_list -> NAME COMMA module_list
Rule 20    chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block  [precedence=left, level=3]
Rule 21    block -> INDENT block_statements DEDENT
Rule 22    block_statements -> statement_full block_statements
Rule 23    block_statements -> statement_full
Rule 24    else_statement -> ELSE COLON NEWLINE block  [precedence=left, level=3]
Rule 25    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE  [precedence=left, level=3]
Rule 26    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement  [precedence=left, level=3]
Rule 27    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement  [precedence=left, level=3]
Rule 28    expression -> NAME
Rule 29    expression -> const
Rule 30    expression -> LPAR expression RPAR
Rule 31    expression -> NOT expression
Rule 32    expression -> expression OR expression
Rule 33    expression -> expression AND expression
Rule 34    expression -> expression NEQ expression  [precedence=left, level=4]
Rule 35    expression -> expression EQ expression  [precedence=left, level=4]
Rule 36    expression -> expression LT expression  [precedence=left, level=4]
Rule 37    expression -> expression GT expression  [precedence=left, level=4]
Rule 38    expression -> expression LTE expression  [precedence=left, level=4]
Rule 39    expression -> expression GTE expression  [precedence=left, level=4]
Rule 40    expression -> expression MOD expression
Rule 41    expression -> expression DIV expression  [precedence=left, level=6]
Rule 42    expression -> expression MULT expression  [precedence=left, level=6]
Rule 43    expression -> expression MINUS expression  [precedence=left, level=5]
Rule 44    expression -> expression PLUS expression  [precedence=left, level=5]
Rule 45    expression -> NAME LPAR arglist RPAR
Rule 46    argument -> type COLON NAME
Rule 47    argument -> const
Rule 48    argument -> NAME
Rule 49    arglist -> <empty>
Rule 50    arglist -> argument
Rule 51    arglist -> argument COMMA arglist
Rule 52    type -> S64
Rule 53    type -> S32
Rule 54    type -> S16
Rule 55    type -> S8
Rule 56    type -> U64
Rule 57    type -> U32
Rule 58    type -> U16
Rule 59    type -> U8
Rule 60    const -> BOOLEAN
Rule 61    const -> STRING
Rule 62    const -> INTEGER
Rule 63    const -> FLOAT
Rule 64    const -> HEX

Unused terminals:

    END

Terminals, with rules where they appear:

AND                  : 33
ASSIGN               : 5 6 7
BOOLEAN              : 60
COLON                : 5 6 9 10 11 12 20 24 25 26 27 46
COMMA                : 19 51
DEDENT               : 21
DEF                  : 20
DIV                  : 41
ELIF                 : 25 26 27
ELSE                 : 24
END                  : 
EQ                   : 35
FLOAT                : 63
FROM                 : 17
GT                   : 37
GTE                  : 39
HEX                  : 64
IF                   : 10 11 12
IMPORT               : 17
INDENT               : 21
INTEGER              : 62
LPAR                 : 20 30 45
LT                   : 36
LTE                  : 38
MINUS                : 43
MOD                  : 40
MULT                 : 42
NAME                 : 5 6 7 17 18 19 20 28 45 46 48
NEQ                  : 34
NEWLINE              : 4 9 10 10 11 11 12 12 20 24 25 25 26 26 27 27
NOT                  : 31
OR                   : 32
PASS                 : 14
PLUS                 : 44
RETURN               : 8
RPAR                 : 20 30 45
S16                  : 54
S32                  : 53
S64                  : 52
S8                   : 55
STRING               : 61
U16                  : 58
U32                  : 57
U64                  : 56
U8                   : 59
WHILE                : 9
error                : 

Nonterminals, with rules where they appear:

arglist              : 20 45 51
argument             : 50 51
block                : 9 10 11 12 20 24 25 26 27
block_statements     : 21 22
chain_statement      : 16
const                : 6 29 47
elif_statement       : 12 27
else_statement       : 11 26
expression           : 5 7 8 9 10 11 12 13 25 26 27 30 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44
import_statement     : 15
module_list          : 17 19
program              : 1 0
statement            : 3 4
statement_full       : 1 2 22 23
type                 : 5 6 46


state 0

    (0) S' -> . program
    (1) program -> . statement_full program
    (2) program -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . RETURN expression
    (9) statement -> . WHILE expression COLON NEWLINE block
    (10) statement -> . IF expression COLON NEWLINE block NEWLINE
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (12) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (13) statement -> . expression
    (14) statement -> . PASS
    (15) statement -> . import_statement
    (16) statement -> . chain_statement
    (52) type -> . S64
    (53) type -> . S32
    (54) type -> . S16
    (55) type -> . S8
    (56) type -> . U64
    (57) type -> . U32
    (58) type -> . U16
    (59) type -> . U8
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (17) import_statement -> . FROM NAME IMPORT module_list
    (20) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 5
    RETURN          shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    PASS            shift and go to state 11
    S64             shift and go to state 14
    S32             shift and go to state 15
    S16             shift and go to state 16
    S8              shift and go to state 17
    U64             shift and go to state 18
    U32             shift and go to state 19
    U16             shift and go to state 20
    U8              shift and go to state 21
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    FROM            shift and go to state 24
    DEF             shift and go to state 25
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    program                        shift and go to state 1
    statement_full                 shift and go to state 2
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    import_statement               shift and go to state 12
    chain_statement                shift and go to state 13

state 1

    (0) S' -> program .


state 2

    (1) program -> statement_full . program
    (2) program -> statement_full .
    (1) program -> . statement_full program
    (2) program -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . RETURN expression
    (9) statement -> . WHILE expression COLON NEWLINE block
    (10) statement -> . IF expression COLON NEWLINE block NEWLINE
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (12) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (13) statement -> . expression
    (14) statement -> . PASS
    (15) statement -> . import_statement
    (16) statement -> . chain_statement
    (52) type -> . S64
    (53) type -> . S32
    (54) type -> . S16
    (55) type -> . S8
    (56) type -> . U64
    (57) type -> . U32
    (58) type -> . U16
    (59) type -> . U8
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (17) import_statement -> . FROM NAME IMPORT module_list
    (20) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    $end            reduce using rule 2 (program -> statement_full .)
    NAME            shift and go to state 5
    RETURN          shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    PASS            shift and go to state 11
    S64             shift and go to state 14
    S32             shift and go to state 15
    S16             shift and go to state 16
    S8              shift and go to state 17
    U64             shift and go to state 18
    U32             shift and go to state 19
    U16             shift and go to state 20
    U8              shift and go to state 21
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    FROM            shift and go to state 24
    DEF             shift and go to state 25
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    statement_full                 shift and go to state 2
    program                        shift and go to state 31
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    import_statement               shift and go to state 12
    chain_statement                shift and go to state 13

state 3

    (3) statement_full -> statement .
    (4) statement_full -> statement . NEWLINE
    NAME            reduce using rule 3 (statement_full -> statement .)
    RETURN          reduce using rule 3 (statement_full -> statement .)
    WHILE           reduce using rule 3 (statement_full -> statement .)
    IF              reduce using rule 3 (statement_full -> statement .)
    PASS            reduce using rule 3 (statement_full -> statement .)
    S64             reduce using rule 3 (statement_full -> statement .)
    S32             reduce using rule 3 (statement_full -> statement .)
    S16             reduce using rule 3 (statement_full -> statement .)
    S8              reduce using rule 3 (statement_full -> statement .)
    U64             reduce using rule 3 (statement_full -> statement .)
    U32             reduce using rule 3 (statement_full -> statement .)
    U16             reduce using rule 3 (statement_full -> statement .)
    U8              reduce using rule 3 (statement_full -> statement .)
    LPAR            reduce using rule 3 (statement_full -> statement .)
    NOT             reduce using rule 3 (statement_full -> statement .)
    FROM            reduce using rule 3 (statement_full -> statement .)
    DEF             reduce using rule 3 (statement_full -> statement .)
    BOOLEAN         reduce using rule 3 (statement_full -> statement .)
    STRING          reduce using rule 3 (statement_full -> statement .)
    INTEGER         reduce using rule 3 (statement_full -> statement .)
    FLOAT           reduce using rule 3 (statement_full -> statement .)
    HEX             reduce using rule 3 (statement_full -> statement .)
    $end            reduce using rule 3 (statement_full -> statement .)
    DEDENT          reduce using rule 3 (statement_full -> statement .)
    NEWLINE         shift and go to state 32


state 4

    (5) statement -> type . COLON NAME ASSIGN expression
    (6) statement -> type . COLON NAME ASSIGN const
    COLON           shift and go to state 33


state 5

    (7) statement -> NAME . ASSIGN expression
    (28) expression -> NAME .
    (45) expression -> NAME . LPAR arglist RPAR
  ! shift/reduce conflict for LPAR resolved as shift
    ASSIGN          shift and go to state 34
    OR              reduce using rule 28 (expression -> NAME .)
    AND             reduce using rule 28 (expression -> NAME .)
    NEQ             reduce using rule 28 (expression -> NAME .)
    EQ              reduce using rule 28 (expression -> NAME .)
    LT              reduce using rule 28 (expression -> NAME .)
    GT              reduce using rule 28 (expression -> NAME .)
    LTE             reduce using rule 28 (expression -> NAME .)
    GTE             reduce using rule 28 (expression -> NAME .)
    MOD             reduce using rule 28 (expression -> NAME .)
    DIV             reduce using rule 28 (expression -> NAME .)
    MULT            reduce using rule 28 (expression -> NAME .)
    MINUS           reduce using rule 28 (expression -> NAME .)
    PLUS            reduce using rule 28 (expression -> NAME .)
    NEWLINE         reduce using rule 28 (expression -> NAME .)
    NAME            reduce using rule 28 (expression -> NAME .)
    RETURN          reduce using rule 28 (expression -> NAME .)
    WHILE           reduce using rule 28 (expression -> NAME .)
    IF              reduce using rule 28 (expression -> NAME .)
    PASS            reduce using rule 28 (expression -> NAME .)
    S64             reduce using rule 28 (expression -> NAME .)
    S32             reduce using rule 28 (expression -> NAME .)
    S16             reduce using rule 28 (expression -> NAME .)
    S8              reduce using rule 28 (expression -> NAME .)
    U64             reduce using rule 28 (expression -> NAME .)
    U32             reduce using rule 28 (expression -> NAME .)
    U16             reduce using rule 28 (expression -> NAME .)
    U8              reduce using rule 28 (expression -> NAME .)
    NOT             reduce using rule 28 (expression -> NAME .)
    FROM            reduce using rule 28 (expression -> NAME .)
    DEF             reduce using rule 28 (expression -> NAME .)
    BOOLEAN         reduce using rule 28 (expression -> NAME .)
    STRING          reduce using rule 28 (expression -> NAME .)
    INTEGER         reduce using rule 28 (expression -> NAME .)
    FLOAT           reduce using rule 28 (expression -> NAME .)
    HEX             reduce using rule 28 (expression -> NAME .)
    $end            reduce using rule 28 (expression -> NAME .)
    DEDENT          reduce using rule 28 (expression -> NAME .)
    LPAR            shift and go to state 35


state 6

    (13) statement -> expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 13 (statement -> expression .)
    NAME            reduce using rule 13 (statement -> expression .)
    RETURN          reduce using rule 13 (statement -> expression .)
    WHILE           reduce using rule 13 (statement -> expression .)
    IF              reduce using rule 13 (statement -> expression .)
    PASS            reduce using rule 13 (statement -> expression .)
    S64             reduce using rule 13 (statement -> expression .)
    S32             reduce using rule 13 (statement -> expression .)
    S16             reduce using rule 13 (statement -> expression .)
    S8              reduce using rule 13 (statement -> expression .)
    U64             reduce using rule 13 (statement -> expression .)
    U32             reduce using rule 13 (statement -> expression .)
    U16             reduce using rule 13 (statement -> expression .)
    U8              reduce using rule 13 (statement -> expression .)
    LPAR            reduce using rule 13 (statement -> expression .)
    NOT             reduce using rule 13 (statement -> expression .)
    FROM            reduce using rule 13 (statement -> expression .)
    DEF             reduce using rule 13 (statement -> expression .)
    BOOLEAN         reduce using rule 13 (statement -> expression .)
    STRING          reduce using rule 13 (statement -> expression .)
    INTEGER         reduce using rule 13 (statement -> expression .)
    FLOAT           reduce using rule 13 (statement -> expression .)
    HEX             reduce using rule 13 (statement -> expression .)
    $end            reduce using rule 13 (statement -> expression .)
    DEDENT          reduce using rule 13 (statement -> expression .)
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 7

    (29) expression -> const .
    OR              reduce using rule 29 (expression -> const .)
    AND             reduce using rule 29 (expression -> const .)
    NEQ             reduce using rule 29 (expression -> const .)
    EQ              reduce using rule 29 (expression -> const .)
    LT              reduce using rule 29 (expression -> const .)
    GT              reduce using rule 29 (expression -> const .)
    LTE             reduce using rule 29 (expression -> const .)
    GTE             reduce using rule 29 (expression -> const .)
    MOD             reduce using rule 29 (expression -> const .)
    DIV             reduce using rule 29 (expression -> const .)
    MULT            reduce using rule 29 (expression -> const .)
    MINUS           reduce using rule 29 (expression -> const .)
    PLUS            reduce using rule 29 (expression -> const .)
    NEWLINE         reduce using rule 29 (expression -> const .)
    NAME            reduce using rule 29 (expression -> const .)
    RETURN          reduce using rule 29 (expression -> const .)
    WHILE           reduce using rule 29 (expression -> const .)
    IF              reduce using rule 29 (expression -> const .)
    PASS            reduce using rule 29 (expression -> const .)
    S64             reduce using rule 29 (expression -> const .)
    S32             reduce using rule 29 (expression -> const .)
    S16             reduce using rule 29 (expression -> const .)
    S8              reduce using rule 29 (expression -> const .)
    U64             reduce using rule 29 (expression -> const .)
    U32             reduce using rule 29 (expression -> const .)
    U16             reduce using rule 29 (expression -> const .)
    U8              reduce using rule 29 (expression -> const .)
    LPAR            reduce using rule 29 (expression -> const .)
    NOT             reduce using rule 29 (expression -> const .)
    FROM            reduce using rule 29 (expression -> const .)
    DEF             reduce using rule 29 (expression -> const .)
    BOOLEAN         reduce using rule 29 (expression -> const .)
    STRING          reduce using rule 29 (expression -> const .)
    INTEGER         reduce using rule 29 (expression -> const .)
    FLOAT           reduce using rule 29 (expression -> const .)
    HEX             reduce using rule 29 (expression -> const .)
    $end            reduce using rule 29 (expression -> const .)
    DEDENT          reduce using rule 29 (expression -> const .)
    COLON           reduce using rule 29 (expression -> const .)
    RPAR            reduce using rule 29 (expression -> const .)


state 8

    (8) statement -> RETURN . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 49
    const                          shift and go to state 7

state 9

    (9) statement -> WHILE . expression COLON NEWLINE block
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 51
    const                          shift and go to state 7

state 10

    (10) statement -> IF . expression COLON NEWLINE block NEWLINE
    (11) statement -> IF . expression COLON NEWLINE block NEWLINE else_statement
    (12) statement -> IF . expression COLON NEWLINE block NEWLINE elif_statement
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 52
    const                          shift and go to state 7

state 11

    (14) statement -> PASS .
    NEWLINE         reduce using rule 14 (statement -> PASS .)
    NAME            reduce using rule 14 (statement -> PASS .)
    RETURN          reduce using rule 14 (statement -> PASS .)
    WHILE           reduce using rule 14 (statement -> PASS .)
    IF              reduce using rule 14 (statement -> PASS .)
    PASS            reduce using rule 14 (statement -> PASS .)
    S64             reduce using rule 14 (statement -> PASS .)
    S32             reduce using rule 14 (statement -> PASS .)
    S16             reduce using rule 14 (statement -> PASS .)
    S8              reduce using rule 14 (statement -> PASS .)
    U64             reduce using rule 14 (statement -> PASS .)
    U32             reduce using rule 14 (statement -> PASS .)
    U16             reduce using rule 14 (statement -> PASS .)
    U8              reduce using rule 14 (statement -> PASS .)
    LPAR            reduce using rule 14 (statement -> PASS .)
    NOT             reduce using rule 14 (statement -> PASS .)
    FROM            reduce using rule 14 (statement -> PASS .)
    DEF             reduce using rule 14 (statement -> PASS .)
    BOOLEAN         reduce using rule 14 (statement -> PASS .)
    STRING          reduce using rule 14 (statement -> PASS .)
    INTEGER         reduce using rule 14 (statement -> PASS .)
    FLOAT           reduce using rule 14 (statement -> PASS .)
    HEX             reduce using rule 14 (statement -> PASS .)
    $end            reduce using rule 14 (statement -> PASS .)
    DEDENT          reduce using rule 14 (statement -> PASS .)


state 12

    (15) statement -> import_statement .
    NEWLINE         reduce using rule 15 (statement -> import_statement .)
    NAME            reduce using rule 15 (statement -> import_statement .)
    RETURN          reduce using rule 15 (statement -> import_statement .)
    WHILE           reduce using rule 15 (statement -> import_statement .)
    IF              reduce using rule 15 (statement -> import_statement .)
    PASS            reduce using rule 15 (statement -> import_statement .)
    S64             reduce using rule 15 (statement -> import_statement .)
    S32             reduce using rule 15 (statement -> import_statement .)
    S16             reduce using rule 15 (statement -> import_statement .)
    S8              reduce using rule 15 (statement -> import_statement .)
    U64             reduce using rule 15 (statement -> import_statement .)
    U32             reduce using rule 15 (statement -> import_statement .)
    U16             reduce using rule 15 (statement -> import_statement .)
    U8              reduce using rule 15 (statement -> import_statement .)
    LPAR            reduce using rule 15 (statement -> import_statement .)
    NOT             reduce using rule 15 (statement -> import_statement .)
    FROM            reduce using rule 15 (statement -> import_statement .)
    DEF             reduce using rule 15 (statement -> import_statement .)
    BOOLEAN         reduce using rule 15 (statement -> import_statement .)
    STRING          reduce using rule 15 (statement -> import_statement .)
    INTEGER         reduce using rule 15 (statement -> import_statement .)
    FLOAT           reduce using rule 15 (statement -> import_statement .)
    HEX             reduce using rule 15 (statement -> import_statement .)
    $end            reduce using rule 15 (statement -> import_statement .)
    DEDENT          reduce using rule 15 (statement -> import_statement .)


state 13

    (16) statement -> chain_statement .
    NEWLINE         reduce using rule 16 (statement -> chain_statement .)
    NAME            reduce using rule 16 (statement -> chain_statement .)
    RETURN          reduce using rule 16 (statement -> chain_statement .)
    WHILE           reduce using rule 16 (statement -> chain_statement .)
    IF              reduce using rule 16 (statement -> chain_statement .)
    PASS            reduce using rule 16 (statement -> chain_statement .)
    S64             reduce using rule 16 (statement -> chain_statement .)
    S32             reduce using rule 16 (statement -> chain_statement .)
    S16             reduce using rule 16 (statement -> chain_statement .)
    S8              reduce using rule 16 (statement -> chain_statement .)
    U64             reduce using rule 16 (statement -> chain_statement .)
    U32             reduce using rule 16 (statement -> chain_statement .)
    U16             reduce using rule 16 (statement -> chain_statement .)
    U8              reduce using rule 16 (statement -> chain_statement .)
    LPAR            reduce using rule 16 (statement -> chain_statement .)
    NOT             reduce using rule 16 (statement -> chain_statement .)
    FROM            reduce using rule 16 (statement -> chain_statement .)
    DEF             reduce using rule 16 (statement -> chain_statement .)
    BOOLEAN         reduce using rule 16 (statement -> chain_statement .)
    STRING          reduce using rule 16 (statement -> chain_statement .)
    INTEGER         reduce using rule 16 (statement -> chain_statement .)
    FLOAT           reduce using rule 16 (statement -> chain_statement .)
    HEX             reduce using rule 16 (statement -> chain_statement .)
    $end            reduce using rule 16 (statement -> chain_statement .)
    DEDENT          reduce using rule 16 (statement -> chain_statement .)


state 14

    (52) type -> S64 .
    COLON           reduce using rule 52 (type -> S64 .)


state 15

    (53) type -> S32 .
    COLON           reduce using rule 53 (type -> S32 .)


state 16

    (54) type -> S16 .
    COLON           reduce using rule 54 (type -> S16 .)


state 17

    (55) type -> S8 .
    COLON           reduce using rule 55 (type -> S8 .)


state 18

    (56) type -> U64 .
    COLON           reduce using rule 56 (type -> U64 .)


state 19

    (57) type -> U32 .
    COLON           reduce using rule 57 (type -> U32 .)


state 20

    (58) type -> U16 .
    COLON           reduce using rule 58 (type -> U16 .)


state 21

    (59) type -> U8 .
    COLON           reduce using rule 59 (type -> U8 .)


state 22

    (30) expression -> LPAR . expression RPAR
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 53
    const                          shift and go to state 7

state 23

    (31) expression -> NOT . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 54
    const                          shift and go to state 7

state 24

    (17) import_statement -> FROM . NAME IMPORT module_list
    NAME            shift and go to state 55


state 25

    (20) chain_statement -> DEF . NAME LPAR arglist RPAR COLON NEWLINE block
    NAME            shift and go to state 56


state 26

    (60) const -> BOOLEAN .
    OR              reduce using rule 60 (const -> BOOLEAN .)
    AND             reduce using rule 60 (const -> BOOLEAN .)
    NEQ             reduce using rule 60 (const -> BOOLEAN .)
    EQ              reduce using rule 60 (const -> BOOLEAN .)
    LT              reduce using rule 60 (const -> BOOLEAN .)
    GT              reduce using rule 60 (const -> BOOLEAN .)
    LTE             reduce using rule 60 (const -> BOOLEAN .)
    GTE             reduce using rule 60 (const -> BOOLEAN .)
    MOD             reduce using rule 60 (const -> BOOLEAN .)
    DIV             reduce using rule 60 (const -> BOOLEAN .)
    MULT            reduce using rule 60 (const -> BOOLEAN .)
    MINUS           reduce using rule 60 (const -> BOOLEAN .)
    PLUS            reduce using rule 60 (const -> BOOLEAN .)
    NEWLINE         reduce using rule 60 (const -> BOOLEAN .)
    NAME            reduce using rule 60 (const -> BOOLEAN .)
    RETURN          reduce using rule 60 (const -> BOOLEAN .)
    WHILE           reduce using rule 60 (const -> BOOLEAN .)
    IF              reduce using rule 60 (const -> BOOLEAN .)
    PASS            reduce using rule 60 (const -> BOOLEAN .)
    S64             reduce using rule 60 (const -> BOOLEAN .)
    S32             reduce using rule 60 (const -> BOOLEAN .)
    S16             reduce using rule 60 (const -> BOOLEAN .)
    S8              reduce using rule 60 (const -> BOOLEAN .)
    U64             reduce using rule 60 (const -> BOOLEAN .)
    U32             reduce using rule 60 (const -> BOOLEAN .)
    U16             reduce using rule 60 (const -> BOOLEAN .)
    U8              reduce using rule 60 (const -> BOOLEAN .)
    LPAR            reduce using rule 60 (const -> BOOLEAN .)
    NOT             reduce using rule 60 (const -> BOOLEAN .)
    FROM            reduce using rule 60 (const -> BOOLEAN .)
    DEF             reduce using rule 60 (const -> BOOLEAN .)
    BOOLEAN         reduce using rule 60 (const -> BOOLEAN .)
    STRING          reduce using rule 60 (const -> BOOLEAN .)
    INTEGER         reduce using rule 60 (const -> BOOLEAN .)
    FLOAT           reduce using rule 60 (const -> BOOLEAN .)
    HEX             reduce using rule 60 (const -> BOOLEAN .)
    $end            reduce using rule 60 (const -> BOOLEAN .)
    DEDENT          reduce using rule 60 (const -> BOOLEAN .)
    COLON           reduce using rule 60 (const -> BOOLEAN .)
    RPAR            reduce using rule 60 (const -> BOOLEAN .)
    COMMA           reduce using rule 60 (const -> BOOLEAN .)


state 27

    (61) const -> STRING .
    OR              reduce using rule 61 (const -> STRING .)
    AND             reduce using rule 61 (const -> STRING .)
    NEQ             reduce using rule 61 (const -> STRING .)
    EQ              reduce using rule 61 (const -> STRING .)
    LT              reduce using rule 61 (const -> STRING .)
    GT              reduce using rule 61 (const -> STRING .)
    LTE             reduce using rule 61 (const -> STRING .)
    GTE             reduce using rule 61 (const -> STRING .)
    MOD             reduce using rule 61 (const -> STRING .)
    DIV             reduce using rule 61 (const -> STRING .)
    MULT            reduce using rule 61 (const -> STRING .)
    MINUS           reduce using rule 61 (const -> STRING .)
    PLUS            reduce using rule 61 (const -> STRING .)
    NEWLINE         reduce using rule 61 (const -> STRING .)
    NAME            reduce using rule 61 (const -> STRING .)
    RETURN          reduce using rule 61 (const -> STRING .)
    WHILE           reduce using rule 61 (const -> STRING .)
    IF              reduce using rule 61 (const -> STRING .)
    PASS            reduce using rule 61 (const -> STRING .)
    S64             reduce using rule 61 (const -> STRING .)
    S32             reduce using rule 61 (const -> STRING .)
    S16             reduce using rule 61 (const -> STRING .)
    S8              reduce using rule 61 (const -> STRING .)
    U64             reduce using rule 61 (const -> STRING .)
    U32             reduce using rule 61 (const -> STRING .)
    U16             reduce using rule 61 (const -> STRING .)
    U8              reduce using rule 61 (const -> STRING .)
    LPAR            reduce using rule 61 (const -> STRING .)
    NOT             reduce using rule 61 (const -> STRING .)
    FROM            reduce using rule 61 (const -> STRING .)
    DEF             reduce using rule 61 (const -> STRING .)
    BOOLEAN         reduce using rule 61 (const -> STRING .)
    STRING          reduce using rule 61 (const -> STRING .)
    INTEGER         reduce using rule 61 (const -> STRING .)
    FLOAT           reduce using rule 61 (const -> STRING .)
    HEX             reduce using rule 61 (const -> STRING .)
    $end            reduce using rule 61 (const -> STRING .)
    DEDENT          reduce using rule 61 (const -> STRING .)
    COLON           reduce using rule 61 (const -> STRING .)
    RPAR            reduce using rule 61 (const -> STRING .)
    COMMA           reduce using rule 61 (const -> STRING .)


state 28

    (62) const -> INTEGER .
    OR              reduce using rule 62 (const -> INTEGER .)
    AND             reduce using rule 62 (const -> INTEGER .)
    NEQ             reduce using rule 62 (const -> INTEGER .)
    EQ              reduce using rule 62 (const -> INTEGER .)
    LT              reduce using rule 62 (const -> INTEGER .)
    GT              reduce using rule 62 (const -> INTEGER .)
    LTE             reduce using rule 62 (const -> INTEGER .)
    GTE             reduce using rule 62 (const -> INTEGER .)
    MOD             reduce using rule 62 (const -> INTEGER .)
    DIV             reduce using rule 62 (const -> INTEGER .)
    MULT            reduce using rule 62 (const -> INTEGER .)
    MINUS           reduce using rule 62 (const -> INTEGER .)
    PLUS            reduce using rule 62 (const -> INTEGER .)
    NEWLINE         reduce using rule 62 (const -> INTEGER .)
    NAME            reduce using rule 62 (const -> INTEGER .)
    RETURN          reduce using rule 62 (const -> INTEGER .)
    WHILE           reduce using rule 62 (const -> INTEGER .)
    IF              reduce using rule 62 (const -> INTEGER .)
    PASS            reduce using rule 62 (const -> INTEGER .)
    S64             reduce using rule 62 (const -> INTEGER .)
    S32             reduce using rule 62 (const -> INTEGER .)
    S16             reduce using rule 62 (const -> INTEGER .)
    S8              reduce using rule 62 (const -> INTEGER .)
    U64             reduce using rule 62 (const -> INTEGER .)
    U32             reduce using rule 62 (const -> INTEGER .)
    U16             reduce using rule 62 (const -> INTEGER .)
    U8              reduce using rule 62 (const -> INTEGER .)
    LPAR            reduce using rule 62 (const -> INTEGER .)
    NOT             reduce using rule 62 (const -> INTEGER .)
    FROM            reduce using rule 62 (const -> INTEGER .)
    DEF             reduce using rule 62 (const -> INTEGER .)
    BOOLEAN         reduce using rule 62 (const -> INTEGER .)
    STRING          reduce using rule 62 (const -> INTEGER .)
    INTEGER         reduce using rule 62 (const -> INTEGER .)
    FLOAT           reduce using rule 62 (const -> INTEGER .)
    HEX             reduce using rule 62 (const -> INTEGER .)
    $end            reduce using rule 62 (const -> INTEGER .)
    DEDENT          reduce using rule 62 (const -> INTEGER .)
    COLON           reduce using rule 62 (const -> INTEGER .)
    RPAR            reduce using rule 62 (const -> INTEGER .)
    COMMA           reduce using rule 62 (const -> INTEGER .)


state 29

    (63) const -> FLOAT .
    OR              reduce using rule 63 (const -> FLOAT .)
    AND             reduce using rule 63 (const -> FLOAT .)
    NEQ             reduce using rule 63 (const -> FLOAT .)
    EQ              reduce using rule 63 (const -> FLOAT .)
    LT              reduce using rule 63 (const -> FLOAT .)
    GT              reduce using rule 63 (const -> FLOAT .)
    LTE             reduce using rule 63 (const -> FLOAT .)
    GTE             reduce using rule 63 (const -> FLOAT .)
    MOD             reduce using rule 63 (const -> FLOAT .)
    DIV             reduce using rule 63 (const -> FLOAT .)
    MULT            reduce using rule 63 (const -> FLOAT .)
    MINUS           reduce using rule 63 (const -> FLOAT .)
    PLUS            reduce using rule 63 (const -> FLOAT .)
    NEWLINE         reduce using rule 63 (const -> FLOAT .)
    NAME            reduce using rule 63 (const -> FLOAT .)
    RETURN          reduce using rule 63 (const -> FLOAT .)
    WHILE           reduce using rule 63 (const -> FLOAT .)
    IF              reduce using rule 63 (const -> FLOAT .)
    PASS            reduce using rule 63 (const -> FLOAT .)
    S64             reduce using rule 63 (const -> FLOAT .)
    S32             reduce using rule 63 (const -> FLOAT .)
    S16             reduce using rule 63 (const -> FLOAT .)
    S8              reduce using rule 63 (const -> FLOAT .)
    U64             reduce using rule 63 (const -> FLOAT .)
    U32             reduce using rule 63 (const -> FLOAT .)
    U16             reduce using rule 63 (const -> FLOAT .)
    U8              reduce using rule 63 (const -> FLOAT .)
    LPAR            reduce using rule 63 (const -> FLOAT .)
    NOT             reduce using rule 63 (const -> FLOAT .)
    FROM            reduce using rule 63 (const -> FLOAT .)
    DEF             reduce using rule 63 (const -> FLOAT .)
    BOOLEAN         reduce using rule 63 (const -> FLOAT .)
    STRING          reduce using rule 63 (const -> FLOAT .)
    INTEGER         reduce using rule 63 (const -> FLOAT .)
    FLOAT           reduce using rule 63 (const -> FLOAT .)
    HEX             reduce using rule 63 (const -> FLOAT .)
    $end            reduce using rule 63 (const -> FLOAT .)
    DEDENT          reduce using rule 63 (const -> FLOAT .)
    COLON           reduce using rule 63 (const -> FLOAT .)
    RPAR            reduce using rule 63 (const -> FLOAT .)
    COMMA           reduce using rule 63 (const -> FLOAT .)


state 30

    (64) const -> HEX .
    OR              reduce using rule 64 (const -> HEX .)
    AND             reduce using rule 64 (const -> HEX .)
    NEQ             reduce using rule 64 (const -> HEX .)
    EQ              reduce using rule 64 (const -> HEX .)
    LT              reduce using rule 64 (const -> HEX .)
    GT              reduce using rule 64 (const -> HEX .)
    LTE             reduce using rule 64 (const -> HEX .)
    GTE             reduce using rule 64 (const -> HEX .)
    MOD             reduce using rule 64 (const -> HEX .)
    DIV             reduce using rule 64 (const -> HEX .)
    MULT            reduce using rule 64 (const -> HEX .)
    MINUS           reduce using rule 64 (const -> HEX .)
    PLUS            reduce using rule 64 (const -> HEX .)
    NEWLINE         reduce using rule 64 (const -> HEX .)
    NAME            reduce using rule 64 (const -> HEX .)
    RETURN          reduce using rule 64 (const -> HEX .)
    WHILE           reduce using rule 64 (const -> HEX .)
    IF              reduce using rule 64 (const -> HEX .)
    PASS            reduce using rule 64 (const -> HEX .)
    S64             reduce using rule 64 (const -> HEX .)
    S32             reduce using rule 64 (const -> HEX .)
    S16             reduce using rule 64 (const -> HEX .)
    S8              reduce using rule 64 (const -> HEX .)
    U64             reduce using rule 64 (const -> HEX .)
    U32             reduce using rule 64 (const -> HEX .)
    U16             reduce using rule 64 (const -> HEX .)
    U8              reduce using rule 64 (const -> HEX .)
    LPAR            reduce using rule 64 (const -> HEX .)
    NOT             reduce using rule 64 (const -> HEX .)
    FROM            reduce using rule 64 (const -> HEX .)
    DEF             reduce using rule 64 (const -> HEX .)
    BOOLEAN         reduce using rule 64 (const -> HEX .)
    STRING          reduce using rule 64 (const -> HEX .)
    INTEGER         reduce using rule 64 (const -> HEX .)
    FLOAT           reduce using rule 64 (const -> HEX .)
    HEX             reduce using rule 64 (const -> HEX .)
    $end            reduce using rule 64 (const -> HEX .)
    DEDENT          reduce using rule 64 (const -> HEX .)
    COLON           reduce using rule 64 (const -> HEX .)
    RPAR            reduce using rule 64 (const -> HEX .)
    COMMA           reduce using rule 64 (const -> HEX .)


state 31

    (1) program -> statement_full program .
    $end            reduce using rule 1 (program -> statement_full program .)


state 32

    (4) statement_full -> statement NEWLINE .
    NAME            reduce using rule 4 (statement_full -> statement NEWLINE .)
    RETURN          reduce using rule 4 (statement_full -> statement NEWLINE .)
    WHILE           reduce using rule 4 (statement_full -> statement NEWLINE .)
    IF              reduce using rule 4 (statement_full -> statement NEWLINE .)
    PASS            reduce using rule 4 (statement_full -> statement NEWLINE .)
    S64             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S32             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S16             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S8              reduce using rule 4 (statement_full -> statement NEWLINE .)
    U64             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U32             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U16             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U8              reduce using rule 4 (statement_full -> statement NEWLINE .)
    LPAR            reduce using rule 4 (statement_full -> statement NEWLINE .)
    NOT             reduce using rule 4 (statement_full -> statement NEWLINE .)
    FROM            reduce using rule 4 (statement_full -> statement NEWLINE .)
    DEF             reduce using rule 4 (statement_full -> statement NEWLINE .)
    BOOLEAN         reduce using rule 4 (statement_full -> statement NEWLINE .)
    STRING          reduce using rule 4 (statement_full -> statement NEWLINE .)
    INTEGER         reduce using rule 4 (statement_full -> statement NEWLINE .)
    FLOAT           reduce using rule 4 (statement_full -> statement NEWLINE .)
    HEX             reduce using rule 4 (statement_full -> statement NEWLINE .)
    $end            reduce using rule 4 (statement_full -> statement NEWLINE .)
    DEDENT          reduce using rule 4 (statement_full -> statement NEWLINE .)


state 33

    (5) statement -> type COLON . NAME ASSIGN expression
    (6) statement -> type COLON . NAME ASSIGN const
    NAME            shift and go to state 57


state 34

    (7) statement -> NAME ASSIGN . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 58
    const                          shift and go to state 7

state 35

    (45) expression -> NAME LPAR . arglist RPAR
    (49) arglist -> .
    (50) arglist -> . argument
    (51) arglist -> . argument COMMA arglist
    (46) argument -> . type COLON NAME
    (47) argument -> . const
    (48) argument -> . NAME
    (52) type -> . S64
    (53) type -> . S32
    (54) type -> . S16
    (55) type -> . S8
    (56) type -> . U64
    (57) type -> . U32
    (58) type -> . U16
    (59) type -> . U8
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    RPAR            reduce using rule 49 (arglist -> .)
    NAME            shift and go to state 59
    S64             shift and go to state 14
    S32             shift and go to state 15
    S16             shift and go to state 16
    S8              shift and go to state 17
    U64             shift and go to state 18
    U32             shift and go to state 19
    U16             shift and go to state 20
    U8              shift and go to state 21
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    arglist                        shift and go to state 60
    argument                       shift and go to state 61
    type                           shift and go to state 62
    const                          shift and go to state 63

state 36

    (32) expression -> expression OR . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 64
    const                          shift and go to state 7

state 37

    (33) expression -> expression AND . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 65
    const                          shift and go to state 7

state 38

    (34) expression -> expression NEQ . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 66
    const                          shift and go to state 7

state 39

    (35) expression -> expression EQ . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 67
    const                          shift and go to state 7

state 40

    (36) expression -> expression LT . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 68
    const                          shift and go to state 7

state 41

    (37) expression -> expression GT . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 69
    const                          shift and go to state 7

state 42

    (38) expression -> expression LTE . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 70
    const                          shift and go to state 7

state 43

    (39) expression -> expression GTE . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 71
    const                          shift and go to state 7

state 44

    (40) expression -> expression MOD . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 72
    const                          shift and go to state 7

state 45

    (41) expression -> expression DIV . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 73
    const                          shift and go to state 7

state 46

    (42) expression -> expression MULT . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 74
    const                          shift and go to state 7

state 47

    (43) expression -> expression MINUS . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 75
    const                          shift and go to state 7

state 48

    (44) expression -> expression PLUS . expression
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 76
    const                          shift and go to state 7

state 49

    (8) statement -> RETURN expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 8 (statement -> RETURN expression .)
    NAME            reduce using rule 8 (statement -> RETURN expression .)
    RETURN          reduce using rule 8 (statement -> RETURN expression .)
    WHILE           reduce using rule 8 (statement -> RETURN expression .)
    IF              reduce using rule 8 (statement -> RETURN expression .)
    PASS            reduce using rule 8 (statement -> RETURN expression .)
    S64             reduce using rule 8 (statement -> RETURN expression .)
    S32             reduce using rule 8 (statement -> RETURN expression .)
    S16             reduce using rule 8 (statement -> RETURN expression .)
    S8              reduce using rule 8 (statement -> RETURN expression .)
    U64             reduce using rule 8 (statement -> RETURN expression .)
    U32             reduce using rule 8 (statement -> RETURN expression .)
    U16             reduce using rule 8 (statement -> RETURN expression .)
    U8              reduce using rule 8 (statement -> RETURN expression .)
    LPAR            reduce using rule 8 (statement -> RETURN expression .)
    NOT             reduce using rule 8 (statement -> RETURN expression .)
    FROM            reduce using rule 8 (statement -> RETURN expression .)
    DEF             reduce using rule 8 (statement -> RETURN expression .)
    BOOLEAN         reduce using rule 8 (statement -> RETURN expression .)
    STRING          reduce using rule 8 (statement -> RETURN expression .)
    INTEGER         reduce using rule 8 (statement -> RETURN expression .)
    FLOAT           reduce using rule 8 (statement -> RETURN expression .)
    HEX             reduce using rule 8 (statement -> RETURN expression .)
    $end            reduce using rule 8 (statement -> RETURN expression .)
    DEDENT          reduce using rule 8 (statement -> RETURN expression .)
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 50

    (28) expression -> NAME .
    (45) expression -> NAME . LPAR arglist RPAR
  ! shift/reduce conflict for LPAR resolved as shift
    OR              reduce using rule 28 (expression -> NAME .)
    AND             reduce using rule 28 (expression -> NAME .)
    NEQ             reduce using rule 28 (expression -> NAME .)
    EQ              reduce using rule 28 (expression -> NAME .)
    LT              reduce using rule 28 (expression -> NAME .)
    GT              reduce using rule 28 (expression -> NAME .)
    LTE             reduce using rule 28 (expression -> NAME .)
    GTE             reduce using rule 28 (expression -> NAME .)
    MOD             reduce using rule 28 (expression -> NAME .)
    DIV             reduce using rule 28 (expression -> NAME .)
    MULT            reduce using rule 28 (expression -> NAME .)
    MINUS           reduce using rule 28 (expression -> NAME .)
    PLUS            reduce using rule 28 (expression -> NAME .)
    NEWLINE         reduce using rule 28 (expression -> NAME .)
    NAME            reduce using rule 28 (expression -> NAME .)
    RETURN          reduce using rule 28 (expression -> NAME .)
    WHILE           reduce using rule 28 (expression -> NAME .)
    IF              reduce using rule 28 (expression -> NAME .)
    PASS            reduce using rule 28 (expression -> NAME .)
    S64             reduce using rule 28 (expression -> NAME .)
    S32             reduce using rule 28 (expression -> NAME .)
    S16             reduce using rule 28 (expression -> NAME .)
    S8              reduce using rule 28 (expression -> NAME .)
    U64             reduce using rule 28 (expression -> NAME .)
    U32             reduce using rule 28 (expression -> NAME .)
    U16             reduce using rule 28 (expression -> NAME .)
    U8              reduce using rule 28 (expression -> NAME .)
    NOT             reduce using rule 28 (expression -> NAME .)
    FROM            reduce using rule 28 (expression -> NAME .)
    DEF             reduce using rule 28 (expression -> NAME .)
    BOOLEAN         reduce using rule 28 (expression -> NAME .)
    STRING          reduce using rule 28 (expression -> NAME .)
    INTEGER         reduce using rule 28 (expression -> NAME .)
    FLOAT           reduce using rule 28 (expression -> NAME .)
    HEX             reduce using rule 28 (expression -> NAME .)
    $end            reduce using rule 28 (expression -> NAME .)
    DEDENT          reduce using rule 28 (expression -> NAME .)
    COLON           reduce using rule 28 (expression -> NAME .)
    RPAR            reduce using rule 28 (expression -> NAME .)
    LPAR            shift and go to state 35


state 51

    (9) statement -> WHILE expression . COLON NEWLINE block
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    COLON           shift and go to state 77
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 52

    (10) statement -> IF expression . COLON NEWLINE block NEWLINE
    (11) statement -> IF expression . COLON NEWLINE block NEWLINE else_statement
    (12) statement -> IF expression . COLON NEWLINE block NEWLINE elif_statement
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    COLON           shift and go to state 78
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 53

    (30) expression -> LPAR expression . RPAR
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    RPAR            shift and go to state 79
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 54

    (31) expression -> NOT expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 31 (expression -> NOT expression .)
    NAME            reduce using rule 31 (expression -> NOT expression .)
    RETURN          reduce using rule 31 (expression -> NOT expression .)
    WHILE           reduce using rule 31 (expression -> NOT expression .)
    IF              reduce using rule 31 (expression -> NOT expression .)
    PASS            reduce using rule 31 (expression -> NOT expression .)
    S64             reduce using rule 31 (expression -> NOT expression .)
    S32             reduce using rule 31 (expression -> NOT expression .)
    S16             reduce using rule 31 (expression -> NOT expression .)
    S8              reduce using rule 31 (expression -> NOT expression .)
    U64             reduce using rule 31 (expression -> NOT expression .)
    U32             reduce using rule 31 (expression -> NOT expression .)
    U16             reduce using rule 31 (expression -> NOT expression .)
    U8              reduce using rule 31 (expression -> NOT expression .)
    LPAR            reduce using rule 31 (expression -> NOT expression .)
    NOT             reduce using rule 31 (expression -> NOT expression .)
    FROM            reduce using rule 31 (expression -> NOT expression .)
    DEF             reduce using rule 31 (expression -> NOT expression .)
    BOOLEAN         reduce using rule 31 (expression -> NOT expression .)
    STRING          reduce using rule 31 (expression -> NOT expression .)
    INTEGER         reduce using rule 31 (expression -> NOT expression .)
    FLOAT           reduce using rule 31 (expression -> NOT expression .)
    HEX             reduce using rule 31 (expression -> NOT expression .)
    $end            reduce using rule 31 (expression -> NOT expression .)
    DEDENT          reduce using rule 31 (expression -> NOT expression .)
    COLON           reduce using rule 31 (expression -> NOT expression .)
    RPAR            reduce using rule 31 (expression -> NOT expression .)
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 55

    (17) import_statement -> FROM NAME . IMPORT module_list
    IMPORT          shift and go to state 80


state 56

    (20) chain_statement -> DEF NAME . LPAR arglist RPAR COLON NEWLINE block
    LPAR            shift and go to state 81


state 57

    (5) statement -> type COLON NAME . ASSIGN expression
    (6) statement -> type COLON NAME . ASSIGN const
    ASSIGN          shift and go to state 82


state 58

    (7) statement -> NAME ASSIGN expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    NAME            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    RETURN          reduce using rule 7 (statement -> NAME ASSIGN expression .)
    WHILE           reduce using rule 7 (statement -> NAME ASSIGN expression .)
    IF              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    PASS            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S64             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S32             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S16             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S8              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U64             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U32             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U16             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U8              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    LPAR            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    NOT             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    FROM            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    DEF             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    BOOLEAN         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    STRING          reduce using rule 7 (statement -> NAME ASSIGN expression .)
    INTEGER         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    FLOAT           reduce using rule 7 (statement -> NAME ASSIGN expression .)
    HEX             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    $end            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    DEDENT          reduce using rule 7 (statement -> NAME ASSIGN expression .)
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 59

    (48) argument -> NAME .
    COMMA           reduce using rule 48 (argument -> NAME .)
    RPAR            reduce using rule 48 (argument -> NAME .)


state 60

    (45) expression -> NAME LPAR arglist . RPAR
    RPAR            shift and go to state 83


state 61

    (50) arglist -> argument .
    (51) arglist -> argument . COMMA arglist
    RPAR            reduce using rule 50 (arglist -> argument .)
    COMMA           shift and go to state 84


state 62

    (46) argument -> type . COLON NAME
    COLON           shift and go to state 85


state 63

    (47) argument -> const .
    COMMA           reduce using rule 47 (argument -> const .)
    RPAR            reduce using rule 47 (argument -> const .)


state 64

    (32) expression -> expression OR expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 32 (expression -> expression OR expression .)
    NAME            reduce using rule 32 (expression -> expression OR expression .)
    RETURN          reduce using rule 32 (expression -> expression OR expression .)
    WHILE           reduce using rule 32 (expression -> expression OR expression .)
    IF              reduce using rule 32 (expression -> expression OR expression .)
    PASS            reduce using rule 32 (expression -> expression OR expression .)
    S64             reduce using rule 32 (expression -> expression OR expression .)
    S32             reduce using rule 32 (expression -> expression OR expression .)
    S16             reduce using rule 32 (expression -> expression OR expression .)
    S8              reduce using rule 32 (expression -> expression OR expression .)
    U64             reduce using rule 32 (expression -> expression OR expression .)
    U32             reduce using rule 32 (expression -> expression OR expression .)
    U16             reduce using rule 32 (expression -> expression OR expression .)
    U8              reduce using rule 32 (expression -> expression OR expression .)
    LPAR            reduce using rule 32 (expression -> expression OR expression .)
    NOT             reduce using rule 32 (expression -> expression OR expression .)
    FROM            reduce using rule 32 (expression -> expression OR expression .)
    DEF             reduce using rule 32 (expression -> expression OR expression .)
    BOOLEAN         reduce using rule 32 (expression -> expression OR expression .)
    STRING          reduce using rule 32 (expression -> expression OR expression .)
    INTEGER         reduce using rule 32 (expression -> expression OR expression .)
    FLOAT           reduce using rule 32 (expression -> expression OR expression .)
    HEX             reduce using rule 32 (expression -> expression OR expression .)
    $end            reduce using rule 32 (expression -> expression OR expression .)
    DEDENT          reduce using rule 32 (expression -> expression OR expression .)
    COLON           reduce using rule 32 (expression -> expression OR expression .)
    RPAR            reduce using rule 32 (expression -> expression OR expression .)
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 65

    (33) expression -> expression AND expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 33 (expression -> expression AND expression .)
    NAME            reduce using rule 33 (expression -> expression AND expression .)
    RETURN          reduce using rule 33 (expression -> expression AND expression .)
    WHILE           reduce using rule 33 (expression -> expression AND expression .)
    IF              reduce using rule 33 (expression -> expression AND expression .)
    PASS            reduce using rule 33 (expression -> expression AND expression .)
    S64             reduce using rule 33 (expression -> expression AND expression .)
    S32             reduce using rule 33 (expression -> expression AND expression .)
    S16             reduce using rule 33 (expression -> expression AND expression .)
    S8              reduce using rule 33 (expression -> expression AND expression .)
    U64             reduce using rule 33 (expression -> expression AND expression .)
    U32             reduce using rule 33 (expression -> expression AND expression .)
    U16             reduce using rule 33 (expression -> expression AND expression .)
    U8              reduce using rule 33 (expression -> expression AND expression .)
    LPAR            reduce using rule 33 (expression -> expression AND expression .)
    NOT             reduce using rule 33 (expression -> expression AND expression .)
    FROM            reduce using rule 33 (expression -> expression AND expression .)
    DEF             reduce using rule 33 (expression -> expression AND expression .)
    BOOLEAN         reduce using rule 33 (expression -> expression AND expression .)
    STRING          reduce using rule 33 (expression -> expression AND expression .)
    INTEGER         reduce using rule 33 (expression -> expression AND expression .)
    FLOAT           reduce using rule 33 (expression -> expression AND expression .)
    HEX             reduce using rule 33 (expression -> expression AND expression .)
    $end            reduce using rule 33 (expression -> expression AND expression .)
    DEDENT          reduce using rule 33 (expression -> expression AND expression .)
    COLON           reduce using rule 33 (expression -> expression AND expression .)
    RPAR            reduce using rule 33 (expression -> expression AND expression .)
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 66

    (34) expression -> expression NEQ expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 34 (expression -> expression NEQ expression .)
    AND             reduce using rule 34 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 34 (expression -> expression NEQ expression .)
    EQ              reduce using rule 34 (expression -> expression NEQ expression .)
    LT              reduce using rule 34 (expression -> expression NEQ expression .)
    GT              reduce using rule 34 (expression -> expression NEQ expression .)
    LTE             reduce using rule 34 (expression -> expression NEQ expression .)
    GTE             reduce using rule 34 (expression -> expression NEQ expression .)
    MOD             reduce using rule 34 (expression -> expression NEQ expression .)
    NEWLINE         reduce using rule 34 (expression -> expression NEQ expression .)
    NAME            reduce using rule 34 (expression -> expression NEQ expression .)
    RETURN          reduce using rule 34 (expression -> expression NEQ expression .)
    WHILE           reduce using rule 34 (expression -> expression NEQ expression .)
    IF              reduce using rule 34 (expression -> expression NEQ expression .)
    PASS            reduce using rule 34 (expression -> expression NEQ expression .)
    S64             reduce using rule 34 (expression -> expression NEQ expression .)
    S32             reduce using rule 34 (expression -> expression NEQ expression .)
    S16             reduce using rule 34 (expression -> expression NEQ expression .)
    S8              reduce using rule 34 (expression -> expression NEQ expression .)
    U64             reduce using rule 34 (expression -> expression NEQ expression .)
    U32             reduce using rule 34 (expression -> expression NEQ expression .)
    U16             reduce using rule 34 (expression -> expression NEQ expression .)
    U8              reduce using rule 34 (expression -> expression NEQ expression .)
    LPAR            reduce using rule 34 (expression -> expression NEQ expression .)
    NOT             reduce using rule 34 (expression -> expression NEQ expression .)
    FROM            reduce using rule 34 (expression -> expression NEQ expression .)
    DEF             reduce using rule 34 (expression -> expression NEQ expression .)
    BOOLEAN         reduce using rule 34 (expression -> expression NEQ expression .)
    STRING          reduce using rule 34 (expression -> expression NEQ expression .)
    INTEGER         reduce using rule 34 (expression -> expression NEQ expression .)
    FLOAT           reduce using rule 34 (expression -> expression NEQ expression .)
    HEX             reduce using rule 34 (expression -> expression NEQ expression .)
    $end            reduce using rule 34 (expression -> expression NEQ expression .)
    DEDENT          reduce using rule 34 (expression -> expression NEQ expression .)
    COLON           reduce using rule 34 (expression -> expression NEQ expression .)
    RPAR            reduce using rule 34 (expression -> expression NEQ expression .)
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 67

    (35) expression -> expression EQ expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 35 (expression -> expression EQ expression .)
    AND             reduce using rule 35 (expression -> expression EQ expression .)
    NEQ             reduce using rule 35 (expression -> expression EQ expression .)
    EQ              reduce using rule 35 (expression -> expression EQ expression .)
    LT              reduce using rule 35 (expression -> expression EQ expression .)
    GT              reduce using rule 35 (expression -> expression EQ expression .)
    LTE             reduce using rule 35 (expression -> expression EQ expression .)
    GTE             reduce using rule 35 (expression -> expression EQ expression .)
    MOD             reduce using rule 35 (expression -> expression EQ expression .)
    NEWLINE         reduce using rule 35 (expression -> expression EQ expression .)
    NAME            reduce using rule 35 (expression -> expression EQ expression .)
    RETURN          reduce using rule 35 (expression -> expression EQ expression .)
    WHILE           reduce using rule 35 (expression -> expression EQ expression .)
    IF              reduce using rule 35 (expression -> expression EQ expression .)
    PASS            reduce using rule 35 (expression -> expression EQ expression .)
    S64             reduce using rule 35 (expression -> expression EQ expression .)
    S32             reduce using rule 35 (expression -> expression EQ expression .)
    S16             reduce using rule 35 (expression -> expression EQ expression .)
    S8              reduce using rule 35 (expression -> expression EQ expression .)
    U64             reduce using rule 35 (expression -> expression EQ expression .)
    U32             reduce using rule 35 (expression -> expression EQ expression .)
    U16             reduce using rule 35 (expression -> expression EQ expression .)
    U8              reduce using rule 35 (expression -> expression EQ expression .)
    LPAR            reduce using rule 35 (expression -> expression EQ expression .)
    NOT             reduce using rule 35 (expression -> expression EQ expression .)
    FROM            reduce using rule 35 (expression -> expression EQ expression .)
    DEF             reduce using rule 35 (expression -> expression EQ expression .)
    BOOLEAN         reduce using rule 35 (expression -> expression EQ expression .)
    STRING          reduce using rule 35 (expression -> expression EQ expression .)
    INTEGER         reduce using rule 35 (expression -> expression EQ expression .)
    FLOAT           reduce using rule 35 (expression -> expression EQ expression .)
    HEX             reduce using rule 35 (expression -> expression EQ expression .)
    $end            reduce using rule 35 (expression -> expression EQ expression .)
    DEDENT          reduce using rule 35 (expression -> expression EQ expression .)
    COLON           reduce using rule 35 (expression -> expression EQ expression .)
    RPAR            reduce using rule 35 (expression -> expression EQ expression .)
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 68

    (36) expression -> expression LT expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 36 (expression -> expression LT expression .)
    AND             reduce using rule 36 (expression -> expression LT expression .)
    NEQ             reduce using rule 36 (expression -> expression LT expression .)
    EQ              reduce using rule 36 (expression -> expression LT expression .)
    LT              reduce using rule 36 (expression -> expression LT expression .)
    GT              reduce using rule 36 (expression -> expression LT expression .)
    LTE             reduce using rule 36 (expression -> expression LT expression .)
    GTE             reduce using rule 36 (expression -> expression LT expression .)
    MOD             reduce using rule 36 (expression -> expression LT expression .)
    NEWLINE         reduce using rule 36 (expression -> expression LT expression .)
    NAME            reduce using rule 36 (expression -> expression LT expression .)
    RETURN          reduce using rule 36 (expression -> expression LT expression .)
    WHILE           reduce using rule 36 (expression -> expression LT expression .)
    IF              reduce using rule 36 (expression -> expression LT expression .)
    PASS            reduce using rule 36 (expression -> expression LT expression .)
    S64             reduce using rule 36 (expression -> expression LT expression .)
    S32             reduce using rule 36 (expression -> expression LT expression .)
    S16             reduce using rule 36 (expression -> expression LT expression .)
    S8              reduce using rule 36 (expression -> expression LT expression .)
    U64             reduce using rule 36 (expression -> expression LT expression .)
    U32             reduce using rule 36 (expression -> expression LT expression .)
    U16             reduce using rule 36 (expression -> expression LT expression .)
    U8              reduce using rule 36 (expression -> expression LT expression .)
    LPAR            reduce using rule 36 (expression -> expression LT expression .)
    NOT             reduce using rule 36 (expression -> expression LT expression .)
    FROM            reduce using rule 36 (expression -> expression LT expression .)
    DEF             reduce using rule 36 (expression -> expression LT expression .)
    BOOLEAN         reduce using rule 36 (expression -> expression LT expression .)
    STRING          reduce using rule 36 (expression -> expression LT expression .)
    INTEGER         reduce using rule 36 (expression -> expression LT expression .)
    FLOAT           reduce using rule 36 (expression -> expression LT expression .)
    HEX             reduce using rule 36 (expression -> expression LT expression .)
    $end            reduce using rule 36 (expression -> expression LT expression .)
    DEDENT          reduce using rule 36 (expression -> expression LT expression .)
    COLON           reduce using rule 36 (expression -> expression LT expression .)
    RPAR            reduce using rule 36 (expression -> expression LT expression .)
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 69

    (37) expression -> expression GT expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 37 (expression -> expression GT expression .)
    AND             reduce using rule 37 (expression -> expression GT expression .)
    NEQ             reduce using rule 37 (expression -> expression GT expression .)
    EQ              reduce using rule 37 (expression -> expression GT expression .)
    LT              reduce using rule 37 (expression -> expression GT expression .)
    GT              reduce using rule 37 (expression -> expression GT expression .)
    LTE             reduce using rule 37 (expression -> expression GT expression .)
    GTE             reduce using rule 37 (expression -> expression GT expression .)
    MOD             reduce using rule 37 (expression -> expression GT expression .)
    NEWLINE         reduce using rule 37 (expression -> expression GT expression .)
    NAME            reduce using rule 37 (expression -> expression GT expression .)
    RETURN          reduce using rule 37 (expression -> expression GT expression .)
    WHILE           reduce using rule 37 (expression -> expression GT expression .)
    IF              reduce using rule 37 (expression -> expression GT expression .)
    PASS            reduce using rule 37 (expression -> expression GT expression .)
    S64             reduce using rule 37 (expression -> expression GT expression .)
    S32             reduce using rule 37 (expression -> expression GT expression .)
    S16             reduce using rule 37 (expression -> expression GT expression .)
    S8              reduce using rule 37 (expression -> expression GT expression .)
    U64             reduce using rule 37 (expression -> expression GT expression .)
    U32             reduce using rule 37 (expression -> expression GT expression .)
    U16             reduce using rule 37 (expression -> expression GT expression .)
    U8              reduce using rule 37 (expression -> expression GT expression .)
    LPAR            reduce using rule 37 (expression -> expression GT expression .)
    NOT             reduce using rule 37 (expression -> expression GT expression .)
    FROM            reduce using rule 37 (expression -> expression GT expression .)
    DEF             reduce using rule 37 (expression -> expression GT expression .)
    BOOLEAN         reduce using rule 37 (expression -> expression GT expression .)
    STRING          reduce using rule 37 (expression -> expression GT expression .)
    INTEGER         reduce using rule 37 (expression -> expression GT expression .)
    FLOAT           reduce using rule 37 (expression -> expression GT expression .)
    HEX             reduce using rule 37 (expression -> expression GT expression .)
    $end            reduce using rule 37 (expression -> expression GT expression .)
    DEDENT          reduce using rule 37 (expression -> expression GT expression .)
    COLON           reduce using rule 37 (expression -> expression GT expression .)
    RPAR            reduce using rule 37 (expression -> expression GT expression .)
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 70

    (38) expression -> expression LTE expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 38 (expression -> expression LTE expression .)
    AND             reduce using rule 38 (expression -> expression LTE expression .)
    NEQ             reduce using rule 38 (expression -> expression LTE expression .)
    EQ              reduce using rule 38 (expression -> expression LTE expression .)
    LT              reduce using rule 38 (expression -> expression LTE expression .)
    GT              reduce using rule 38 (expression -> expression LTE expression .)
    LTE             reduce using rule 38 (expression -> expression LTE expression .)
    GTE             reduce using rule 38 (expression -> expression LTE expression .)
    MOD             reduce using rule 38 (expression -> expression LTE expression .)
    NEWLINE         reduce using rule 38 (expression -> expression LTE expression .)
    NAME            reduce using rule 38 (expression -> expression LTE expression .)
    RETURN          reduce using rule 38 (expression -> expression LTE expression .)
    WHILE           reduce using rule 38 (expression -> expression LTE expression .)
    IF              reduce using rule 38 (expression -> expression LTE expression .)
    PASS            reduce using rule 38 (expression -> expression LTE expression .)
    S64             reduce using rule 38 (expression -> expression LTE expression .)
    S32             reduce using rule 38 (expression -> expression LTE expression .)
    S16             reduce using rule 38 (expression -> expression LTE expression .)
    S8              reduce using rule 38 (expression -> expression LTE expression .)
    U64             reduce using rule 38 (expression -> expression LTE expression .)
    U32             reduce using rule 38 (expression -> expression LTE expression .)
    U16             reduce using rule 38 (expression -> expression LTE expression .)
    U8              reduce using rule 38 (expression -> expression LTE expression .)
    LPAR            reduce using rule 38 (expression -> expression LTE expression .)
    NOT             reduce using rule 38 (expression -> expression LTE expression .)
    FROM            reduce using rule 38 (expression -> expression LTE expression .)
    DEF             reduce using rule 38 (expression -> expression LTE expression .)
    BOOLEAN         reduce using rule 38 (expression -> expression LTE expression .)
    STRING          reduce using rule 38 (expression -> expression LTE expression .)
    INTEGER         reduce using rule 38 (expression -> expression LTE expression .)
    FLOAT           reduce using rule 38 (expression -> expression LTE expression .)
    HEX             reduce using rule 38 (expression -> expression LTE expression .)
    $end            reduce using rule 38 (expression -> expression LTE expression .)
    DEDENT          reduce using rule 38 (expression -> expression LTE expression .)
    COLON           reduce using rule 38 (expression -> expression LTE expression .)
    RPAR            reduce using rule 38 (expression -> expression LTE expression .)
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 71

    (39) expression -> expression GTE expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 39 (expression -> expression GTE expression .)
    AND             reduce using rule 39 (expression -> expression GTE expression .)
    NEQ             reduce using rule 39 (expression -> expression GTE expression .)
    EQ              reduce using rule 39 (expression -> expression GTE expression .)
    LT              reduce using rule 39 (expression -> expression GTE expression .)
    GT              reduce using rule 39 (expression -> expression GTE expression .)
    LTE             reduce using rule 39 (expression -> expression GTE expression .)
    GTE             reduce using rule 39 (expression -> expression GTE expression .)
    MOD             reduce using rule 39 (expression -> expression GTE expression .)
    NEWLINE         reduce using rule 39 (expression -> expression GTE expression .)
    NAME            reduce using rule 39 (expression -> expression GTE expression .)
    RETURN          reduce using rule 39 (expression -> expression GTE expression .)
    WHILE           reduce using rule 39 (expression -> expression GTE expression .)
    IF              reduce using rule 39 (expression -> expression GTE expression .)
    PASS            reduce using rule 39 (expression -> expression GTE expression .)
    S64             reduce using rule 39 (expression -> expression GTE expression .)
    S32             reduce using rule 39 (expression -> expression GTE expression .)
    S16             reduce using rule 39 (expression -> expression GTE expression .)
    S8              reduce using rule 39 (expression -> expression GTE expression .)
    U64             reduce using rule 39 (expression -> expression GTE expression .)
    U32             reduce using rule 39 (expression -> expression GTE expression .)
    U16             reduce using rule 39 (expression -> expression GTE expression .)
    U8              reduce using rule 39 (expression -> expression GTE expression .)
    LPAR            reduce using rule 39 (expression -> expression GTE expression .)
    NOT             reduce using rule 39 (expression -> expression GTE expression .)
    FROM            reduce using rule 39 (expression -> expression GTE expression .)
    DEF             reduce using rule 39 (expression -> expression GTE expression .)
    BOOLEAN         reduce using rule 39 (expression -> expression GTE expression .)
    STRING          reduce using rule 39 (expression -> expression GTE expression .)
    INTEGER         reduce using rule 39 (expression -> expression GTE expression .)
    FLOAT           reduce using rule 39 (expression -> expression GTE expression .)
    HEX             reduce using rule 39 (expression -> expression GTE expression .)
    $end            reduce using rule 39 (expression -> expression GTE expression .)
    DEDENT          reduce using rule 39 (expression -> expression GTE expression .)
    COLON           reduce using rule 39 (expression -> expression GTE expression .)
    RPAR            reduce using rule 39 (expression -> expression GTE expression .)
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 72

    (40) expression -> expression MOD expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 40 (expression -> expression MOD expression .)
    NAME            reduce using rule 40 (expression -> expression MOD expression .)
    RETURN          reduce using rule 40 (expression -> expression MOD expression .)
    WHILE           reduce using rule 40 (expression -> expression MOD expression .)
    IF              reduce using rule 40 (expression -> expression MOD expression .)
    PASS            reduce using rule 40 (expression -> expression MOD expression .)
    S64             reduce using rule 40 (expression -> expression MOD expression .)
    S32             reduce using rule 40 (expression -> expression MOD expression .)
    S16             reduce using rule 40 (expression -> expression MOD expression .)
    S8              reduce using rule 40 (expression -> expression MOD expression .)
    U64             reduce using rule 40 (expression -> expression MOD expression .)
    U32             reduce using rule 40 (expression -> expression MOD expression .)
    U16             reduce using rule 40 (expression -> expression MOD expression .)
    U8              reduce using rule 40 (expression -> expression MOD expression .)
    LPAR            reduce using rule 40 (expression -> expression MOD expression .)
    NOT             reduce using rule 40 (expression -> expression MOD expression .)
    FROM            reduce using rule 40 (expression -> expression MOD expression .)
    DEF             reduce using rule 40 (expression -> expression MOD expression .)
    BOOLEAN         reduce using rule 40 (expression -> expression MOD expression .)
    STRING          reduce using rule 40 (expression -> expression MOD expression .)
    INTEGER         reduce using rule 40 (expression -> expression MOD expression .)
    FLOAT           reduce using rule 40 (expression -> expression MOD expression .)
    HEX             reduce using rule 40 (expression -> expression MOD expression .)
    $end            reduce using rule 40 (expression -> expression MOD expression .)
    DEDENT          reduce using rule 40 (expression -> expression MOD expression .)
    COLON           reduce using rule 40 (expression -> expression MOD expression .)
    RPAR            reduce using rule 40 (expression -> expression MOD expression .)
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 73

    (41) expression -> expression DIV expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 41 (expression -> expression DIV expression .)
    AND             reduce using rule 41 (expression -> expression DIV expression .)
    NEQ             reduce using rule 41 (expression -> expression DIV expression .)
    EQ              reduce using rule 41 (expression -> expression DIV expression .)
    LT              reduce using rule 41 (expression -> expression DIV expression .)
    GT              reduce using rule 41 (expression -> expression DIV expression .)
    LTE             reduce using rule 41 (expression -> expression DIV expression .)
    GTE             reduce using rule 41 (expression -> expression DIV expression .)
    MOD             reduce using rule 41 (expression -> expression DIV expression .)
    DIV             reduce using rule 41 (expression -> expression DIV expression .)
    MULT            reduce using rule 41 (expression -> expression DIV expression .)
    MINUS           reduce using rule 41 (expression -> expression DIV expression .)
    PLUS            reduce using rule 41 (expression -> expression DIV expression .)
    NEWLINE         reduce using rule 41 (expression -> expression DIV expression .)
    NAME            reduce using rule 41 (expression -> expression DIV expression .)
    RETURN          reduce using rule 41 (expression -> expression DIV expression .)
    WHILE           reduce using rule 41 (expression -> expression DIV expression .)
    IF              reduce using rule 41 (expression -> expression DIV expression .)
    PASS            reduce using rule 41 (expression -> expression DIV expression .)
    S64             reduce using rule 41 (expression -> expression DIV expression .)
    S32             reduce using rule 41 (expression -> expression DIV expression .)
    S16             reduce using rule 41 (expression -> expression DIV expression .)
    S8              reduce using rule 41 (expression -> expression DIV expression .)
    U64             reduce using rule 41 (expression -> expression DIV expression .)
    U32             reduce using rule 41 (expression -> expression DIV expression .)
    U16             reduce using rule 41 (expression -> expression DIV expression .)
    U8              reduce using rule 41 (expression -> expression DIV expression .)
    LPAR            reduce using rule 41 (expression -> expression DIV expression .)
    NOT             reduce using rule 41 (expression -> expression DIV expression .)
    FROM            reduce using rule 41 (expression -> expression DIV expression .)
    DEF             reduce using rule 41 (expression -> expression DIV expression .)
    BOOLEAN         reduce using rule 41 (expression -> expression DIV expression .)
    STRING          reduce using rule 41 (expression -> expression DIV expression .)
    INTEGER         reduce using rule 41 (expression -> expression DIV expression .)
    FLOAT           reduce using rule 41 (expression -> expression DIV expression .)
    HEX             reduce using rule 41 (expression -> expression DIV expression .)
    $end            reduce using rule 41 (expression -> expression DIV expression .)
    DEDENT          reduce using rule 41 (expression -> expression DIV expression .)
    COLON           reduce using rule 41 (expression -> expression DIV expression .)
    RPAR            reduce using rule 41 (expression -> expression DIV expression .)


state 74

    (42) expression -> expression MULT expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 42 (expression -> expression MULT expression .)
    AND             reduce using rule 42 (expression -> expression MULT expression .)
    NEQ             reduce using rule 42 (expression -> expression MULT expression .)
    EQ              reduce using rule 42 (expression -> expression MULT expression .)
    LT              reduce using rule 42 (expression -> expression MULT expression .)
    GT              reduce using rule 42 (expression -> expression MULT expression .)
    LTE             reduce using rule 42 (expression -> expression MULT expression .)
    GTE             reduce using rule 42 (expression -> expression MULT expression .)
    MOD             reduce using rule 42 (expression -> expression MULT expression .)
    DIV             reduce using rule 42 (expression -> expression MULT expression .)
    MULT            reduce using rule 42 (expression -> expression MULT expression .)
    MINUS           reduce using rule 42 (expression -> expression MULT expression .)
    PLUS            reduce using rule 42 (expression -> expression MULT expression .)
    NEWLINE         reduce using rule 42 (expression -> expression MULT expression .)
    NAME            reduce using rule 42 (expression -> expression MULT expression .)
    RETURN          reduce using rule 42 (expression -> expression MULT expression .)
    WHILE           reduce using rule 42 (expression -> expression MULT expression .)
    IF              reduce using rule 42 (expression -> expression MULT expression .)
    PASS            reduce using rule 42 (expression -> expression MULT expression .)
    S64             reduce using rule 42 (expression -> expression MULT expression .)
    S32             reduce using rule 42 (expression -> expression MULT expression .)
    S16             reduce using rule 42 (expression -> expression MULT expression .)
    S8              reduce using rule 42 (expression -> expression MULT expression .)
    U64             reduce using rule 42 (expression -> expression MULT expression .)
    U32             reduce using rule 42 (expression -> expression MULT expression .)
    U16             reduce using rule 42 (expression -> expression MULT expression .)
    U8              reduce using rule 42 (expression -> expression MULT expression .)
    LPAR            reduce using rule 42 (expression -> expression MULT expression .)
    NOT             reduce using rule 42 (expression -> expression MULT expression .)
    FROM            reduce using rule 42 (expression -> expression MULT expression .)
    DEF             reduce using rule 42 (expression -> expression MULT expression .)
    BOOLEAN         reduce using rule 42 (expression -> expression MULT expression .)
    STRING          reduce using rule 42 (expression -> expression MULT expression .)
    INTEGER         reduce using rule 42 (expression -> expression MULT expression .)
    FLOAT           reduce using rule 42 (expression -> expression MULT expression .)
    HEX             reduce using rule 42 (expression -> expression MULT expression .)
    $end            reduce using rule 42 (expression -> expression MULT expression .)
    DEDENT          reduce using rule 42 (expression -> expression MULT expression .)
    COLON           reduce using rule 42 (expression -> expression MULT expression .)
    RPAR            reduce using rule 42 (expression -> expression MULT expression .)


state 75

    (43) expression -> expression MINUS expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 43 (expression -> expression MINUS expression .)
    AND             reduce using rule 43 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 43 (expression -> expression MINUS expression .)
    EQ              reduce using rule 43 (expression -> expression MINUS expression .)
    LT              reduce using rule 43 (expression -> expression MINUS expression .)
    GT              reduce using rule 43 (expression -> expression MINUS expression .)
    LTE             reduce using rule 43 (expression -> expression MINUS expression .)
    GTE             reduce using rule 43 (expression -> expression MINUS expression .)
    MOD             reduce using rule 43 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 43 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 43 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 43 (expression -> expression MINUS expression .)
    NAME            reduce using rule 43 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 43 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 43 (expression -> expression MINUS expression .)
    IF              reduce using rule 43 (expression -> expression MINUS expression .)
    PASS            reduce using rule 43 (expression -> expression MINUS expression .)
    S64             reduce using rule 43 (expression -> expression MINUS expression .)
    S32             reduce using rule 43 (expression -> expression MINUS expression .)
    S16             reduce using rule 43 (expression -> expression MINUS expression .)
    S8              reduce using rule 43 (expression -> expression MINUS expression .)
    U64             reduce using rule 43 (expression -> expression MINUS expression .)
    U32             reduce using rule 43 (expression -> expression MINUS expression .)
    U16             reduce using rule 43 (expression -> expression MINUS expression .)
    U8              reduce using rule 43 (expression -> expression MINUS expression .)
    LPAR            reduce using rule 43 (expression -> expression MINUS expression .)
    NOT             reduce using rule 43 (expression -> expression MINUS expression .)
    FROM            reduce using rule 43 (expression -> expression MINUS expression .)
    DEF             reduce using rule 43 (expression -> expression MINUS expression .)
    BOOLEAN         reduce using rule 43 (expression -> expression MINUS expression .)
    STRING          reduce using rule 43 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 43 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 43 (expression -> expression MINUS expression .)
    HEX             reduce using rule 43 (expression -> expression MINUS expression .)
    $end            reduce using rule 43 (expression -> expression MINUS expression .)
    DEDENT          reduce using rule 43 (expression -> expression MINUS expression .)
    COLON           reduce using rule 43 (expression -> expression MINUS expression .)
    RPAR            reduce using rule 43 (expression -> expression MINUS expression .)
    DIV             shift and go to state 45
    MULT            shift and go to state 46


state 76

    (44) expression -> expression PLUS expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    OR              reduce using rule 44 (expression -> expression PLUS expression .)
    AND             reduce using rule 44 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 44 (expression -> expression PLUS expression .)
    EQ              reduce using rule 44 (expression -> expression PLUS expression .)
    LT              reduce using rule 44 (expression -> expression PLUS expression .)
    GT              reduce using rule 44 (expression -> expression PLUS expression .)
    LTE             reduce using rule 44 (expression -> expression PLUS expression .)
    GTE             reduce using rule 44 (expression -> expression PLUS expression .)
    MOD             reduce using rule 44 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 44 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 44 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 44 (expression -> expression PLUS expression .)
    NAME            reduce using rule 44 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 44 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 44 (expression -> expression PLUS expression .)
    IF              reduce using rule 44 (expression -> expression PLUS expression .)
    PASS            reduce using rule 44 (expression -> expression PLUS expression .)
    S64             reduce using rule 44 (expression -> expression PLUS expression .)
    S32             reduce using rule 44 (expression -> expression PLUS expression .)
    S16             reduce using rule 44 (expression -> expression PLUS expression .)
    S8              reduce using rule 44 (expression -> expression PLUS expression .)
    U64             reduce using rule 44 (expression -> expression PLUS expression .)
    U32             reduce using rule 44 (expression -> expression PLUS expression .)
    U16             reduce using rule 44 (expression -> expression PLUS expression .)
    U8              reduce using rule 44 (expression -> expression PLUS expression .)
    LPAR            reduce using rule 44 (expression -> expression PLUS expression .)
    NOT             reduce using rule 44 (expression -> expression PLUS expression .)
    FROM            reduce using rule 44 (expression -> expression PLUS expression .)
    DEF             reduce using rule 44 (expression -> expression PLUS expression .)
    BOOLEAN         reduce using rule 44 (expression -> expression PLUS expression .)
    STRING          reduce using rule 44 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 44 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 44 (expression -> expression PLUS expression .)
    HEX             reduce using rule 44 (expression -> expression PLUS expression .)
    $end            reduce using rule 44 (expression -> expression PLUS expression .)
    DEDENT          reduce using rule 44 (expression -> expression PLUS expression .)
    COLON           reduce using rule 44 (expression -> expression PLUS expression .)
    RPAR            reduce using rule 44 (expression -> expression PLUS expression .)
    DIV             shift and go to state 45
    MULT            shift and go to state 46


state 77

    (9) statement -> WHILE expression COLON . NEWLINE block
    NEWLINE         shift and go to state 86


state 78

    (10) statement -> IF expression COLON . NEWLINE block NEWLINE
    (11) statement -> IF expression COLON . NEWLINE block NEWLINE else_statement
    (12) statement -> IF expression COLON . NEWLINE block NEWLINE elif_statement
    NEWLINE         shift and go to state 87


state 79

    (30) expression -> LPAR expression RPAR .
    OR              reduce using rule 30 (expression -> LPAR expression RPAR .)
    AND             reduce using rule 30 (expression -> LPAR expression RPAR .)
    NEQ             reduce using rule 30 (expression -> LPAR expression RPAR .)
    EQ              reduce using rule 30 (expression -> LPAR expression RPAR .)
    LT              reduce using rule 30 (expression -> LPAR expression RPAR .)
    GT              reduce using rule 30 (expression -> LPAR expression RPAR .)
    LTE             reduce using rule 30 (expression -> LPAR expression RPAR .)
    GTE             reduce using rule 30 (expression -> LPAR expression RPAR .)
    MOD             reduce using rule 30 (expression -> LPAR expression RPAR .)
    DIV             reduce using rule 30 (expression -> LPAR expression RPAR .)
    MULT            reduce using rule 30 (expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 30 (expression -> LPAR expression RPAR .)
    PLUS            reduce using rule 30 (expression -> LPAR expression RPAR .)
    NEWLINE         reduce using rule 30 (expression -> LPAR expression RPAR .)
    NAME            reduce using rule 30 (expression -> LPAR expression RPAR .)
    RETURN          reduce using rule 30 (expression -> LPAR expression RPAR .)
    WHILE           reduce using rule 30 (expression -> LPAR expression RPAR .)
    IF              reduce using rule 30 (expression -> LPAR expression RPAR .)
    PASS            reduce using rule 30 (expression -> LPAR expression RPAR .)
    S64             reduce using rule 30 (expression -> LPAR expression RPAR .)
    S32             reduce using rule 30 (expression -> LPAR expression RPAR .)
    S16             reduce using rule 30 (expression -> LPAR expression RPAR .)
    S8              reduce using rule 30 (expression -> LPAR expression RPAR .)
    U64             reduce using rule 30 (expression -> LPAR expression RPAR .)
    U32             reduce using rule 30 (expression -> LPAR expression RPAR .)
    U16             reduce using rule 30 (expression -> LPAR expression RPAR .)
    U8              reduce using rule 30 (expression -> LPAR expression RPAR .)
    LPAR            reduce using rule 30 (expression -> LPAR expression RPAR .)
    NOT             reduce using rule 30 (expression -> LPAR expression RPAR .)
    FROM            reduce using rule 30 (expression -> LPAR expression RPAR .)
    DEF             reduce using rule 30 (expression -> LPAR expression RPAR .)
    BOOLEAN         reduce using rule 30 (expression -> LPAR expression RPAR .)
    STRING          reduce using rule 30 (expression -> LPAR expression RPAR .)
    INTEGER         reduce using rule 30 (expression -> LPAR expression RPAR .)
    FLOAT           reduce using rule 30 (expression -> LPAR expression RPAR .)
    HEX             reduce using rule 30 (expression -> LPAR expression RPAR .)
    $end            reduce using rule 30 (expression -> LPAR expression RPAR .)
    DEDENT          reduce using rule 30 (expression -> LPAR expression RPAR .)
    COLON           reduce using rule 30 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 30 (expression -> LPAR expression RPAR .)


state 80

    (17) import_statement -> FROM NAME IMPORT . module_list
    (18) module_list -> . NAME
    (19) module_list -> . NAME COMMA module_list
    NAME            shift and go to state 88

    module_list                    shift and go to state 89

state 81

    (20) chain_statement -> DEF NAME LPAR . arglist RPAR COLON NEWLINE block
    (49) arglist -> .
    (50) arglist -> . argument
    (51) arglist -> . argument COMMA arglist
    (46) argument -> . type COLON NAME
    (47) argument -> . const
    (48) argument -> . NAME
    (52) type -> . S64
    (53) type -> . S32
    (54) type -> . S16
    (55) type -> . S8
    (56) type -> . U64
    (57) type -> . U32
    (58) type -> . U16
    (59) type -> . U8
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    RPAR            reduce using rule 49 (arglist -> .)
    NAME            shift and go to state 59
    S64             shift and go to state 14
    S32             shift and go to state 15
    S16             shift and go to state 16
    S8              shift and go to state 17
    U64             shift and go to state 18
    U32             shift and go to state 19
    U16             shift and go to state 20
    U8              shift and go to state 21
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    arglist                        shift and go to state 90
    argument                       shift and go to state 61
    type                           shift and go to state 62
    const                          shift and go to state 63

state 82

    (5) statement -> type COLON NAME ASSIGN . expression
    (6) statement -> type COLON NAME ASSIGN . const
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 91
    const                          shift and go to state 92

state 83

    (45) expression -> NAME LPAR arglist RPAR .
    OR              reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    AND             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    NEQ             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    EQ              reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    LT              reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    GT              reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    LTE             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    GTE             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    MOD             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    DIV             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    MULT            reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    MINUS           reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    PLUS            reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    NEWLINE         reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    NAME            reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    RETURN          reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    WHILE           reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    IF              reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    PASS            reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    S64             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    S32             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    S16             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    S8              reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    U64             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    U32             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    U16             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    U8              reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    LPAR            reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    NOT             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    FROM            reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    DEF             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    BOOLEAN         reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    STRING          reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    INTEGER         reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    FLOAT           reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    HEX             reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    $end            reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    DEDENT          reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    COLON           reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)
    RPAR            reduce using rule 45 (expression -> NAME LPAR arglist RPAR .)


state 84

    (51) arglist -> argument COMMA . arglist
    (49) arglist -> .
    (50) arglist -> . argument
    (51) arglist -> . argument COMMA arglist
    (46) argument -> . type COLON NAME
    (47) argument -> . const
    (48) argument -> . NAME
    (52) type -> . S64
    (53) type -> . S32
    (54) type -> . S16
    (55) type -> . S8
    (56) type -> . U64
    (57) type -> . U32
    (58) type -> . U16
    (59) type -> . U8
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    RPAR            reduce using rule 49 (arglist -> .)
    NAME            shift and go to state 59
    S64             shift and go to state 14
    S32             shift and go to state 15
    S16             shift and go to state 16
    S8              shift and go to state 17
    U64             shift and go to state 18
    U32             shift and go to state 19
    U16             shift and go to state 20
    U8              shift and go to state 21
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    argument                       shift and go to state 61
    arglist                        shift and go to state 93
    type                           shift and go to state 62
    const                          shift and go to state 63

state 85

    (46) argument -> type COLON . NAME
    NAME            shift and go to state 94


state 86

    (9) statement -> WHILE expression COLON NEWLINE . block
    (21) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 96

    block                          shift and go to state 95

state 87

    (10) statement -> IF expression COLON NEWLINE . block NEWLINE
    (11) statement -> IF expression COLON NEWLINE . block NEWLINE else_statement
    (12) statement -> IF expression COLON NEWLINE . block NEWLINE elif_statement
    (21) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 96

    block                          shift and go to state 97

state 88

    (18) module_list -> NAME .
    (19) module_list -> NAME . COMMA module_list
    NEWLINE         reduce using rule 18 (module_list -> NAME .)
    NAME            reduce using rule 18 (module_list -> NAME .)
    RETURN          reduce using rule 18 (module_list -> NAME .)
    WHILE           reduce using rule 18 (module_list -> NAME .)
    IF              reduce using rule 18 (module_list -> NAME .)
    PASS            reduce using rule 18 (module_list -> NAME .)
    S64             reduce using rule 18 (module_list -> NAME .)
    S32             reduce using rule 18 (module_list -> NAME .)
    S16             reduce using rule 18 (module_list -> NAME .)
    S8              reduce using rule 18 (module_list -> NAME .)
    U64             reduce using rule 18 (module_list -> NAME .)
    U32             reduce using rule 18 (module_list -> NAME .)
    U16             reduce using rule 18 (module_list -> NAME .)
    U8              reduce using rule 18 (module_list -> NAME .)
    LPAR            reduce using rule 18 (module_list -> NAME .)
    NOT             reduce using rule 18 (module_list -> NAME .)
    FROM            reduce using rule 18 (module_list -> NAME .)
    DEF             reduce using rule 18 (module_list -> NAME .)
    BOOLEAN         reduce using rule 18 (module_list -> NAME .)
    STRING          reduce using rule 18 (module_list -> NAME .)
    INTEGER         reduce using rule 18 (module_list -> NAME .)
    FLOAT           reduce using rule 18 (module_list -> NAME .)
    HEX             reduce using rule 18 (module_list -> NAME .)
    $end            reduce using rule 18 (module_list -> NAME .)
    DEDENT          reduce using rule 18 (module_list -> NAME .)
    COMMA           shift and go to state 98


state 89

    (17) import_statement -> FROM NAME IMPORT module_list .
    NEWLINE         reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    NAME            reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    RETURN          reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    WHILE           reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    IF              reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    PASS            reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    S64             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    S32             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    S16             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    S8              reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    U64             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    U32             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    U16             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    U8              reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    LPAR            reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    NOT             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    FROM            reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    DEF             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    BOOLEAN         reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    STRING          reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    INTEGER         reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    FLOAT           reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    HEX             reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    $end            reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)
    DEDENT          reduce using rule 17 (import_statement -> FROM NAME IMPORT module_list .)


state 90

    (20) chain_statement -> DEF NAME LPAR arglist . RPAR COLON NEWLINE block
    RPAR            shift and go to state 99


state 91

    (5) statement -> type COLON NAME ASSIGN expression .
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    NAME            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    RETURN          reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    WHILE           reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    IF              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    PASS            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S64             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S32             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S16             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S8              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U64             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U32             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U16             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U8              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    LPAR            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    NOT             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    FROM            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    DEF             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    BOOLEAN         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    STRING          reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    INTEGER         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    FLOAT           reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    HEX             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    $end            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    DEDENT          reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 92

    (6) statement -> type COLON NAME ASSIGN const .
    (29) expression -> const .
  ! reduce/reduce conflict for NEWLINE resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for NAME resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for RETURN resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for WHILE resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for IF resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for PASS resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for S64 resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for S32 resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for S16 resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for S8 resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for U64 resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for U32 resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for U16 resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for U8 resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for LPAR resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for NOT resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for FROM resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for DEF resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for STRING resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for INTEGER resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for FLOAT resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for HEX resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for $end resolved using rule 29 (expression -> const .)
  ! reduce/reduce conflict for DEDENT resolved using rule 29 (expression -> const .)
    OR              reduce using rule 29 (expression -> const .)
    AND             reduce using rule 29 (expression -> const .)
    NEQ             reduce using rule 29 (expression -> const .)
    EQ              reduce using rule 29 (expression -> const .)
    LT              reduce using rule 29 (expression -> const .)
    GT              reduce using rule 29 (expression -> const .)
    LTE             reduce using rule 29 (expression -> const .)
    GTE             reduce using rule 29 (expression -> const .)
    MOD             reduce using rule 29 (expression -> const .)
    DIV             reduce using rule 29 (expression -> const .)
    MULT            reduce using rule 29 (expression -> const .)
    MINUS           reduce using rule 29 (expression -> const .)
    PLUS            reduce using rule 29 (expression -> const .)
    NEWLINE         reduce using rule 29 (expression -> const .)
    NAME            reduce using rule 29 (expression -> const .)
    RETURN          reduce using rule 29 (expression -> const .)
    WHILE           reduce using rule 29 (expression -> const .)
    IF              reduce using rule 29 (expression -> const .)
    PASS            reduce using rule 29 (expression -> const .)
    S64             reduce using rule 29 (expression -> const .)
    S32             reduce using rule 29 (expression -> const .)
    S16             reduce using rule 29 (expression -> const .)
    S8              reduce using rule 29 (expression -> const .)
    U64             reduce using rule 29 (expression -> const .)
    U32             reduce using rule 29 (expression -> const .)
    U16             reduce using rule 29 (expression -> const .)
    U8              reduce using rule 29 (expression -> const .)
    LPAR            reduce using rule 29 (expression -> const .)
    NOT             reduce using rule 29 (expression -> const .)
    FROM            reduce using rule 29 (expression -> const .)
    DEF             reduce using rule 29 (expression -> const .)
    BOOLEAN         reduce using rule 29 (expression -> const .)
    STRING          reduce using rule 29 (expression -> const .)
    INTEGER         reduce using rule 29 (expression -> const .)
    FLOAT           reduce using rule 29 (expression -> const .)
    HEX             reduce using rule 29 (expression -> const .)
    $end            reduce using rule 29 (expression -> const .)
    DEDENT          reduce using rule 29 (expression -> const .)


state 93

    (51) arglist -> argument COMMA arglist .
    RPAR            reduce using rule 51 (arglist -> argument COMMA arglist .)


state 94

    (46) argument -> type COLON NAME .
    COMMA           reduce using rule 46 (argument -> type COLON NAME .)
    RPAR            reduce using rule 46 (argument -> type COLON NAME .)


state 95

    (9) statement -> WHILE expression COLON NEWLINE block .
    NEWLINE         reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    NAME            reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    RETURN          reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    IF              reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    PASS            reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    S64             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    S32             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    S16             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    S8              reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    U64             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    U32             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    U16             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    U8              reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    LPAR            reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    NOT             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    FROM            reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    DEF             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    BOOLEAN         reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    STRING          reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    INTEGER         reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    FLOAT           reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    HEX             reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)
    DEDENT          reduce using rule 9 (statement -> WHILE expression COLON NEWLINE block .)


state 96

    (21) block -> INDENT . block_statements DEDENT
    (22) block_statements -> . statement_full block_statements
    (23) block_statements -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . RETURN expression
    (9) statement -> . WHILE expression COLON NEWLINE block
    (10) statement -> . IF expression COLON NEWLINE block NEWLINE
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (12) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (13) statement -> . expression
    (14) statement -> . PASS
    (15) statement -> . import_statement
    (16) statement -> . chain_statement
    (52) type -> . S64
    (53) type -> . S32
    (54) type -> . S16
    (55) type -> . S8
    (56) type -> . U64
    (57) type -> . U32
    (58) type -> . U16
    (59) type -> . U8
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (17) import_statement -> . FROM NAME IMPORT module_list
    (20) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 5
    RETURN          shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    PASS            shift and go to state 11
    S64             shift and go to state 14
    S32             shift and go to state 15
    S16             shift and go to state 16
    S8              shift and go to state 17
    U64             shift and go to state 18
    U32             shift and go to state 19
    U16             shift and go to state 20
    U8              shift and go to state 21
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    FROM            shift and go to state 24
    DEF             shift and go to state 25
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    block_statements               shift and go to state 100
    statement_full                 shift and go to state 101
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    import_statement               shift and go to state 12
    chain_statement                shift and go to state 13

state 97

    (10) statement -> IF expression COLON NEWLINE block . NEWLINE
    (11) statement -> IF expression COLON NEWLINE block . NEWLINE else_statement
    (12) statement -> IF expression COLON NEWLINE block . NEWLINE elif_statement
    NEWLINE         shift and go to state 102


state 98

    (19) module_list -> NAME COMMA . module_list
    (18) module_list -> . NAME
    (19) module_list -> . NAME COMMA module_list
    NAME            shift and go to state 88

    module_list                    shift and go to state 103

state 99

    (20) chain_statement -> DEF NAME LPAR arglist RPAR . COLON NEWLINE block
    COLON           shift and go to state 104


state 100

    (21) block -> INDENT block_statements . DEDENT
    DEDENT          shift and go to state 105


state 101

    (22) block_statements -> statement_full . block_statements
    (23) block_statements -> statement_full .
    (22) block_statements -> . statement_full block_statements
    (23) block_statements -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . RETURN expression
    (9) statement -> . WHILE expression COLON NEWLINE block
    (10) statement -> . IF expression COLON NEWLINE block NEWLINE
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (12) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (13) statement -> . expression
    (14) statement -> . PASS
    (15) statement -> . import_statement
    (16) statement -> . chain_statement
    (52) type -> . S64
    (53) type -> . S32
    (54) type -> . S16
    (55) type -> . S8
    (56) type -> . U64
    (57) type -> . U32
    (58) type -> . U16
    (59) type -> . U8
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (17) import_statement -> . FROM NAME IMPORT module_list
    (20) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    DEDENT          reduce using rule 23 (block_statements -> statement_full .)
    NAME            shift and go to state 5
    RETURN          shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    PASS            shift and go to state 11
    S64             shift and go to state 14
    S32             shift and go to state 15
    S16             shift and go to state 16
    S8              shift and go to state 17
    U64             shift and go to state 18
    U32             shift and go to state 19
    U16             shift and go to state 20
    U8              shift and go to state 21
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    FROM            shift and go to state 24
    DEF             shift and go to state 25
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    statement_full                 shift and go to state 101
    block_statements               shift and go to state 106
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    import_statement               shift and go to state 12
    chain_statement                shift and go to state 13

state 102

    (10) statement -> IF expression COLON NEWLINE block NEWLINE .
    (11) statement -> IF expression COLON NEWLINE block NEWLINE . else_statement
    (12) statement -> IF expression COLON NEWLINE block NEWLINE . elif_statement
    (24) else_statement -> . ELSE COLON NEWLINE block
    (25) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE
    (26) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE else_statement
    (27) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE elif_statement
    NEWLINE         reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    NAME            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    RETURN          reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    WHILE           reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    IF              reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    PASS            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S64             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S32             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S16             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S8              reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U64             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U32             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U16             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U8              reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    LPAR            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    NOT             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    FROM            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    DEF             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    BOOLEAN         reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    STRING          reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    INTEGER         reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    FLOAT           reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    HEX             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    $end            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    DEDENT          reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    ELSE            shift and go to state 109
    ELIF            shift and go to state 110

    else_statement                 shift and go to state 107
    elif_statement                 shift and go to state 108

state 103

    (19) module_list -> NAME COMMA module_list .
    NEWLINE         reduce using rule 19 (module_list -> NAME COMMA module_list .)
    NAME            reduce using rule 19 (module_list -> NAME COMMA module_list .)
    RETURN          reduce using rule 19 (module_list -> NAME COMMA module_list .)
    WHILE           reduce using rule 19 (module_list -> NAME COMMA module_list .)
    IF              reduce using rule 19 (module_list -> NAME COMMA module_list .)
    PASS            reduce using rule 19 (module_list -> NAME COMMA module_list .)
    S64             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    S32             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    S16             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    S8              reduce using rule 19 (module_list -> NAME COMMA module_list .)
    U64             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    U32             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    U16             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    U8              reduce using rule 19 (module_list -> NAME COMMA module_list .)
    LPAR            reduce using rule 19 (module_list -> NAME COMMA module_list .)
    NOT             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    FROM            reduce using rule 19 (module_list -> NAME COMMA module_list .)
    DEF             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    BOOLEAN         reduce using rule 19 (module_list -> NAME COMMA module_list .)
    STRING          reduce using rule 19 (module_list -> NAME COMMA module_list .)
    INTEGER         reduce using rule 19 (module_list -> NAME COMMA module_list .)
    FLOAT           reduce using rule 19 (module_list -> NAME COMMA module_list .)
    HEX             reduce using rule 19 (module_list -> NAME COMMA module_list .)
    $end            reduce using rule 19 (module_list -> NAME COMMA module_list .)
    DEDENT          reduce using rule 19 (module_list -> NAME COMMA module_list .)


state 104

    (20) chain_statement -> DEF NAME LPAR arglist RPAR COLON . NEWLINE block
    NEWLINE         shift and go to state 111


state 105

    (21) block -> INDENT block_statements DEDENT .
    NEWLINE         reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    NAME            reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    RETURN          reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    WHILE           reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    IF              reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    PASS            reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    S64             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    S32             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    S16             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    S8              reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    U64             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    U32             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    U16             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    U8              reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    LPAR            reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    NOT             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    FROM            reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    DEF             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    BOOLEAN         reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    STRING          reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    INTEGER         reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    FLOAT           reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    HEX             reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    $end            reduce using rule 21 (block -> INDENT block_statements DEDENT .)
    DEDENT          reduce using rule 21 (block -> INDENT block_statements DEDENT .)


state 106

    (22) block_statements -> statement_full block_statements .
    DEDENT          reduce using rule 22 (block_statements -> statement_full block_statements .)


state 107

    (11) statement -> IF expression COLON NEWLINE block NEWLINE else_statement .
    NEWLINE         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    NAME            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    RETURN          reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    WHILE           reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    IF              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    PASS            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S64             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S32             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S16             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S8              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U64             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U32             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U16             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U8              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    LPAR            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    NOT             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    FROM            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    DEF             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    BOOLEAN         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    STRING          reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    INTEGER         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    FLOAT           reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    HEX             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    $end            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    DEDENT          reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)


state 108

    (12) statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .
    NEWLINE         reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    NAME            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    RETURN          reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    WHILE           reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    IF              reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    PASS            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S64             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S32             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S16             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S8              reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U64             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U32             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U16             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U8              reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    LPAR            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    NOT             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    FROM            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEF             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    BOOLEAN         reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    STRING          reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    INTEGER         reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    FLOAT           reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    HEX             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    $end            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEDENT          reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)


state 109

    (24) else_statement -> ELSE . COLON NEWLINE block
    COLON           shift and go to state 112


state 110

    (25) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE
    (26) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE else_statement
    (27) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE elif_statement
    (28) expression -> . NAME
    (29) expression -> . const
    (30) expression -> . LPAR expression RPAR
    (31) expression -> . NOT expression
    (32) expression -> . expression OR expression
    (33) expression -> . expression AND expression
    (34) expression -> . expression NEQ expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression LT expression
    (37) expression -> . expression GT expression
    (38) expression -> . expression LTE expression
    (39) expression -> . expression GTE expression
    (40) expression -> . expression MOD expression
    (41) expression -> . expression DIV expression
    (42) expression -> . expression MULT expression
    (43) expression -> . expression MINUS expression
    (44) expression -> . expression PLUS expression
    (45) expression -> . NAME LPAR arglist RPAR
    (60) const -> . BOOLEAN
    (61) const -> . STRING
    (62) const -> . INTEGER
    (63) const -> . FLOAT
    (64) const -> . HEX
    NAME            shift and go to state 50
    LPAR            shift and go to state 22
    NOT             shift and go to state 23
    BOOLEAN         shift and go to state 26
    STRING          shift and go to state 27
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    HEX             shift and go to state 30

    expression                     shift and go to state 113
    const                          shift and go to state 7

state 111

    (20) chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE . block
    (21) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 96

    block                          shift and go to state 114

state 112

    (24) else_statement -> ELSE COLON . NEWLINE block
    NEWLINE         shift and go to state 115


state 113

    (25) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE
    (26) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE else_statement
    (27) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE elif_statement
    (32) expression -> expression . OR expression
    (33) expression -> expression . AND expression
    (34) expression -> expression . NEQ expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . LT expression
    (37) expression -> expression . GT expression
    (38) expression -> expression . LTE expression
    (39) expression -> expression . GTE expression
    (40) expression -> expression . MOD expression
    (41) expression -> expression . DIV expression
    (42) expression -> expression . MULT expression
    (43) expression -> expression . MINUS expression
    (44) expression -> expression . PLUS expression
    COLON           shift and go to state 116
    OR              shift and go to state 36
    AND             shift and go to state 37
    NEQ             shift and go to state 38
    EQ              shift and go to state 39
    LT              shift and go to state 40
    GT              shift and go to state 41
    LTE             shift and go to state 42
    GTE             shift and go to state 43
    MOD             shift and go to state 44
    DIV             shift and go to state 45
    MULT            shift and go to state 46
    MINUS           shift and go to state 47
    PLUS            shift and go to state 48


state 114

    (20) chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .
    NEWLINE         reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    NAME            reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    RETURN          reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    WHILE           reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    IF              reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    PASS            reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S64             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S32             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S16             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S8              reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U64             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U32             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U16             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U8              reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    LPAR            reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    NOT             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    FROM            reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    DEF             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    BOOLEAN         reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    STRING          reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    INTEGER         reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    FLOAT           reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    HEX             reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    $end            reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    DEDENT          reduce using rule 20 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)


state 115

    (24) else_statement -> ELSE COLON NEWLINE . block
    (21) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 96

    block                          shift and go to state 117

state 116

    (25) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE
    (26) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE else_statement
    (27) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE elif_statement
    NEWLINE         shift and go to state 118


state 117

    (24) else_statement -> ELSE COLON NEWLINE block .
    NEWLINE         reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    NAME            reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    RETURN          reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    IF              reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    PASS            reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    S64             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    S32             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    S16             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    S8              reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    U64             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    U32             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    U16             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    U8              reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    LPAR            reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    NOT             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    FROM            reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    DEF             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    BOOLEAN         reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    STRING          reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    INTEGER         reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    FLOAT           reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    HEX             reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    $end            reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)
    DEDENT          reduce using rule 24 (else_statement -> ELSE COLON NEWLINE block .)


state 118

    (25) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE
    (26) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE else_statement
    (27) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE elif_statement
    (21) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 96

    block                          shift and go to state 119

state 119

    (25) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE
    (26) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE else_statement
    (27) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE elif_statement
    NEWLINE         shift and go to state 120


state 120

    (25) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .
    (26) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE . else_statement
    (27) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE . elif_statement
    (24) else_statement -> . ELSE COLON NEWLINE block
    (25) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE
    (26) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE else_statement
    (27) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE elif_statement
    NEWLINE         reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    NAME            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    RETURN          reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    WHILE           reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    IF              reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    PASS            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S64             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S32             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S16             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S8              reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U64             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U32             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U16             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U8              reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    LPAR            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    NOT             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    FROM            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    DEF             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    BOOLEAN         reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    STRING          reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    INTEGER         reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    FLOAT           reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    HEX             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    $end            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    DEDENT          reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    ELSE            shift and go to state 109
    ELIF            shift and go to state 110

    else_statement                 shift and go to state 121
    elif_statement                 shift and go to state 122

state 121

    (26) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .
    NEWLINE         reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    NAME            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    RETURN          reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    WHILE           reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    IF              reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    PASS            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S64             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S32             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S16             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S8              reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U64             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U32             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U16             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U8              reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    LPAR            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    NOT             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    FROM            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    DEF             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    BOOLEAN         reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    STRING          reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    INTEGER         reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    FLOAT           reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    HEX             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    $end            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    DEDENT          reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)


state 122

    (27) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .
    NEWLINE         reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    NAME            reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    RETURN          reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    WHILE           reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    IF              reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    PASS            reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S64             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S32             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S16             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S8              reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U64             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U32             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U16             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U8              reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    LPAR            reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    NOT             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    FROM            reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEF             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    BOOLEAN         reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    STRING          reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    INTEGER         reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    FLOAT           reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    HEX             reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    $end            reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEDENT          reduce using rule 27 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)


Conflicts:

shift/reduce conflict for LPAR in state 5 resolved as shift
shift/reduce conflict for LPAR in state 50 resolved as shift
shift/reduce conflict for OR in state 54 resolved as shift
shift/reduce conflict for AND in state 54 resolved as shift
shift/reduce conflict for NEQ in state 54 resolved as shift
shift/reduce conflict for EQ in state 54 resolved as shift
shift/reduce conflict for LT in state 54 resolved as shift
shift/reduce conflict for GT in state 54 resolved as shift
shift/reduce conflict for LTE in state 54 resolved as shift
shift/reduce conflict for GTE in state 54 resolved as shift
shift/reduce conflict for MOD in state 54 resolved as shift
shift/reduce conflict for DIV in state 54 resolved as shift
shift/reduce conflict for MULT in state 54 resolved as shift
shift/reduce conflict for MINUS in state 54 resolved as shift
shift/reduce conflict for PLUS in state 54 resolved as shift
shift/reduce conflict for OR in state 64 resolved as shift
shift/reduce conflict for AND in state 64 resolved as shift
shift/reduce conflict for NEQ in state 64 resolved as shift
shift/reduce conflict for EQ in state 64 resolved as shift
shift/reduce conflict for LT in state 64 resolved as shift
shift/reduce conflict for GT in state 64 resolved as shift
shift/reduce conflict for LTE in state 64 resolved as shift
shift/reduce conflict for GTE in state 64 resolved as shift
shift/reduce conflict for MOD in state 64 resolved as shift
shift/reduce conflict for DIV in state 64 resolved as shift
shift/reduce conflict for MULT in state 64 resolved as shift
shift/reduce conflict for MINUS in state 64 resolved as shift
shift/reduce conflict for PLUS in state 64 resolved as shift
shift/reduce conflict for OR in state 65 resolved as shift
shift/reduce conflict for AND in state 65 resolved as shift
shift/reduce conflict for NEQ in state 65 resolved as shift
shift/reduce conflict for EQ in state 65 resolved as shift
shift/reduce conflict for LT in state 65 resolved as shift
shift/reduce conflict for GT in state 65 resolved as shift
shift/reduce conflict for LTE in state 65 resolved as shift
shift/reduce conflict for GTE in state 65 resolved as shift
shift/reduce conflict for MOD in state 65 resolved as shift
shift/reduce conflict for DIV in state 65 resolved as shift
shift/reduce conflict for MULT in state 65 resolved as shift
shift/reduce conflict for MINUS in state 65 resolved as shift
shift/reduce conflict for PLUS in state 65 resolved as shift
shift/reduce conflict for OR in state 72 resolved as shift
shift/reduce conflict for AND in state 72 resolved as shift
shift/reduce conflict for NEQ in state 72 resolved as shift
shift/reduce conflict for EQ in state 72 resolved as shift
shift/reduce conflict for LT in state 72 resolved as shift
shift/reduce conflict for GT in state 72 resolved as shift
shift/reduce conflict for LTE in state 72 resolved as shift
shift/reduce conflict for GTE in state 72 resolved as shift
shift/reduce conflict for MOD in state 72 resolved as shift
shift/reduce conflict for DIV in state 72 resolved as shift
shift/reduce conflict for MULT in state 72 resolved as shift
shift/reduce conflict for MINUS in state 72 resolved as shift
shift/reduce conflict for PLUS in state 72 resolved as shift
reduce/reduce conflict in state 92 resolved using rule expression -> const
rejected rule (statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]) in state 92
Rule (statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]) is never reduced