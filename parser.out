Grammar:

Rule 0     S' -> program
Rule 1     program -> statement_full program
Rule 2     program -> statement_full
Rule 3     statement_full -> statement
Rule 4     statement_full -> statement NEWLINE  [precedence=left, level=3]
Rule 5     statement -> type COLON NAME ASSIGN expression  [precedence=left, level=2]
Rule 6     statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]
Rule 7     statement -> NAME ASSIGN expression  [precedence=left, level=2]
Rule 8     statement -> WHILE expression COLON NEWLINE block  [precedence=left, level=3]
Rule 9     statement -> IF expression COLON NEWLINE block NEWLINE  [precedence=left, level=3]
Rule 10    statement -> IF expression COLON NEWLINE block NEWLINE else_statement  [precedence=left, level=3]
Rule 11    statement -> IF expression COLON NEWLINE block NEWLINE elif_statement  [precedence=left, level=3]
Rule 12    statement -> expression
Rule 13    statement -> PASS
Rule 14    statement -> import_statement
Rule 15    statement -> chain_statement
Rule 16    import_statement -> FROM NAME IMPORT module_list
Rule 17    module_list -> NAME
Rule 18    module_list -> NAME COMMA module_list
Rule 19    chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block  [precedence=left, level=3]
Rule 20    block -> INDENT block_statements DEDENT
Rule 21    block_statements -> statement_full block_statements
Rule 22    block_statements -> statement_full
Rule 23    else_statement -> ELSE COLON NEWLINE block  [precedence=left, level=3]
Rule 24    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE  [precedence=left, level=3]
Rule 25    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement  [precedence=left, level=3]
Rule 26    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement  [precedence=left, level=3]
Rule 27    expression -> NAME
Rule 28    expression -> const
Rule 29    expression -> LPAR expression RPAR
Rule 30    expression -> expression EQ expression  [precedence=left, level=4]
Rule 31    expression -> expression LT expression  [precedence=left, level=4]
Rule 32    expression -> expression GT expression  [precedence=left, level=4]
Rule 33    expression -> expression LTE expression  [precedence=left, level=4]
Rule 34    expression -> expression GTE expression  [precedence=left, level=4]
Rule 35    expression -> expression DIV expression  [precedence=left, level=6]
Rule 36    expression -> expression MULT expression  [precedence=left, level=6]
Rule 37    expression -> expression MINUS expression  [precedence=left, level=5]
Rule 38    expression -> expression PLUS expression  [precedence=left, level=5]
Rule 39    expression -> NAME LPAR arglist RPAR
Rule 40    argument -> type COLON NAME
Rule 41    argument -> const
Rule 42    argument -> NAME
Rule 43    arglist -> <empty>
Rule 44    arglist -> argument
Rule 45    arglist -> argument COMMA arglist
Rule 46    type -> S64
Rule 47    type -> S32
Rule 48    type -> S16
Rule 49    type -> S8
Rule 50    type -> U64
Rule 51    type -> U32
Rule 52    type -> U16
Rule 53    type -> U8
Rule 54    const -> BOOLEAN
Rule 55    const -> STRING
Rule 56    const -> INTEGER
Rule 57    const -> FLOAT
Rule 58    const -> HEX

Unused terminals:

    NEQ
    RETURN
    END

Terminals, with rules where they appear:

ASSIGN               : 5 6 7
BOOLEAN              : 54
COLON                : 5 6 8 9 10 11 19 23 24 25 26 40
COMMA                : 18 45
DEDENT               : 20
DEF                  : 19
DIV                  : 35
ELIF                 : 24 25 26
ELSE                 : 23
END                  : 
EQ                   : 30
FLOAT                : 57
FROM                 : 16
GT                   : 32
GTE                  : 34
HEX                  : 58
IF                   : 9 10 11
IMPORT               : 16
INDENT               : 20
INTEGER              : 56
LPAR                 : 19 29 39
LT                   : 31
LTE                  : 33
MINUS                : 37
MULT                 : 36
NAME                 : 5 6 7 16 17 18 19 27 39 40 42
NEQ                  : 
NEWLINE              : 4 8 9 9 10 10 11 11 19 23 24 24 25 25 26 26
PASS                 : 13
PLUS                 : 38
RETURN               : 
RPAR                 : 19 29 39
S16                  : 48
S32                  : 47
S64                  : 46
S8                   : 49
STRING               : 55
U16                  : 52
U32                  : 51
U64                  : 50
U8                   : 53
WHILE                : 8
error                : 

Nonterminals, with rules where they appear:

arglist              : 19 39 45
argument             : 44 45
block                : 8 9 10 11 19 23 24 25 26
block_statements     : 20 21
chain_statement      : 15
const                : 6 28 41
elif_statement       : 11 26
else_statement       : 10 25
expression           : 5 7 8 9 10 11 12 24 25 26 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38
import_statement     : 14
module_list          : 16 18
program              : 1 0
statement            : 3 4
statement_full       : 1 2 21 22
type                 : 5 6 40


state 0

    (0) S' -> . program
    (1) program -> . statement_full program
    (2) program -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . WHILE expression COLON NEWLINE block
    (9) statement -> . IF expression COLON NEWLINE block NEWLINE
    (10) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (12) statement -> . expression
    (13) statement -> . PASS
    (14) statement -> . import_statement
    (15) statement -> . chain_statement
    (46) type -> . S64
    (47) type -> . S32
    (48) type -> . S16
    (49) type -> . S8
    (50) type -> . U64
    (51) type -> . U32
    (52) type -> . U16
    (53) type -> . U8
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (16) import_statement -> . FROM NAME IMPORT module_list
    (19) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 5
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    PASS            shift and go to state 10
    S64             shift and go to state 13
    S32             shift and go to state 14
    S16             shift and go to state 15
    S8              shift and go to state 16
    U64             shift and go to state 17
    U32             shift and go to state 18
    U16             shift and go to state 19
    U8              shift and go to state 20
    LPAR            shift and go to state 21
    FROM            shift and go to state 22
    DEF             shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    program                        shift and go to state 1
    statement_full                 shift and go to state 2
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    import_statement               shift and go to state 11
    chain_statement                shift and go to state 12

state 1

    (0) S' -> program .


state 2

    (1) program -> statement_full . program
    (2) program -> statement_full .
    (1) program -> . statement_full program
    (2) program -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . WHILE expression COLON NEWLINE block
    (9) statement -> . IF expression COLON NEWLINE block NEWLINE
    (10) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (12) statement -> . expression
    (13) statement -> . PASS
    (14) statement -> . import_statement
    (15) statement -> . chain_statement
    (46) type -> . S64
    (47) type -> . S32
    (48) type -> . S16
    (49) type -> . S8
    (50) type -> . U64
    (51) type -> . U32
    (52) type -> . U16
    (53) type -> . U8
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (16) import_statement -> . FROM NAME IMPORT module_list
    (19) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    $end            reduce using rule 2 (program -> statement_full .)
    NAME            shift and go to state 5
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    PASS            shift and go to state 10
    S64             shift and go to state 13
    S32             shift and go to state 14
    S16             shift and go to state 15
    S8              shift and go to state 16
    U64             shift and go to state 17
    U32             shift and go to state 18
    U16             shift and go to state 19
    U8              shift and go to state 20
    LPAR            shift and go to state 21
    FROM            shift and go to state 22
    DEF             shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    statement_full                 shift and go to state 2
    program                        shift and go to state 29
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    import_statement               shift and go to state 11
    chain_statement                shift and go to state 12

state 3

    (3) statement_full -> statement .
    (4) statement_full -> statement . NEWLINE
    NAME            reduce using rule 3 (statement_full -> statement .)
    WHILE           reduce using rule 3 (statement_full -> statement .)
    IF              reduce using rule 3 (statement_full -> statement .)
    PASS            reduce using rule 3 (statement_full -> statement .)
    S64             reduce using rule 3 (statement_full -> statement .)
    S32             reduce using rule 3 (statement_full -> statement .)
    S16             reduce using rule 3 (statement_full -> statement .)
    S8              reduce using rule 3 (statement_full -> statement .)
    U64             reduce using rule 3 (statement_full -> statement .)
    U32             reduce using rule 3 (statement_full -> statement .)
    U16             reduce using rule 3 (statement_full -> statement .)
    U8              reduce using rule 3 (statement_full -> statement .)
    LPAR            reduce using rule 3 (statement_full -> statement .)
    FROM            reduce using rule 3 (statement_full -> statement .)
    DEF             reduce using rule 3 (statement_full -> statement .)
    BOOLEAN         reduce using rule 3 (statement_full -> statement .)
    STRING          reduce using rule 3 (statement_full -> statement .)
    INTEGER         reduce using rule 3 (statement_full -> statement .)
    FLOAT           reduce using rule 3 (statement_full -> statement .)
    HEX             reduce using rule 3 (statement_full -> statement .)
    $end            reduce using rule 3 (statement_full -> statement .)
    DEDENT          reduce using rule 3 (statement_full -> statement .)
    NEWLINE         shift and go to state 30


state 4

    (5) statement -> type . COLON NAME ASSIGN expression
    (6) statement -> type . COLON NAME ASSIGN const
    COLON           shift and go to state 31


state 5

    (7) statement -> NAME . ASSIGN expression
    (27) expression -> NAME .
    (39) expression -> NAME . LPAR arglist RPAR
  ! shift/reduce conflict for LPAR resolved as shift
    ASSIGN          shift and go to state 32
    EQ              reduce using rule 27 (expression -> NAME .)
    LT              reduce using rule 27 (expression -> NAME .)
    GT              reduce using rule 27 (expression -> NAME .)
    LTE             reduce using rule 27 (expression -> NAME .)
    GTE             reduce using rule 27 (expression -> NAME .)
    DIV             reduce using rule 27 (expression -> NAME .)
    MULT            reduce using rule 27 (expression -> NAME .)
    MINUS           reduce using rule 27 (expression -> NAME .)
    PLUS            reduce using rule 27 (expression -> NAME .)
    NEWLINE         reduce using rule 27 (expression -> NAME .)
    NAME            reduce using rule 27 (expression -> NAME .)
    WHILE           reduce using rule 27 (expression -> NAME .)
    IF              reduce using rule 27 (expression -> NAME .)
    PASS            reduce using rule 27 (expression -> NAME .)
    S64             reduce using rule 27 (expression -> NAME .)
    S32             reduce using rule 27 (expression -> NAME .)
    S16             reduce using rule 27 (expression -> NAME .)
    S8              reduce using rule 27 (expression -> NAME .)
    U64             reduce using rule 27 (expression -> NAME .)
    U32             reduce using rule 27 (expression -> NAME .)
    U16             reduce using rule 27 (expression -> NAME .)
    U8              reduce using rule 27 (expression -> NAME .)
    FROM            reduce using rule 27 (expression -> NAME .)
    DEF             reduce using rule 27 (expression -> NAME .)
    BOOLEAN         reduce using rule 27 (expression -> NAME .)
    STRING          reduce using rule 27 (expression -> NAME .)
    INTEGER         reduce using rule 27 (expression -> NAME .)
    FLOAT           reduce using rule 27 (expression -> NAME .)
    HEX             reduce using rule 27 (expression -> NAME .)
    $end            reduce using rule 27 (expression -> NAME .)
    DEDENT          reduce using rule 27 (expression -> NAME .)
    LPAR            shift and go to state 33


state 6

    (12) statement -> expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 12 (statement -> expression .)
    NAME            reduce using rule 12 (statement -> expression .)
    WHILE           reduce using rule 12 (statement -> expression .)
    IF              reduce using rule 12 (statement -> expression .)
    PASS            reduce using rule 12 (statement -> expression .)
    S64             reduce using rule 12 (statement -> expression .)
    S32             reduce using rule 12 (statement -> expression .)
    S16             reduce using rule 12 (statement -> expression .)
    S8              reduce using rule 12 (statement -> expression .)
    U64             reduce using rule 12 (statement -> expression .)
    U32             reduce using rule 12 (statement -> expression .)
    U16             reduce using rule 12 (statement -> expression .)
    U8              reduce using rule 12 (statement -> expression .)
    LPAR            reduce using rule 12 (statement -> expression .)
    FROM            reduce using rule 12 (statement -> expression .)
    DEF             reduce using rule 12 (statement -> expression .)
    BOOLEAN         reduce using rule 12 (statement -> expression .)
    STRING          reduce using rule 12 (statement -> expression .)
    INTEGER         reduce using rule 12 (statement -> expression .)
    FLOAT           reduce using rule 12 (statement -> expression .)
    HEX             reduce using rule 12 (statement -> expression .)
    $end            reduce using rule 12 (statement -> expression .)
    DEDENT          reduce using rule 12 (statement -> expression .)
    EQ              shift and go to state 34
    LT              shift and go to state 35
    GT              shift and go to state 36
    LTE             shift and go to state 37
    GTE             shift and go to state 38
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 7

    (28) expression -> const .
    EQ              reduce using rule 28 (expression -> const .)
    LT              reduce using rule 28 (expression -> const .)
    GT              reduce using rule 28 (expression -> const .)
    LTE             reduce using rule 28 (expression -> const .)
    GTE             reduce using rule 28 (expression -> const .)
    DIV             reduce using rule 28 (expression -> const .)
    MULT            reduce using rule 28 (expression -> const .)
    MINUS           reduce using rule 28 (expression -> const .)
    PLUS            reduce using rule 28 (expression -> const .)
    NEWLINE         reduce using rule 28 (expression -> const .)
    NAME            reduce using rule 28 (expression -> const .)
    WHILE           reduce using rule 28 (expression -> const .)
    IF              reduce using rule 28 (expression -> const .)
    PASS            reduce using rule 28 (expression -> const .)
    S64             reduce using rule 28 (expression -> const .)
    S32             reduce using rule 28 (expression -> const .)
    S16             reduce using rule 28 (expression -> const .)
    S8              reduce using rule 28 (expression -> const .)
    U64             reduce using rule 28 (expression -> const .)
    U32             reduce using rule 28 (expression -> const .)
    U16             reduce using rule 28 (expression -> const .)
    U8              reduce using rule 28 (expression -> const .)
    LPAR            reduce using rule 28 (expression -> const .)
    FROM            reduce using rule 28 (expression -> const .)
    DEF             reduce using rule 28 (expression -> const .)
    BOOLEAN         reduce using rule 28 (expression -> const .)
    STRING          reduce using rule 28 (expression -> const .)
    INTEGER         reduce using rule 28 (expression -> const .)
    FLOAT           reduce using rule 28 (expression -> const .)
    HEX             reduce using rule 28 (expression -> const .)
    $end            reduce using rule 28 (expression -> const .)
    COLON           reduce using rule 28 (expression -> const .)
    RPAR            reduce using rule 28 (expression -> const .)
    DEDENT          reduce using rule 28 (expression -> const .)


state 8

    (8) statement -> WHILE . expression COLON NEWLINE block
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 43
    const                          shift and go to state 7

state 9

    (9) statement -> IF . expression COLON NEWLINE block NEWLINE
    (10) statement -> IF . expression COLON NEWLINE block NEWLINE else_statement
    (11) statement -> IF . expression COLON NEWLINE block NEWLINE elif_statement
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 45
    const                          shift and go to state 7

state 10

    (13) statement -> PASS .
    NEWLINE         reduce using rule 13 (statement -> PASS .)
    NAME            reduce using rule 13 (statement -> PASS .)
    WHILE           reduce using rule 13 (statement -> PASS .)
    IF              reduce using rule 13 (statement -> PASS .)
    PASS            reduce using rule 13 (statement -> PASS .)
    S64             reduce using rule 13 (statement -> PASS .)
    S32             reduce using rule 13 (statement -> PASS .)
    S16             reduce using rule 13 (statement -> PASS .)
    S8              reduce using rule 13 (statement -> PASS .)
    U64             reduce using rule 13 (statement -> PASS .)
    U32             reduce using rule 13 (statement -> PASS .)
    U16             reduce using rule 13 (statement -> PASS .)
    U8              reduce using rule 13 (statement -> PASS .)
    LPAR            reduce using rule 13 (statement -> PASS .)
    FROM            reduce using rule 13 (statement -> PASS .)
    DEF             reduce using rule 13 (statement -> PASS .)
    BOOLEAN         reduce using rule 13 (statement -> PASS .)
    STRING          reduce using rule 13 (statement -> PASS .)
    INTEGER         reduce using rule 13 (statement -> PASS .)
    FLOAT           reduce using rule 13 (statement -> PASS .)
    HEX             reduce using rule 13 (statement -> PASS .)
    $end            reduce using rule 13 (statement -> PASS .)
    DEDENT          reduce using rule 13 (statement -> PASS .)


state 11

    (14) statement -> import_statement .
    NEWLINE         reduce using rule 14 (statement -> import_statement .)
    NAME            reduce using rule 14 (statement -> import_statement .)
    WHILE           reduce using rule 14 (statement -> import_statement .)
    IF              reduce using rule 14 (statement -> import_statement .)
    PASS            reduce using rule 14 (statement -> import_statement .)
    S64             reduce using rule 14 (statement -> import_statement .)
    S32             reduce using rule 14 (statement -> import_statement .)
    S16             reduce using rule 14 (statement -> import_statement .)
    S8              reduce using rule 14 (statement -> import_statement .)
    U64             reduce using rule 14 (statement -> import_statement .)
    U32             reduce using rule 14 (statement -> import_statement .)
    U16             reduce using rule 14 (statement -> import_statement .)
    U8              reduce using rule 14 (statement -> import_statement .)
    LPAR            reduce using rule 14 (statement -> import_statement .)
    FROM            reduce using rule 14 (statement -> import_statement .)
    DEF             reduce using rule 14 (statement -> import_statement .)
    BOOLEAN         reduce using rule 14 (statement -> import_statement .)
    STRING          reduce using rule 14 (statement -> import_statement .)
    INTEGER         reduce using rule 14 (statement -> import_statement .)
    FLOAT           reduce using rule 14 (statement -> import_statement .)
    HEX             reduce using rule 14 (statement -> import_statement .)
    $end            reduce using rule 14 (statement -> import_statement .)
    DEDENT          reduce using rule 14 (statement -> import_statement .)


state 12

    (15) statement -> chain_statement .
    NEWLINE         reduce using rule 15 (statement -> chain_statement .)
    NAME            reduce using rule 15 (statement -> chain_statement .)
    WHILE           reduce using rule 15 (statement -> chain_statement .)
    IF              reduce using rule 15 (statement -> chain_statement .)
    PASS            reduce using rule 15 (statement -> chain_statement .)
    S64             reduce using rule 15 (statement -> chain_statement .)
    S32             reduce using rule 15 (statement -> chain_statement .)
    S16             reduce using rule 15 (statement -> chain_statement .)
    S8              reduce using rule 15 (statement -> chain_statement .)
    U64             reduce using rule 15 (statement -> chain_statement .)
    U32             reduce using rule 15 (statement -> chain_statement .)
    U16             reduce using rule 15 (statement -> chain_statement .)
    U8              reduce using rule 15 (statement -> chain_statement .)
    LPAR            reduce using rule 15 (statement -> chain_statement .)
    FROM            reduce using rule 15 (statement -> chain_statement .)
    DEF             reduce using rule 15 (statement -> chain_statement .)
    BOOLEAN         reduce using rule 15 (statement -> chain_statement .)
    STRING          reduce using rule 15 (statement -> chain_statement .)
    INTEGER         reduce using rule 15 (statement -> chain_statement .)
    FLOAT           reduce using rule 15 (statement -> chain_statement .)
    HEX             reduce using rule 15 (statement -> chain_statement .)
    $end            reduce using rule 15 (statement -> chain_statement .)
    DEDENT          reduce using rule 15 (statement -> chain_statement .)


state 13

    (46) type -> S64 .
    COLON           reduce using rule 46 (type -> S64 .)


state 14

    (47) type -> S32 .
    COLON           reduce using rule 47 (type -> S32 .)


state 15

    (48) type -> S16 .
    COLON           reduce using rule 48 (type -> S16 .)


state 16

    (49) type -> S8 .
    COLON           reduce using rule 49 (type -> S8 .)


state 17

    (50) type -> U64 .
    COLON           reduce using rule 50 (type -> U64 .)


state 18

    (51) type -> U32 .
    COLON           reduce using rule 51 (type -> U32 .)


state 19

    (52) type -> U16 .
    COLON           reduce using rule 52 (type -> U16 .)


state 20

    (53) type -> U8 .
    COLON           reduce using rule 53 (type -> U8 .)


state 21

    (29) expression -> LPAR . expression RPAR
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 46
    const                          shift and go to state 7

state 22

    (16) import_statement -> FROM . NAME IMPORT module_list
    NAME            shift and go to state 47


state 23

    (19) chain_statement -> DEF . NAME LPAR arglist RPAR COLON NEWLINE block
    NAME            shift and go to state 48


state 24

    (54) const -> BOOLEAN .
    EQ              reduce using rule 54 (const -> BOOLEAN .)
    LT              reduce using rule 54 (const -> BOOLEAN .)
    GT              reduce using rule 54 (const -> BOOLEAN .)
    LTE             reduce using rule 54 (const -> BOOLEAN .)
    GTE             reduce using rule 54 (const -> BOOLEAN .)
    DIV             reduce using rule 54 (const -> BOOLEAN .)
    MULT            reduce using rule 54 (const -> BOOLEAN .)
    MINUS           reduce using rule 54 (const -> BOOLEAN .)
    PLUS            reduce using rule 54 (const -> BOOLEAN .)
    NEWLINE         reduce using rule 54 (const -> BOOLEAN .)
    NAME            reduce using rule 54 (const -> BOOLEAN .)
    WHILE           reduce using rule 54 (const -> BOOLEAN .)
    IF              reduce using rule 54 (const -> BOOLEAN .)
    PASS            reduce using rule 54 (const -> BOOLEAN .)
    S64             reduce using rule 54 (const -> BOOLEAN .)
    S32             reduce using rule 54 (const -> BOOLEAN .)
    S16             reduce using rule 54 (const -> BOOLEAN .)
    S8              reduce using rule 54 (const -> BOOLEAN .)
    U64             reduce using rule 54 (const -> BOOLEAN .)
    U32             reduce using rule 54 (const -> BOOLEAN .)
    U16             reduce using rule 54 (const -> BOOLEAN .)
    U8              reduce using rule 54 (const -> BOOLEAN .)
    LPAR            reduce using rule 54 (const -> BOOLEAN .)
    FROM            reduce using rule 54 (const -> BOOLEAN .)
    DEF             reduce using rule 54 (const -> BOOLEAN .)
    BOOLEAN         reduce using rule 54 (const -> BOOLEAN .)
    STRING          reduce using rule 54 (const -> BOOLEAN .)
    INTEGER         reduce using rule 54 (const -> BOOLEAN .)
    FLOAT           reduce using rule 54 (const -> BOOLEAN .)
    HEX             reduce using rule 54 (const -> BOOLEAN .)
    $end            reduce using rule 54 (const -> BOOLEAN .)
    COLON           reduce using rule 54 (const -> BOOLEAN .)
    RPAR            reduce using rule 54 (const -> BOOLEAN .)
    DEDENT          reduce using rule 54 (const -> BOOLEAN .)
    COMMA           reduce using rule 54 (const -> BOOLEAN .)


state 25

    (55) const -> STRING .
    EQ              reduce using rule 55 (const -> STRING .)
    LT              reduce using rule 55 (const -> STRING .)
    GT              reduce using rule 55 (const -> STRING .)
    LTE             reduce using rule 55 (const -> STRING .)
    GTE             reduce using rule 55 (const -> STRING .)
    DIV             reduce using rule 55 (const -> STRING .)
    MULT            reduce using rule 55 (const -> STRING .)
    MINUS           reduce using rule 55 (const -> STRING .)
    PLUS            reduce using rule 55 (const -> STRING .)
    NEWLINE         reduce using rule 55 (const -> STRING .)
    NAME            reduce using rule 55 (const -> STRING .)
    WHILE           reduce using rule 55 (const -> STRING .)
    IF              reduce using rule 55 (const -> STRING .)
    PASS            reduce using rule 55 (const -> STRING .)
    S64             reduce using rule 55 (const -> STRING .)
    S32             reduce using rule 55 (const -> STRING .)
    S16             reduce using rule 55 (const -> STRING .)
    S8              reduce using rule 55 (const -> STRING .)
    U64             reduce using rule 55 (const -> STRING .)
    U32             reduce using rule 55 (const -> STRING .)
    U16             reduce using rule 55 (const -> STRING .)
    U8              reduce using rule 55 (const -> STRING .)
    LPAR            reduce using rule 55 (const -> STRING .)
    FROM            reduce using rule 55 (const -> STRING .)
    DEF             reduce using rule 55 (const -> STRING .)
    BOOLEAN         reduce using rule 55 (const -> STRING .)
    STRING          reduce using rule 55 (const -> STRING .)
    INTEGER         reduce using rule 55 (const -> STRING .)
    FLOAT           reduce using rule 55 (const -> STRING .)
    HEX             reduce using rule 55 (const -> STRING .)
    $end            reduce using rule 55 (const -> STRING .)
    COLON           reduce using rule 55 (const -> STRING .)
    RPAR            reduce using rule 55 (const -> STRING .)
    DEDENT          reduce using rule 55 (const -> STRING .)
    COMMA           reduce using rule 55 (const -> STRING .)


state 26

    (56) const -> INTEGER .
    EQ              reduce using rule 56 (const -> INTEGER .)
    LT              reduce using rule 56 (const -> INTEGER .)
    GT              reduce using rule 56 (const -> INTEGER .)
    LTE             reduce using rule 56 (const -> INTEGER .)
    GTE             reduce using rule 56 (const -> INTEGER .)
    DIV             reduce using rule 56 (const -> INTEGER .)
    MULT            reduce using rule 56 (const -> INTEGER .)
    MINUS           reduce using rule 56 (const -> INTEGER .)
    PLUS            reduce using rule 56 (const -> INTEGER .)
    NEWLINE         reduce using rule 56 (const -> INTEGER .)
    NAME            reduce using rule 56 (const -> INTEGER .)
    WHILE           reduce using rule 56 (const -> INTEGER .)
    IF              reduce using rule 56 (const -> INTEGER .)
    PASS            reduce using rule 56 (const -> INTEGER .)
    S64             reduce using rule 56 (const -> INTEGER .)
    S32             reduce using rule 56 (const -> INTEGER .)
    S16             reduce using rule 56 (const -> INTEGER .)
    S8              reduce using rule 56 (const -> INTEGER .)
    U64             reduce using rule 56 (const -> INTEGER .)
    U32             reduce using rule 56 (const -> INTEGER .)
    U16             reduce using rule 56 (const -> INTEGER .)
    U8              reduce using rule 56 (const -> INTEGER .)
    LPAR            reduce using rule 56 (const -> INTEGER .)
    FROM            reduce using rule 56 (const -> INTEGER .)
    DEF             reduce using rule 56 (const -> INTEGER .)
    BOOLEAN         reduce using rule 56 (const -> INTEGER .)
    STRING          reduce using rule 56 (const -> INTEGER .)
    INTEGER         reduce using rule 56 (const -> INTEGER .)
    FLOAT           reduce using rule 56 (const -> INTEGER .)
    HEX             reduce using rule 56 (const -> INTEGER .)
    $end            reduce using rule 56 (const -> INTEGER .)
    COLON           reduce using rule 56 (const -> INTEGER .)
    RPAR            reduce using rule 56 (const -> INTEGER .)
    DEDENT          reduce using rule 56 (const -> INTEGER .)
    COMMA           reduce using rule 56 (const -> INTEGER .)


state 27

    (57) const -> FLOAT .
    EQ              reduce using rule 57 (const -> FLOAT .)
    LT              reduce using rule 57 (const -> FLOAT .)
    GT              reduce using rule 57 (const -> FLOAT .)
    LTE             reduce using rule 57 (const -> FLOAT .)
    GTE             reduce using rule 57 (const -> FLOAT .)
    DIV             reduce using rule 57 (const -> FLOAT .)
    MULT            reduce using rule 57 (const -> FLOAT .)
    MINUS           reduce using rule 57 (const -> FLOAT .)
    PLUS            reduce using rule 57 (const -> FLOAT .)
    NEWLINE         reduce using rule 57 (const -> FLOAT .)
    NAME            reduce using rule 57 (const -> FLOAT .)
    WHILE           reduce using rule 57 (const -> FLOAT .)
    IF              reduce using rule 57 (const -> FLOAT .)
    PASS            reduce using rule 57 (const -> FLOAT .)
    S64             reduce using rule 57 (const -> FLOAT .)
    S32             reduce using rule 57 (const -> FLOAT .)
    S16             reduce using rule 57 (const -> FLOAT .)
    S8              reduce using rule 57 (const -> FLOAT .)
    U64             reduce using rule 57 (const -> FLOAT .)
    U32             reduce using rule 57 (const -> FLOAT .)
    U16             reduce using rule 57 (const -> FLOAT .)
    U8              reduce using rule 57 (const -> FLOAT .)
    LPAR            reduce using rule 57 (const -> FLOAT .)
    FROM            reduce using rule 57 (const -> FLOAT .)
    DEF             reduce using rule 57 (const -> FLOAT .)
    BOOLEAN         reduce using rule 57 (const -> FLOAT .)
    STRING          reduce using rule 57 (const -> FLOAT .)
    INTEGER         reduce using rule 57 (const -> FLOAT .)
    FLOAT           reduce using rule 57 (const -> FLOAT .)
    HEX             reduce using rule 57 (const -> FLOAT .)
    $end            reduce using rule 57 (const -> FLOAT .)
    COLON           reduce using rule 57 (const -> FLOAT .)
    RPAR            reduce using rule 57 (const -> FLOAT .)
    DEDENT          reduce using rule 57 (const -> FLOAT .)
    COMMA           reduce using rule 57 (const -> FLOAT .)


state 28

    (58) const -> HEX .
    EQ              reduce using rule 58 (const -> HEX .)
    LT              reduce using rule 58 (const -> HEX .)
    GT              reduce using rule 58 (const -> HEX .)
    LTE             reduce using rule 58 (const -> HEX .)
    GTE             reduce using rule 58 (const -> HEX .)
    DIV             reduce using rule 58 (const -> HEX .)
    MULT            reduce using rule 58 (const -> HEX .)
    MINUS           reduce using rule 58 (const -> HEX .)
    PLUS            reduce using rule 58 (const -> HEX .)
    NEWLINE         reduce using rule 58 (const -> HEX .)
    NAME            reduce using rule 58 (const -> HEX .)
    WHILE           reduce using rule 58 (const -> HEX .)
    IF              reduce using rule 58 (const -> HEX .)
    PASS            reduce using rule 58 (const -> HEX .)
    S64             reduce using rule 58 (const -> HEX .)
    S32             reduce using rule 58 (const -> HEX .)
    S16             reduce using rule 58 (const -> HEX .)
    S8              reduce using rule 58 (const -> HEX .)
    U64             reduce using rule 58 (const -> HEX .)
    U32             reduce using rule 58 (const -> HEX .)
    U16             reduce using rule 58 (const -> HEX .)
    U8              reduce using rule 58 (const -> HEX .)
    LPAR            reduce using rule 58 (const -> HEX .)
    FROM            reduce using rule 58 (const -> HEX .)
    DEF             reduce using rule 58 (const -> HEX .)
    BOOLEAN         reduce using rule 58 (const -> HEX .)
    STRING          reduce using rule 58 (const -> HEX .)
    INTEGER         reduce using rule 58 (const -> HEX .)
    FLOAT           reduce using rule 58 (const -> HEX .)
    HEX             reduce using rule 58 (const -> HEX .)
    $end            reduce using rule 58 (const -> HEX .)
    COLON           reduce using rule 58 (const -> HEX .)
    RPAR            reduce using rule 58 (const -> HEX .)
    DEDENT          reduce using rule 58 (const -> HEX .)
    COMMA           reduce using rule 58 (const -> HEX .)


state 29

    (1) program -> statement_full program .
    $end            reduce using rule 1 (program -> statement_full program .)


state 30

    (4) statement_full -> statement NEWLINE .
    NAME            reduce using rule 4 (statement_full -> statement NEWLINE .)
    WHILE           reduce using rule 4 (statement_full -> statement NEWLINE .)
    IF              reduce using rule 4 (statement_full -> statement NEWLINE .)
    PASS            reduce using rule 4 (statement_full -> statement NEWLINE .)
    S64             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S32             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S16             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S8              reduce using rule 4 (statement_full -> statement NEWLINE .)
    U64             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U32             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U16             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U8              reduce using rule 4 (statement_full -> statement NEWLINE .)
    LPAR            reduce using rule 4 (statement_full -> statement NEWLINE .)
    FROM            reduce using rule 4 (statement_full -> statement NEWLINE .)
    DEF             reduce using rule 4 (statement_full -> statement NEWLINE .)
    BOOLEAN         reduce using rule 4 (statement_full -> statement NEWLINE .)
    STRING          reduce using rule 4 (statement_full -> statement NEWLINE .)
    INTEGER         reduce using rule 4 (statement_full -> statement NEWLINE .)
    FLOAT           reduce using rule 4 (statement_full -> statement NEWLINE .)
    HEX             reduce using rule 4 (statement_full -> statement NEWLINE .)
    $end            reduce using rule 4 (statement_full -> statement NEWLINE .)
    DEDENT          reduce using rule 4 (statement_full -> statement NEWLINE .)


state 31

    (5) statement -> type COLON . NAME ASSIGN expression
    (6) statement -> type COLON . NAME ASSIGN const
    NAME            shift and go to state 49


state 32

    (7) statement -> NAME ASSIGN . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 50
    const                          shift and go to state 7

state 33

    (39) expression -> NAME LPAR . arglist RPAR
    (43) arglist -> .
    (44) arglist -> . argument
    (45) arglist -> . argument COMMA arglist
    (40) argument -> . type COLON NAME
    (41) argument -> . const
    (42) argument -> . NAME
    (46) type -> . S64
    (47) type -> . S32
    (48) type -> . S16
    (49) type -> . S8
    (50) type -> . U64
    (51) type -> . U32
    (52) type -> . U16
    (53) type -> . U8
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    RPAR            reduce using rule 43 (arglist -> .)
    NAME            shift and go to state 51
    S64             shift and go to state 13
    S32             shift and go to state 14
    S16             shift and go to state 15
    S8              shift and go to state 16
    U64             shift and go to state 17
    U32             shift and go to state 18
    U16             shift and go to state 19
    U8              shift and go to state 20
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    arglist                        shift and go to state 52
    argument                       shift and go to state 53
    type                           shift and go to state 54
    const                          shift and go to state 55

state 34

    (30) expression -> expression EQ . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 56
    const                          shift and go to state 7

state 35

    (31) expression -> expression LT . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 57
    const                          shift and go to state 7

state 36

    (32) expression -> expression GT . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 58
    const                          shift and go to state 7

state 37

    (33) expression -> expression LTE . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 59
    const                          shift and go to state 7

state 38

    (34) expression -> expression GTE . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 60
    const                          shift and go to state 7

state 39

    (35) expression -> expression DIV . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 61
    const                          shift and go to state 7

state 40

    (36) expression -> expression MULT . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 62
    const                          shift and go to state 7

state 41

    (37) expression -> expression MINUS . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 63
    const                          shift and go to state 7

state 42

    (38) expression -> expression PLUS . expression
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 64
    const                          shift and go to state 7

state 43

    (8) statement -> WHILE expression . COLON NEWLINE block
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    COLON           shift and go to state 65
    EQ              shift and go to state 34
    LT              shift and go to state 35
    GT              shift and go to state 36
    LTE             shift and go to state 37
    GTE             shift and go to state 38
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 44

    (27) expression -> NAME .
    (39) expression -> NAME . LPAR arglist RPAR
  ! shift/reduce conflict for LPAR resolved as shift
    COLON           reduce using rule 27 (expression -> NAME .)
    EQ              reduce using rule 27 (expression -> NAME .)
    LT              reduce using rule 27 (expression -> NAME .)
    GT              reduce using rule 27 (expression -> NAME .)
    LTE             reduce using rule 27 (expression -> NAME .)
    GTE             reduce using rule 27 (expression -> NAME .)
    DIV             reduce using rule 27 (expression -> NAME .)
    MULT            reduce using rule 27 (expression -> NAME .)
    MINUS           reduce using rule 27 (expression -> NAME .)
    PLUS            reduce using rule 27 (expression -> NAME .)
    RPAR            reduce using rule 27 (expression -> NAME .)
    NEWLINE         reduce using rule 27 (expression -> NAME .)
    NAME            reduce using rule 27 (expression -> NAME .)
    WHILE           reduce using rule 27 (expression -> NAME .)
    IF              reduce using rule 27 (expression -> NAME .)
    PASS            reduce using rule 27 (expression -> NAME .)
    S64             reduce using rule 27 (expression -> NAME .)
    S32             reduce using rule 27 (expression -> NAME .)
    S16             reduce using rule 27 (expression -> NAME .)
    S8              reduce using rule 27 (expression -> NAME .)
    U64             reduce using rule 27 (expression -> NAME .)
    U32             reduce using rule 27 (expression -> NAME .)
    U16             reduce using rule 27 (expression -> NAME .)
    U8              reduce using rule 27 (expression -> NAME .)
    FROM            reduce using rule 27 (expression -> NAME .)
    DEF             reduce using rule 27 (expression -> NAME .)
    BOOLEAN         reduce using rule 27 (expression -> NAME .)
    STRING          reduce using rule 27 (expression -> NAME .)
    INTEGER         reduce using rule 27 (expression -> NAME .)
    FLOAT           reduce using rule 27 (expression -> NAME .)
    HEX             reduce using rule 27 (expression -> NAME .)
    $end            reduce using rule 27 (expression -> NAME .)
    DEDENT          reduce using rule 27 (expression -> NAME .)
    LPAR            shift and go to state 33


state 45

    (9) statement -> IF expression . COLON NEWLINE block NEWLINE
    (10) statement -> IF expression . COLON NEWLINE block NEWLINE else_statement
    (11) statement -> IF expression . COLON NEWLINE block NEWLINE elif_statement
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    COLON           shift and go to state 66
    EQ              shift and go to state 34
    LT              shift and go to state 35
    GT              shift and go to state 36
    LTE             shift and go to state 37
    GTE             shift and go to state 38
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 46

    (29) expression -> LPAR expression . RPAR
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    RPAR            shift and go to state 67
    EQ              shift and go to state 34
    LT              shift and go to state 35
    GT              shift and go to state 36
    LTE             shift and go to state 37
    GTE             shift and go to state 38
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 47

    (16) import_statement -> FROM NAME . IMPORT module_list
    IMPORT          shift and go to state 68


state 48

    (19) chain_statement -> DEF NAME . LPAR arglist RPAR COLON NEWLINE block
    LPAR            shift and go to state 69


state 49

    (5) statement -> type COLON NAME . ASSIGN expression
    (6) statement -> type COLON NAME . ASSIGN const
    ASSIGN          shift and go to state 70


state 50

    (7) statement -> NAME ASSIGN expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    NAME            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    WHILE           reduce using rule 7 (statement -> NAME ASSIGN expression .)
    IF              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    PASS            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S64             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S32             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S16             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S8              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U64             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U32             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U16             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U8              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    LPAR            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    FROM            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    DEF             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    BOOLEAN         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    STRING          reduce using rule 7 (statement -> NAME ASSIGN expression .)
    INTEGER         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    FLOAT           reduce using rule 7 (statement -> NAME ASSIGN expression .)
    HEX             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    $end            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    DEDENT          reduce using rule 7 (statement -> NAME ASSIGN expression .)
    EQ              shift and go to state 34
    LT              shift and go to state 35
    GT              shift and go to state 36
    LTE             shift and go to state 37
    GTE             shift and go to state 38
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 51

    (42) argument -> NAME .
    COMMA           reduce using rule 42 (argument -> NAME .)
    RPAR            reduce using rule 42 (argument -> NAME .)


state 52

    (39) expression -> NAME LPAR arglist . RPAR
    RPAR            shift and go to state 71


state 53

    (44) arglist -> argument .
    (45) arglist -> argument . COMMA arglist
    RPAR            reduce using rule 44 (arglist -> argument .)
    COMMA           shift and go to state 72


state 54

    (40) argument -> type . COLON NAME
    COLON           shift and go to state 73


state 55

    (41) argument -> const .
    COMMA           reduce using rule 41 (argument -> const .)
    RPAR            reduce using rule 41 (argument -> const .)


state 56

    (30) expression -> expression EQ expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 30 (expression -> expression EQ expression .)
    LT              reduce using rule 30 (expression -> expression EQ expression .)
    GT              reduce using rule 30 (expression -> expression EQ expression .)
    LTE             reduce using rule 30 (expression -> expression EQ expression .)
    GTE             reduce using rule 30 (expression -> expression EQ expression .)
    NEWLINE         reduce using rule 30 (expression -> expression EQ expression .)
    NAME            reduce using rule 30 (expression -> expression EQ expression .)
    WHILE           reduce using rule 30 (expression -> expression EQ expression .)
    IF              reduce using rule 30 (expression -> expression EQ expression .)
    PASS            reduce using rule 30 (expression -> expression EQ expression .)
    S64             reduce using rule 30 (expression -> expression EQ expression .)
    S32             reduce using rule 30 (expression -> expression EQ expression .)
    S16             reduce using rule 30 (expression -> expression EQ expression .)
    S8              reduce using rule 30 (expression -> expression EQ expression .)
    U64             reduce using rule 30 (expression -> expression EQ expression .)
    U32             reduce using rule 30 (expression -> expression EQ expression .)
    U16             reduce using rule 30 (expression -> expression EQ expression .)
    U8              reduce using rule 30 (expression -> expression EQ expression .)
    LPAR            reduce using rule 30 (expression -> expression EQ expression .)
    FROM            reduce using rule 30 (expression -> expression EQ expression .)
    DEF             reduce using rule 30 (expression -> expression EQ expression .)
    BOOLEAN         reduce using rule 30 (expression -> expression EQ expression .)
    STRING          reduce using rule 30 (expression -> expression EQ expression .)
    INTEGER         reduce using rule 30 (expression -> expression EQ expression .)
    FLOAT           reduce using rule 30 (expression -> expression EQ expression .)
    HEX             reduce using rule 30 (expression -> expression EQ expression .)
    $end            reduce using rule 30 (expression -> expression EQ expression .)
    COLON           reduce using rule 30 (expression -> expression EQ expression .)
    RPAR            reduce using rule 30 (expression -> expression EQ expression .)
    DEDENT          reduce using rule 30 (expression -> expression EQ expression .)
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 57

    (31) expression -> expression LT expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 31 (expression -> expression LT expression .)
    LT              reduce using rule 31 (expression -> expression LT expression .)
    GT              reduce using rule 31 (expression -> expression LT expression .)
    LTE             reduce using rule 31 (expression -> expression LT expression .)
    GTE             reduce using rule 31 (expression -> expression LT expression .)
    NEWLINE         reduce using rule 31 (expression -> expression LT expression .)
    NAME            reduce using rule 31 (expression -> expression LT expression .)
    WHILE           reduce using rule 31 (expression -> expression LT expression .)
    IF              reduce using rule 31 (expression -> expression LT expression .)
    PASS            reduce using rule 31 (expression -> expression LT expression .)
    S64             reduce using rule 31 (expression -> expression LT expression .)
    S32             reduce using rule 31 (expression -> expression LT expression .)
    S16             reduce using rule 31 (expression -> expression LT expression .)
    S8              reduce using rule 31 (expression -> expression LT expression .)
    U64             reduce using rule 31 (expression -> expression LT expression .)
    U32             reduce using rule 31 (expression -> expression LT expression .)
    U16             reduce using rule 31 (expression -> expression LT expression .)
    U8              reduce using rule 31 (expression -> expression LT expression .)
    LPAR            reduce using rule 31 (expression -> expression LT expression .)
    FROM            reduce using rule 31 (expression -> expression LT expression .)
    DEF             reduce using rule 31 (expression -> expression LT expression .)
    BOOLEAN         reduce using rule 31 (expression -> expression LT expression .)
    STRING          reduce using rule 31 (expression -> expression LT expression .)
    INTEGER         reduce using rule 31 (expression -> expression LT expression .)
    FLOAT           reduce using rule 31 (expression -> expression LT expression .)
    HEX             reduce using rule 31 (expression -> expression LT expression .)
    $end            reduce using rule 31 (expression -> expression LT expression .)
    COLON           reduce using rule 31 (expression -> expression LT expression .)
    RPAR            reduce using rule 31 (expression -> expression LT expression .)
    DEDENT          reduce using rule 31 (expression -> expression LT expression .)
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 58

    (32) expression -> expression GT expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 32 (expression -> expression GT expression .)
    LT              reduce using rule 32 (expression -> expression GT expression .)
    GT              reduce using rule 32 (expression -> expression GT expression .)
    LTE             reduce using rule 32 (expression -> expression GT expression .)
    GTE             reduce using rule 32 (expression -> expression GT expression .)
    NEWLINE         reduce using rule 32 (expression -> expression GT expression .)
    NAME            reduce using rule 32 (expression -> expression GT expression .)
    WHILE           reduce using rule 32 (expression -> expression GT expression .)
    IF              reduce using rule 32 (expression -> expression GT expression .)
    PASS            reduce using rule 32 (expression -> expression GT expression .)
    S64             reduce using rule 32 (expression -> expression GT expression .)
    S32             reduce using rule 32 (expression -> expression GT expression .)
    S16             reduce using rule 32 (expression -> expression GT expression .)
    S8              reduce using rule 32 (expression -> expression GT expression .)
    U64             reduce using rule 32 (expression -> expression GT expression .)
    U32             reduce using rule 32 (expression -> expression GT expression .)
    U16             reduce using rule 32 (expression -> expression GT expression .)
    U8              reduce using rule 32 (expression -> expression GT expression .)
    LPAR            reduce using rule 32 (expression -> expression GT expression .)
    FROM            reduce using rule 32 (expression -> expression GT expression .)
    DEF             reduce using rule 32 (expression -> expression GT expression .)
    BOOLEAN         reduce using rule 32 (expression -> expression GT expression .)
    STRING          reduce using rule 32 (expression -> expression GT expression .)
    INTEGER         reduce using rule 32 (expression -> expression GT expression .)
    FLOAT           reduce using rule 32 (expression -> expression GT expression .)
    HEX             reduce using rule 32 (expression -> expression GT expression .)
    $end            reduce using rule 32 (expression -> expression GT expression .)
    COLON           reduce using rule 32 (expression -> expression GT expression .)
    RPAR            reduce using rule 32 (expression -> expression GT expression .)
    DEDENT          reduce using rule 32 (expression -> expression GT expression .)
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 59

    (33) expression -> expression LTE expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 33 (expression -> expression LTE expression .)
    LT              reduce using rule 33 (expression -> expression LTE expression .)
    GT              reduce using rule 33 (expression -> expression LTE expression .)
    LTE             reduce using rule 33 (expression -> expression LTE expression .)
    GTE             reduce using rule 33 (expression -> expression LTE expression .)
    NEWLINE         reduce using rule 33 (expression -> expression LTE expression .)
    NAME            reduce using rule 33 (expression -> expression LTE expression .)
    WHILE           reduce using rule 33 (expression -> expression LTE expression .)
    IF              reduce using rule 33 (expression -> expression LTE expression .)
    PASS            reduce using rule 33 (expression -> expression LTE expression .)
    S64             reduce using rule 33 (expression -> expression LTE expression .)
    S32             reduce using rule 33 (expression -> expression LTE expression .)
    S16             reduce using rule 33 (expression -> expression LTE expression .)
    S8              reduce using rule 33 (expression -> expression LTE expression .)
    U64             reduce using rule 33 (expression -> expression LTE expression .)
    U32             reduce using rule 33 (expression -> expression LTE expression .)
    U16             reduce using rule 33 (expression -> expression LTE expression .)
    U8              reduce using rule 33 (expression -> expression LTE expression .)
    LPAR            reduce using rule 33 (expression -> expression LTE expression .)
    FROM            reduce using rule 33 (expression -> expression LTE expression .)
    DEF             reduce using rule 33 (expression -> expression LTE expression .)
    BOOLEAN         reduce using rule 33 (expression -> expression LTE expression .)
    STRING          reduce using rule 33 (expression -> expression LTE expression .)
    INTEGER         reduce using rule 33 (expression -> expression LTE expression .)
    FLOAT           reduce using rule 33 (expression -> expression LTE expression .)
    HEX             reduce using rule 33 (expression -> expression LTE expression .)
    $end            reduce using rule 33 (expression -> expression LTE expression .)
    COLON           reduce using rule 33 (expression -> expression LTE expression .)
    RPAR            reduce using rule 33 (expression -> expression LTE expression .)
    DEDENT          reduce using rule 33 (expression -> expression LTE expression .)
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 60

    (34) expression -> expression GTE expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 34 (expression -> expression GTE expression .)
    LT              reduce using rule 34 (expression -> expression GTE expression .)
    GT              reduce using rule 34 (expression -> expression GTE expression .)
    LTE             reduce using rule 34 (expression -> expression GTE expression .)
    GTE             reduce using rule 34 (expression -> expression GTE expression .)
    NEWLINE         reduce using rule 34 (expression -> expression GTE expression .)
    NAME            reduce using rule 34 (expression -> expression GTE expression .)
    WHILE           reduce using rule 34 (expression -> expression GTE expression .)
    IF              reduce using rule 34 (expression -> expression GTE expression .)
    PASS            reduce using rule 34 (expression -> expression GTE expression .)
    S64             reduce using rule 34 (expression -> expression GTE expression .)
    S32             reduce using rule 34 (expression -> expression GTE expression .)
    S16             reduce using rule 34 (expression -> expression GTE expression .)
    S8              reduce using rule 34 (expression -> expression GTE expression .)
    U64             reduce using rule 34 (expression -> expression GTE expression .)
    U32             reduce using rule 34 (expression -> expression GTE expression .)
    U16             reduce using rule 34 (expression -> expression GTE expression .)
    U8              reduce using rule 34 (expression -> expression GTE expression .)
    LPAR            reduce using rule 34 (expression -> expression GTE expression .)
    FROM            reduce using rule 34 (expression -> expression GTE expression .)
    DEF             reduce using rule 34 (expression -> expression GTE expression .)
    BOOLEAN         reduce using rule 34 (expression -> expression GTE expression .)
    STRING          reduce using rule 34 (expression -> expression GTE expression .)
    INTEGER         reduce using rule 34 (expression -> expression GTE expression .)
    FLOAT           reduce using rule 34 (expression -> expression GTE expression .)
    HEX             reduce using rule 34 (expression -> expression GTE expression .)
    $end            reduce using rule 34 (expression -> expression GTE expression .)
    COLON           reduce using rule 34 (expression -> expression GTE expression .)
    RPAR            reduce using rule 34 (expression -> expression GTE expression .)
    DEDENT          reduce using rule 34 (expression -> expression GTE expression .)
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 61

    (35) expression -> expression DIV expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 35 (expression -> expression DIV expression .)
    LT              reduce using rule 35 (expression -> expression DIV expression .)
    GT              reduce using rule 35 (expression -> expression DIV expression .)
    LTE             reduce using rule 35 (expression -> expression DIV expression .)
    GTE             reduce using rule 35 (expression -> expression DIV expression .)
    DIV             reduce using rule 35 (expression -> expression DIV expression .)
    MULT            reduce using rule 35 (expression -> expression DIV expression .)
    MINUS           reduce using rule 35 (expression -> expression DIV expression .)
    PLUS            reduce using rule 35 (expression -> expression DIV expression .)
    NEWLINE         reduce using rule 35 (expression -> expression DIV expression .)
    NAME            reduce using rule 35 (expression -> expression DIV expression .)
    WHILE           reduce using rule 35 (expression -> expression DIV expression .)
    IF              reduce using rule 35 (expression -> expression DIV expression .)
    PASS            reduce using rule 35 (expression -> expression DIV expression .)
    S64             reduce using rule 35 (expression -> expression DIV expression .)
    S32             reduce using rule 35 (expression -> expression DIV expression .)
    S16             reduce using rule 35 (expression -> expression DIV expression .)
    S8              reduce using rule 35 (expression -> expression DIV expression .)
    U64             reduce using rule 35 (expression -> expression DIV expression .)
    U32             reduce using rule 35 (expression -> expression DIV expression .)
    U16             reduce using rule 35 (expression -> expression DIV expression .)
    U8              reduce using rule 35 (expression -> expression DIV expression .)
    LPAR            reduce using rule 35 (expression -> expression DIV expression .)
    FROM            reduce using rule 35 (expression -> expression DIV expression .)
    DEF             reduce using rule 35 (expression -> expression DIV expression .)
    BOOLEAN         reduce using rule 35 (expression -> expression DIV expression .)
    STRING          reduce using rule 35 (expression -> expression DIV expression .)
    INTEGER         reduce using rule 35 (expression -> expression DIV expression .)
    FLOAT           reduce using rule 35 (expression -> expression DIV expression .)
    HEX             reduce using rule 35 (expression -> expression DIV expression .)
    $end            reduce using rule 35 (expression -> expression DIV expression .)
    COLON           reduce using rule 35 (expression -> expression DIV expression .)
    RPAR            reduce using rule 35 (expression -> expression DIV expression .)
    DEDENT          reduce using rule 35 (expression -> expression DIV expression .)


state 62

    (36) expression -> expression MULT expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 36 (expression -> expression MULT expression .)
    LT              reduce using rule 36 (expression -> expression MULT expression .)
    GT              reduce using rule 36 (expression -> expression MULT expression .)
    LTE             reduce using rule 36 (expression -> expression MULT expression .)
    GTE             reduce using rule 36 (expression -> expression MULT expression .)
    DIV             reduce using rule 36 (expression -> expression MULT expression .)
    MULT            reduce using rule 36 (expression -> expression MULT expression .)
    MINUS           reduce using rule 36 (expression -> expression MULT expression .)
    PLUS            reduce using rule 36 (expression -> expression MULT expression .)
    NEWLINE         reduce using rule 36 (expression -> expression MULT expression .)
    NAME            reduce using rule 36 (expression -> expression MULT expression .)
    WHILE           reduce using rule 36 (expression -> expression MULT expression .)
    IF              reduce using rule 36 (expression -> expression MULT expression .)
    PASS            reduce using rule 36 (expression -> expression MULT expression .)
    S64             reduce using rule 36 (expression -> expression MULT expression .)
    S32             reduce using rule 36 (expression -> expression MULT expression .)
    S16             reduce using rule 36 (expression -> expression MULT expression .)
    S8              reduce using rule 36 (expression -> expression MULT expression .)
    U64             reduce using rule 36 (expression -> expression MULT expression .)
    U32             reduce using rule 36 (expression -> expression MULT expression .)
    U16             reduce using rule 36 (expression -> expression MULT expression .)
    U8              reduce using rule 36 (expression -> expression MULT expression .)
    LPAR            reduce using rule 36 (expression -> expression MULT expression .)
    FROM            reduce using rule 36 (expression -> expression MULT expression .)
    DEF             reduce using rule 36 (expression -> expression MULT expression .)
    BOOLEAN         reduce using rule 36 (expression -> expression MULT expression .)
    STRING          reduce using rule 36 (expression -> expression MULT expression .)
    INTEGER         reduce using rule 36 (expression -> expression MULT expression .)
    FLOAT           reduce using rule 36 (expression -> expression MULT expression .)
    HEX             reduce using rule 36 (expression -> expression MULT expression .)
    $end            reduce using rule 36 (expression -> expression MULT expression .)
    COLON           reduce using rule 36 (expression -> expression MULT expression .)
    RPAR            reduce using rule 36 (expression -> expression MULT expression .)
    DEDENT          reduce using rule 36 (expression -> expression MULT expression .)


state 63

    (37) expression -> expression MINUS expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 37 (expression -> expression MINUS expression .)
    LT              reduce using rule 37 (expression -> expression MINUS expression .)
    GT              reduce using rule 37 (expression -> expression MINUS expression .)
    LTE             reduce using rule 37 (expression -> expression MINUS expression .)
    GTE             reduce using rule 37 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 37 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 37 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 37 (expression -> expression MINUS expression .)
    NAME            reduce using rule 37 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 37 (expression -> expression MINUS expression .)
    IF              reduce using rule 37 (expression -> expression MINUS expression .)
    PASS            reduce using rule 37 (expression -> expression MINUS expression .)
    S64             reduce using rule 37 (expression -> expression MINUS expression .)
    S32             reduce using rule 37 (expression -> expression MINUS expression .)
    S16             reduce using rule 37 (expression -> expression MINUS expression .)
    S8              reduce using rule 37 (expression -> expression MINUS expression .)
    U64             reduce using rule 37 (expression -> expression MINUS expression .)
    U32             reduce using rule 37 (expression -> expression MINUS expression .)
    U16             reduce using rule 37 (expression -> expression MINUS expression .)
    U8              reduce using rule 37 (expression -> expression MINUS expression .)
    LPAR            reduce using rule 37 (expression -> expression MINUS expression .)
    FROM            reduce using rule 37 (expression -> expression MINUS expression .)
    DEF             reduce using rule 37 (expression -> expression MINUS expression .)
    BOOLEAN         reduce using rule 37 (expression -> expression MINUS expression .)
    STRING          reduce using rule 37 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 37 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 37 (expression -> expression MINUS expression .)
    HEX             reduce using rule 37 (expression -> expression MINUS expression .)
    $end            reduce using rule 37 (expression -> expression MINUS expression .)
    COLON           reduce using rule 37 (expression -> expression MINUS expression .)
    RPAR            reduce using rule 37 (expression -> expression MINUS expression .)
    DEDENT          reduce using rule 37 (expression -> expression MINUS expression .)
    DIV             shift and go to state 39
    MULT            shift and go to state 40


state 64

    (38) expression -> expression PLUS expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    EQ              reduce using rule 38 (expression -> expression PLUS expression .)
    LT              reduce using rule 38 (expression -> expression PLUS expression .)
    GT              reduce using rule 38 (expression -> expression PLUS expression .)
    LTE             reduce using rule 38 (expression -> expression PLUS expression .)
    GTE             reduce using rule 38 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 38 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 38 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 38 (expression -> expression PLUS expression .)
    NAME            reduce using rule 38 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 38 (expression -> expression PLUS expression .)
    IF              reduce using rule 38 (expression -> expression PLUS expression .)
    PASS            reduce using rule 38 (expression -> expression PLUS expression .)
    S64             reduce using rule 38 (expression -> expression PLUS expression .)
    S32             reduce using rule 38 (expression -> expression PLUS expression .)
    S16             reduce using rule 38 (expression -> expression PLUS expression .)
    S8              reduce using rule 38 (expression -> expression PLUS expression .)
    U64             reduce using rule 38 (expression -> expression PLUS expression .)
    U32             reduce using rule 38 (expression -> expression PLUS expression .)
    U16             reduce using rule 38 (expression -> expression PLUS expression .)
    U8              reduce using rule 38 (expression -> expression PLUS expression .)
    LPAR            reduce using rule 38 (expression -> expression PLUS expression .)
    FROM            reduce using rule 38 (expression -> expression PLUS expression .)
    DEF             reduce using rule 38 (expression -> expression PLUS expression .)
    BOOLEAN         reduce using rule 38 (expression -> expression PLUS expression .)
    STRING          reduce using rule 38 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 38 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 38 (expression -> expression PLUS expression .)
    HEX             reduce using rule 38 (expression -> expression PLUS expression .)
    $end            reduce using rule 38 (expression -> expression PLUS expression .)
    COLON           reduce using rule 38 (expression -> expression PLUS expression .)
    RPAR            reduce using rule 38 (expression -> expression PLUS expression .)
    DEDENT          reduce using rule 38 (expression -> expression PLUS expression .)
    DIV             shift and go to state 39
    MULT            shift and go to state 40


state 65

    (8) statement -> WHILE expression COLON . NEWLINE block
    NEWLINE         shift and go to state 74


state 66

    (9) statement -> IF expression COLON . NEWLINE block NEWLINE
    (10) statement -> IF expression COLON . NEWLINE block NEWLINE else_statement
    (11) statement -> IF expression COLON . NEWLINE block NEWLINE elif_statement
    NEWLINE         shift and go to state 75


state 67

    (29) expression -> LPAR expression RPAR .
    EQ              reduce using rule 29 (expression -> LPAR expression RPAR .)
    LT              reduce using rule 29 (expression -> LPAR expression RPAR .)
    GT              reduce using rule 29 (expression -> LPAR expression RPAR .)
    LTE             reduce using rule 29 (expression -> LPAR expression RPAR .)
    GTE             reduce using rule 29 (expression -> LPAR expression RPAR .)
    DIV             reduce using rule 29 (expression -> LPAR expression RPAR .)
    MULT            reduce using rule 29 (expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 29 (expression -> LPAR expression RPAR .)
    PLUS            reduce using rule 29 (expression -> LPAR expression RPAR .)
    NEWLINE         reduce using rule 29 (expression -> LPAR expression RPAR .)
    NAME            reduce using rule 29 (expression -> LPAR expression RPAR .)
    WHILE           reduce using rule 29 (expression -> LPAR expression RPAR .)
    IF              reduce using rule 29 (expression -> LPAR expression RPAR .)
    PASS            reduce using rule 29 (expression -> LPAR expression RPAR .)
    S64             reduce using rule 29 (expression -> LPAR expression RPAR .)
    S32             reduce using rule 29 (expression -> LPAR expression RPAR .)
    S16             reduce using rule 29 (expression -> LPAR expression RPAR .)
    S8              reduce using rule 29 (expression -> LPAR expression RPAR .)
    U64             reduce using rule 29 (expression -> LPAR expression RPAR .)
    U32             reduce using rule 29 (expression -> LPAR expression RPAR .)
    U16             reduce using rule 29 (expression -> LPAR expression RPAR .)
    U8              reduce using rule 29 (expression -> LPAR expression RPAR .)
    LPAR            reduce using rule 29 (expression -> LPAR expression RPAR .)
    FROM            reduce using rule 29 (expression -> LPAR expression RPAR .)
    DEF             reduce using rule 29 (expression -> LPAR expression RPAR .)
    BOOLEAN         reduce using rule 29 (expression -> LPAR expression RPAR .)
    STRING          reduce using rule 29 (expression -> LPAR expression RPAR .)
    INTEGER         reduce using rule 29 (expression -> LPAR expression RPAR .)
    FLOAT           reduce using rule 29 (expression -> LPAR expression RPAR .)
    HEX             reduce using rule 29 (expression -> LPAR expression RPAR .)
    $end            reduce using rule 29 (expression -> LPAR expression RPAR .)
    COLON           reduce using rule 29 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 29 (expression -> LPAR expression RPAR .)
    DEDENT          reduce using rule 29 (expression -> LPAR expression RPAR .)


state 68

    (16) import_statement -> FROM NAME IMPORT . module_list
    (17) module_list -> . NAME
    (18) module_list -> . NAME COMMA module_list
    NAME            shift and go to state 76

    module_list                    shift and go to state 77

state 69

    (19) chain_statement -> DEF NAME LPAR . arglist RPAR COLON NEWLINE block
    (43) arglist -> .
    (44) arglist -> . argument
    (45) arglist -> . argument COMMA arglist
    (40) argument -> . type COLON NAME
    (41) argument -> . const
    (42) argument -> . NAME
    (46) type -> . S64
    (47) type -> . S32
    (48) type -> . S16
    (49) type -> . S8
    (50) type -> . U64
    (51) type -> . U32
    (52) type -> . U16
    (53) type -> . U8
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    RPAR            reduce using rule 43 (arglist -> .)
    NAME            shift and go to state 51
    S64             shift and go to state 13
    S32             shift and go to state 14
    S16             shift and go to state 15
    S8              shift and go to state 16
    U64             shift and go to state 17
    U32             shift and go to state 18
    U16             shift and go to state 19
    U8              shift and go to state 20
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    arglist                        shift and go to state 78
    argument                       shift and go to state 53
    type                           shift and go to state 54
    const                          shift and go to state 55

state 70

    (5) statement -> type COLON NAME ASSIGN . expression
    (6) statement -> type COLON NAME ASSIGN . const
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 79
    const                          shift and go to state 80

state 71

    (39) expression -> NAME LPAR arglist RPAR .
    EQ              reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    LT              reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    GT              reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    LTE             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    GTE             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    DIV             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    MULT            reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    MINUS           reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    PLUS            reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    NEWLINE         reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    NAME            reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    WHILE           reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    IF              reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    PASS            reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    S64             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    S32             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    S16             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    S8              reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    U64             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    U32             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    U16             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    U8              reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    LPAR            reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    FROM            reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    DEF             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    BOOLEAN         reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    STRING          reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    INTEGER         reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    FLOAT           reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    HEX             reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    $end            reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    COLON           reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    RPAR            reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)
    DEDENT          reduce using rule 39 (expression -> NAME LPAR arglist RPAR .)


state 72

    (45) arglist -> argument COMMA . arglist
    (43) arglist -> .
    (44) arglist -> . argument
    (45) arglist -> . argument COMMA arglist
    (40) argument -> . type COLON NAME
    (41) argument -> . const
    (42) argument -> . NAME
    (46) type -> . S64
    (47) type -> . S32
    (48) type -> . S16
    (49) type -> . S8
    (50) type -> . U64
    (51) type -> . U32
    (52) type -> . U16
    (53) type -> . U8
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    RPAR            reduce using rule 43 (arglist -> .)
    NAME            shift and go to state 51
    S64             shift and go to state 13
    S32             shift and go to state 14
    S16             shift and go to state 15
    S8              shift and go to state 16
    U64             shift and go to state 17
    U32             shift and go to state 18
    U16             shift and go to state 19
    U8              shift and go to state 20
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    argument                       shift and go to state 53
    arglist                        shift and go to state 81
    type                           shift and go to state 54
    const                          shift and go to state 55

state 73

    (40) argument -> type COLON . NAME
    NAME            shift and go to state 82


state 74

    (8) statement -> WHILE expression COLON NEWLINE . block
    (20) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 84

    block                          shift and go to state 83

state 75

    (9) statement -> IF expression COLON NEWLINE . block NEWLINE
    (10) statement -> IF expression COLON NEWLINE . block NEWLINE else_statement
    (11) statement -> IF expression COLON NEWLINE . block NEWLINE elif_statement
    (20) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 84

    block                          shift and go to state 85

state 76

    (17) module_list -> NAME .
    (18) module_list -> NAME . COMMA module_list
    NEWLINE         reduce using rule 17 (module_list -> NAME .)
    NAME            reduce using rule 17 (module_list -> NAME .)
    WHILE           reduce using rule 17 (module_list -> NAME .)
    IF              reduce using rule 17 (module_list -> NAME .)
    PASS            reduce using rule 17 (module_list -> NAME .)
    S64             reduce using rule 17 (module_list -> NAME .)
    S32             reduce using rule 17 (module_list -> NAME .)
    S16             reduce using rule 17 (module_list -> NAME .)
    S8              reduce using rule 17 (module_list -> NAME .)
    U64             reduce using rule 17 (module_list -> NAME .)
    U32             reduce using rule 17 (module_list -> NAME .)
    U16             reduce using rule 17 (module_list -> NAME .)
    U8              reduce using rule 17 (module_list -> NAME .)
    LPAR            reduce using rule 17 (module_list -> NAME .)
    FROM            reduce using rule 17 (module_list -> NAME .)
    DEF             reduce using rule 17 (module_list -> NAME .)
    BOOLEAN         reduce using rule 17 (module_list -> NAME .)
    STRING          reduce using rule 17 (module_list -> NAME .)
    INTEGER         reduce using rule 17 (module_list -> NAME .)
    FLOAT           reduce using rule 17 (module_list -> NAME .)
    HEX             reduce using rule 17 (module_list -> NAME .)
    $end            reduce using rule 17 (module_list -> NAME .)
    DEDENT          reduce using rule 17 (module_list -> NAME .)
    COMMA           shift and go to state 86


state 77

    (16) import_statement -> FROM NAME IMPORT module_list .
    NEWLINE         reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    NAME            reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    WHILE           reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    IF              reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    PASS            reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    S64             reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    S32             reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    S16             reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    S8              reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    U64             reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    U32             reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    U16             reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    U8              reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    LPAR            reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    FROM            reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    DEF             reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    BOOLEAN         reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    STRING          reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    INTEGER         reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    FLOAT           reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    HEX             reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    $end            reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)
    DEDENT          reduce using rule 16 (import_statement -> FROM NAME IMPORT module_list .)


state 78

    (19) chain_statement -> DEF NAME LPAR arglist . RPAR COLON NEWLINE block
    RPAR            shift and go to state 87


state 79

    (5) statement -> type COLON NAME ASSIGN expression .
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    NAME            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    WHILE           reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    IF              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    PASS            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S64             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S32             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S16             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S8              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U64             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U32             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U16             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U8              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    LPAR            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    FROM            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    DEF             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    BOOLEAN         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    STRING          reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    INTEGER         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    FLOAT           reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    HEX             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    $end            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    DEDENT          reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    EQ              shift and go to state 34
    LT              shift and go to state 35
    GT              shift and go to state 36
    LTE             shift and go to state 37
    GTE             shift and go to state 38
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 80

    (6) statement -> type COLON NAME ASSIGN const .
    (28) expression -> const .
  ! reduce/reduce conflict for NEWLINE resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for NAME resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for WHILE resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for IF resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for PASS resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for S64 resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for S32 resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for S16 resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for S8 resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for U64 resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for U32 resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for U16 resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for U8 resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for LPAR resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for FROM resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for DEF resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for STRING resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for INTEGER resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for FLOAT resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for HEX resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for $end resolved using rule 28 (expression -> const .)
  ! reduce/reduce conflict for DEDENT resolved using rule 28 (expression -> const .)
    EQ              reduce using rule 28 (expression -> const .)
    LT              reduce using rule 28 (expression -> const .)
    GT              reduce using rule 28 (expression -> const .)
    LTE             reduce using rule 28 (expression -> const .)
    GTE             reduce using rule 28 (expression -> const .)
    DIV             reduce using rule 28 (expression -> const .)
    MULT            reduce using rule 28 (expression -> const .)
    MINUS           reduce using rule 28 (expression -> const .)
    PLUS            reduce using rule 28 (expression -> const .)
    NEWLINE         reduce using rule 28 (expression -> const .)
    NAME            reduce using rule 28 (expression -> const .)
    WHILE           reduce using rule 28 (expression -> const .)
    IF              reduce using rule 28 (expression -> const .)
    PASS            reduce using rule 28 (expression -> const .)
    S64             reduce using rule 28 (expression -> const .)
    S32             reduce using rule 28 (expression -> const .)
    S16             reduce using rule 28 (expression -> const .)
    S8              reduce using rule 28 (expression -> const .)
    U64             reduce using rule 28 (expression -> const .)
    U32             reduce using rule 28 (expression -> const .)
    U16             reduce using rule 28 (expression -> const .)
    U8              reduce using rule 28 (expression -> const .)
    LPAR            reduce using rule 28 (expression -> const .)
    FROM            reduce using rule 28 (expression -> const .)
    DEF             reduce using rule 28 (expression -> const .)
    BOOLEAN         reduce using rule 28 (expression -> const .)
    STRING          reduce using rule 28 (expression -> const .)
    INTEGER         reduce using rule 28 (expression -> const .)
    FLOAT           reduce using rule 28 (expression -> const .)
    HEX             reduce using rule 28 (expression -> const .)
    $end            reduce using rule 28 (expression -> const .)
    DEDENT          reduce using rule 28 (expression -> const .)


state 81

    (45) arglist -> argument COMMA arglist .
    RPAR            reduce using rule 45 (arglist -> argument COMMA arglist .)


state 82

    (40) argument -> type COLON NAME .
    COMMA           reduce using rule 40 (argument -> type COLON NAME .)
    RPAR            reduce using rule 40 (argument -> type COLON NAME .)


state 83

    (8) statement -> WHILE expression COLON NEWLINE block .
    NEWLINE         reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    NAME            reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    IF              reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    PASS            reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    S64             reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    S32             reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    S16             reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    S8              reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    U64             reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    U32             reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    U16             reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    U8              reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    LPAR            reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    FROM            reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    DEF             reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    BOOLEAN         reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    STRING          reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    INTEGER         reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    FLOAT           reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    HEX             reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)
    DEDENT          reduce using rule 8 (statement -> WHILE expression COLON NEWLINE block .)


state 84

    (20) block -> INDENT . block_statements DEDENT
    (21) block_statements -> . statement_full block_statements
    (22) block_statements -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . WHILE expression COLON NEWLINE block
    (9) statement -> . IF expression COLON NEWLINE block NEWLINE
    (10) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (12) statement -> . expression
    (13) statement -> . PASS
    (14) statement -> . import_statement
    (15) statement -> . chain_statement
    (46) type -> . S64
    (47) type -> . S32
    (48) type -> . S16
    (49) type -> . S8
    (50) type -> . U64
    (51) type -> . U32
    (52) type -> . U16
    (53) type -> . U8
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (16) import_statement -> . FROM NAME IMPORT module_list
    (19) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 5
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    PASS            shift and go to state 10
    S64             shift and go to state 13
    S32             shift and go to state 14
    S16             shift and go to state 15
    S8              shift and go to state 16
    U64             shift and go to state 17
    U32             shift and go to state 18
    U16             shift and go to state 19
    U8              shift and go to state 20
    LPAR            shift and go to state 21
    FROM            shift and go to state 22
    DEF             shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    block_statements               shift and go to state 88
    statement_full                 shift and go to state 89
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    import_statement               shift and go to state 11
    chain_statement                shift and go to state 12

state 85

    (9) statement -> IF expression COLON NEWLINE block . NEWLINE
    (10) statement -> IF expression COLON NEWLINE block . NEWLINE else_statement
    (11) statement -> IF expression COLON NEWLINE block . NEWLINE elif_statement
    NEWLINE         shift and go to state 90


state 86

    (18) module_list -> NAME COMMA . module_list
    (17) module_list -> . NAME
    (18) module_list -> . NAME COMMA module_list
    NAME            shift and go to state 76

    module_list                    shift and go to state 91

state 87

    (19) chain_statement -> DEF NAME LPAR arglist RPAR . COLON NEWLINE block
    COLON           shift and go to state 92


state 88

    (20) block -> INDENT block_statements . DEDENT
    DEDENT          shift and go to state 93


state 89

    (21) block_statements -> statement_full . block_statements
    (22) block_statements -> statement_full .
    (21) block_statements -> . statement_full block_statements
    (22) block_statements -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . WHILE expression COLON NEWLINE block
    (9) statement -> . IF expression COLON NEWLINE block NEWLINE
    (10) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (12) statement -> . expression
    (13) statement -> . PASS
    (14) statement -> . import_statement
    (15) statement -> . chain_statement
    (46) type -> . S64
    (47) type -> . S32
    (48) type -> . S16
    (49) type -> . S8
    (50) type -> . U64
    (51) type -> . U32
    (52) type -> . U16
    (53) type -> . U8
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (16) import_statement -> . FROM NAME IMPORT module_list
    (19) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    DEDENT          reduce using rule 22 (block_statements -> statement_full .)
    NAME            shift and go to state 5
    WHILE           shift and go to state 8
    IF              shift and go to state 9
    PASS            shift and go to state 10
    S64             shift and go to state 13
    S32             shift and go to state 14
    S16             shift and go to state 15
    S8              shift and go to state 16
    U64             shift and go to state 17
    U32             shift and go to state 18
    U16             shift and go to state 19
    U8              shift and go to state 20
    LPAR            shift and go to state 21
    FROM            shift and go to state 22
    DEF             shift and go to state 23
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    statement_full                 shift and go to state 89
    block_statements               shift and go to state 94
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    import_statement               shift and go to state 11
    chain_statement                shift and go to state 12

state 90

    (9) statement -> IF expression COLON NEWLINE block NEWLINE .
    (10) statement -> IF expression COLON NEWLINE block NEWLINE . else_statement
    (11) statement -> IF expression COLON NEWLINE block NEWLINE . elif_statement
    (23) else_statement -> . ELSE COLON NEWLINE block
    (24) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE
    (25) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE else_statement
    (26) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE elif_statement
    NEWLINE         reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    NAME            reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    WHILE           reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    IF              reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    PASS            reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S64             reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S32             reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S16             reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S8              reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U64             reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U32             reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U16             reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U8              reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    LPAR            reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    FROM            reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    DEF             reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    BOOLEAN         reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    STRING          reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    INTEGER         reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    FLOAT           reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    HEX             reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    $end            reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    DEDENT          reduce using rule 9 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    ELSE            shift and go to state 97
    ELIF            shift and go to state 98

    else_statement                 shift and go to state 95
    elif_statement                 shift and go to state 96

state 91

    (18) module_list -> NAME COMMA module_list .
    NEWLINE         reduce using rule 18 (module_list -> NAME COMMA module_list .)
    NAME            reduce using rule 18 (module_list -> NAME COMMA module_list .)
    WHILE           reduce using rule 18 (module_list -> NAME COMMA module_list .)
    IF              reduce using rule 18 (module_list -> NAME COMMA module_list .)
    PASS            reduce using rule 18 (module_list -> NAME COMMA module_list .)
    S64             reduce using rule 18 (module_list -> NAME COMMA module_list .)
    S32             reduce using rule 18 (module_list -> NAME COMMA module_list .)
    S16             reduce using rule 18 (module_list -> NAME COMMA module_list .)
    S8              reduce using rule 18 (module_list -> NAME COMMA module_list .)
    U64             reduce using rule 18 (module_list -> NAME COMMA module_list .)
    U32             reduce using rule 18 (module_list -> NAME COMMA module_list .)
    U16             reduce using rule 18 (module_list -> NAME COMMA module_list .)
    U8              reduce using rule 18 (module_list -> NAME COMMA module_list .)
    LPAR            reduce using rule 18 (module_list -> NAME COMMA module_list .)
    FROM            reduce using rule 18 (module_list -> NAME COMMA module_list .)
    DEF             reduce using rule 18 (module_list -> NAME COMMA module_list .)
    BOOLEAN         reduce using rule 18 (module_list -> NAME COMMA module_list .)
    STRING          reduce using rule 18 (module_list -> NAME COMMA module_list .)
    INTEGER         reduce using rule 18 (module_list -> NAME COMMA module_list .)
    FLOAT           reduce using rule 18 (module_list -> NAME COMMA module_list .)
    HEX             reduce using rule 18 (module_list -> NAME COMMA module_list .)
    $end            reduce using rule 18 (module_list -> NAME COMMA module_list .)
    DEDENT          reduce using rule 18 (module_list -> NAME COMMA module_list .)


state 92

    (19) chain_statement -> DEF NAME LPAR arglist RPAR COLON . NEWLINE block
    NEWLINE         shift and go to state 99


state 93

    (20) block -> INDENT block_statements DEDENT .
    NEWLINE         reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    NAME            reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    WHILE           reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    IF              reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    PASS            reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    S64             reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    S32             reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    S16             reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    S8              reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    U64             reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    U32             reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    U16             reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    U8              reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    LPAR            reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    FROM            reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    DEF             reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    BOOLEAN         reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    STRING          reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    INTEGER         reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    FLOAT           reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    HEX             reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    $end            reduce using rule 20 (block -> INDENT block_statements DEDENT .)
    DEDENT          reduce using rule 20 (block -> INDENT block_statements DEDENT .)


state 94

    (21) block_statements -> statement_full block_statements .
    DEDENT          reduce using rule 21 (block_statements -> statement_full block_statements .)


state 95

    (10) statement -> IF expression COLON NEWLINE block NEWLINE else_statement .
    NEWLINE         reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    NAME            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    WHILE           reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    IF              reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    PASS            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S64             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S32             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S16             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S8              reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U64             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U32             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U16             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U8              reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    LPAR            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    FROM            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    DEF             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    BOOLEAN         reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    STRING          reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    INTEGER         reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    FLOAT           reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    HEX             reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    $end            reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    DEDENT          reduce using rule 10 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)


state 96

    (11) statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .
    NEWLINE         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    NAME            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    WHILE           reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    IF              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    PASS            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S64             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S32             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S16             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S8              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U64             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U32             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U16             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U8              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    LPAR            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    FROM            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEF             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    BOOLEAN         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    STRING          reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    INTEGER         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    FLOAT           reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    HEX             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    $end            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEDENT          reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)


state 97

    (23) else_statement -> ELSE . COLON NEWLINE block
    COLON           shift and go to state 100


state 98

    (24) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE
    (25) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE else_statement
    (26) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE elif_statement
    (27) expression -> . NAME
    (28) expression -> . const
    (29) expression -> . LPAR expression RPAR
    (30) expression -> . expression EQ expression
    (31) expression -> . expression LT expression
    (32) expression -> . expression GT expression
    (33) expression -> . expression LTE expression
    (34) expression -> . expression GTE expression
    (35) expression -> . expression DIV expression
    (36) expression -> . expression MULT expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . NAME LPAR arglist RPAR
    (54) const -> . BOOLEAN
    (55) const -> . STRING
    (56) const -> . INTEGER
    (57) const -> . FLOAT
    (58) const -> . HEX
    NAME            shift and go to state 44
    LPAR            shift and go to state 21
    BOOLEAN         shift and go to state 24
    STRING          shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    HEX             shift and go to state 28

    expression                     shift and go to state 101
    const                          shift and go to state 7

state 99

    (19) chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE . block
    (20) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 84

    block                          shift and go to state 102

state 100

    (23) else_statement -> ELSE COLON . NEWLINE block
    NEWLINE         shift and go to state 103


state 101

    (24) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE
    (25) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE else_statement
    (26) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE elif_statement
    (30) expression -> expression . EQ expression
    (31) expression -> expression . LT expression
    (32) expression -> expression . GT expression
    (33) expression -> expression . LTE expression
    (34) expression -> expression . GTE expression
    (35) expression -> expression . DIV expression
    (36) expression -> expression . MULT expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . PLUS expression
    COLON           shift and go to state 104
    EQ              shift and go to state 34
    LT              shift and go to state 35
    GT              shift and go to state 36
    LTE             shift and go to state 37
    GTE             shift and go to state 38
    DIV             shift and go to state 39
    MULT            shift and go to state 40
    MINUS           shift and go to state 41
    PLUS            shift and go to state 42


state 102

    (19) chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .
    NEWLINE         reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    NAME            reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    WHILE           reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    IF              reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    PASS            reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S64             reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S32             reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S16             reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S8              reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U64             reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U32             reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U16             reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U8              reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    LPAR            reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    FROM            reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    DEF             reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    BOOLEAN         reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    STRING          reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    INTEGER         reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    FLOAT           reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    HEX             reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    $end            reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    DEDENT          reduce using rule 19 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)


state 103

    (23) else_statement -> ELSE COLON NEWLINE . block
    (20) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 84

    block                          shift and go to state 105

state 104

    (24) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE
    (25) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE else_statement
    (26) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE elif_statement
    NEWLINE         shift and go to state 106


state 105

    (23) else_statement -> ELSE COLON NEWLINE block .
    NEWLINE         reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    NAME            reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    IF              reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    PASS            reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    S64             reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    S32             reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    S16             reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    S8              reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    U64             reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    U32             reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    U16             reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    U8              reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    LPAR            reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    FROM            reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    DEF             reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    BOOLEAN         reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    STRING          reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    INTEGER         reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    FLOAT           reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    HEX             reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    $end            reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)
    DEDENT          reduce using rule 23 (else_statement -> ELSE COLON NEWLINE block .)


state 106

    (24) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE
    (25) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE else_statement
    (26) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE elif_statement
    (20) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 84

    block                          shift and go to state 107

state 107

    (24) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE
    (25) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE else_statement
    (26) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE elif_statement
    NEWLINE         shift and go to state 108


state 108

    (24) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .
    (25) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE . else_statement
    (26) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE . elif_statement
    (23) else_statement -> . ELSE COLON NEWLINE block
    (24) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE
    (25) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE else_statement
    (26) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE elif_statement
    NEWLINE         reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    NAME            reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    WHILE           reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    IF              reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    PASS            reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S64             reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S32             reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S16             reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S8              reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U64             reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U32             reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U16             reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U8              reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    LPAR            reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    FROM            reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    DEF             reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    BOOLEAN         reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    STRING          reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    INTEGER         reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    FLOAT           reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    HEX             reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    $end            reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    DEDENT          reduce using rule 24 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    ELSE            shift and go to state 97
    ELIF            shift and go to state 98

    else_statement                 shift and go to state 109
    elif_statement                 shift and go to state 110

state 109

    (25) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .
    NEWLINE         reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    NAME            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    WHILE           reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    IF              reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    PASS            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S64             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S32             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S16             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S8              reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U64             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U32             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U16             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U8              reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    LPAR            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    FROM            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    DEF             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    BOOLEAN         reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    STRING          reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    INTEGER         reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    FLOAT           reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    HEX             reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    $end            reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    DEDENT          reduce using rule 25 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)


state 110

    (26) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .
    NEWLINE         reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    NAME            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    WHILE           reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    IF              reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    PASS            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S64             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S32             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S16             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S8              reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U64             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U32             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U16             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U8              reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    LPAR            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    FROM            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEF             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    BOOLEAN         reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    STRING          reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    INTEGER         reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    FLOAT           reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    HEX             reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    $end            reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEDENT          reduce using rule 26 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)


Conflicts:

shift/reduce conflict for LPAR in state 5 resolved as shift
shift/reduce conflict for LPAR in state 44 resolved as shift
reduce/reduce conflict in state 80 resolved using rule expression -> const
rejected rule (statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]) in state 80
Rule (statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]) is never reduced