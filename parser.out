Grammar:

Rule 0     S' -> program
Rule 1     program -> statement_full program
Rule 2     program -> statement_full
Rule 3     statement_full -> statement
Rule 4     statement_full -> statement NEWLINE  [precedence=left, level=3]
Rule 5     statement -> type COLON NAME ASSIGN expression  [precedence=left, level=2]
Rule 6     statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]
Rule 7     statement -> NAME ASSIGN expression  [precedence=left, level=2]
Rule 8     statement -> RETURN
Rule 9     statement -> RETURN expression
Rule 10    statement -> WHILE expression COLON NEWLINE block  [precedence=left, level=3]
Rule 11    statement -> IF expression COLON NEWLINE block NEWLINE  [precedence=left, level=3]
Rule 12    statement -> IF expression COLON NEWLINE block NEWLINE else_statement  [precedence=left, level=3]
Rule 13    statement -> IF expression COLON NEWLINE block NEWLINE elif_statement  [precedence=left, level=3]
Rule 14    statement -> expression
Rule 15    statement -> PASS
Rule 16    statement -> map_statement
Rule 17    statement -> import_statement
Rule 18    statement -> chain_statement
Rule 19    import_statement -> FROM NAME DOT NAME IMPORT module_list
Rule 20    module_list -> NAME
Rule 21    module_list -> NAME COMMA module_list
Rule 22    map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping  [precedence=left, level=2]
Rule 23    mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR
Rule 24    mapping -> LCPAR key_value_pairs RCPAR
Rule 25    key_value_pairs -> <empty>
Rule 26    key_value_pairs -> key_value_pair
Rule 27    key_value_pairs -> key_value_pair NEWLINE  [precedence=left, level=3]
Rule 28    key_value_pairs -> key_value_pair COMMA NEWLINE key_value_pairs  [precedence=left, level=3]
Rule 29    key_value_pairs -> key_value_pair COMMA key_value_pairs
Rule 30    key_value_pair -> LPAR exprlist RPAR COLON LPAR exprlist RPAR
Rule 31    chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block  [precedence=left, level=3]
Rule 32    block -> INDENT block_statements DEDENT
Rule 33    block_statements -> statement_full block_statements
Rule 34    block_statements -> statement_full
Rule 35    else_statement -> ELSE COLON NEWLINE block  [precedence=left, level=3]
Rule 36    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE  [precedence=left, level=3]
Rule 37    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement  [precedence=left, level=3]
Rule 38    elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement  [precedence=left, level=3]
Rule 39    expression -> NAME
Rule 40    expression -> const
Rule 41    expression -> LPAR expression RPAR
Rule 42    expression -> NOT expression
Rule 43    expression -> expression OR expression
Rule 44    expression -> expression AND expression
Rule 45    expression -> expression NEQ expression  [precedence=left, level=4]
Rule 46    expression -> expression EQ expression  [precedence=left, level=4]
Rule 47    expression -> expression LT expression  [precedence=left, level=4]
Rule 48    expression -> expression GT expression  [precedence=left, level=4]
Rule 49    expression -> expression LTE expression  [precedence=left, level=4]
Rule 50    expression -> expression GTE expression  [precedence=left, level=4]
Rule 51    expression -> expression MOD expression
Rule 52    expression -> expression DIV expression  [precedence=left, level=6]
Rule 53    expression -> expression MULT expression  [precedence=left, level=6]
Rule 54    expression -> expression MINUS expression  [precedence=left, level=5]
Rule 55    expression -> expression PLUS expression  [precedence=left, level=5]
Rule 56    expression -> NAME DOT NAME LPAR exprlist RPAR
Rule 57    expression -> NAME LPAR exprlist RPAR
Rule 58    arglist -> <empty>
Rule 59    arglist -> argument
Rule 60    arglist -> argument COMMA arglist
Rule 61    argument -> type COLON NAME
Rule 62    exprlist -> <empty>
Rule 63    exprlist -> expression
Rule 64    exprlist -> expression COMMA exprlist
Rule 65    type -> S64
Rule 66    type -> S32
Rule 67    type -> S16
Rule 68    type -> S8
Rule 69    type -> U64
Rule 70    type -> U32
Rule 71    type -> U16
Rule 72    type -> U8
Rule 73    const -> BOOLEAN
Rule 74    const -> STRING
Rule 75    const -> INTEGER
Rule 76    const -> FLOAT
Rule 77    const -> HEX

Unused terminals:

    FOR
    END

Terminals, with rules where they appear:

AND                  : 44
ASSIGN               : 5 6 7 22
BOOLEAN              : 73
COLON                : 5 6 10 11 12 13 30 31 35 36 37 38 61
COMMA                : 21 28 29 60 64
DEDENT               : 23 32
DEF                  : 31
DIV                  : 52
DOT                  : 19 56
ELIF                 : 36 37 38
ELSE                 : 35
END                  : 
EQ                   : 46
FLOAT                : 76
FOR                  : 
FROM                 : 19
GT                   : 48
GTE                  : 50
HEX                  : 77
IF                   : 11 12 13
IMPORT               : 19
INDENT               : 23 32
INTEGER              : 75
LCPAR                : 23 24
LPAR                 : 30 30 31 41 56 57
LSPAR                : 22
LT                   : 47
LTE                  : 49
MINUS                : 54
MOD                  : 51
MULT                 : 53
NAME                 : 5 6 7 19 19 20 21 22 22 31 39 56 56 57 61
NEQ                  : 45
NEWLINE              : 4 10 11 11 12 12 13 13 23 23 27 28 31 35 36 36 37 37 38 38
NOT                  : 42
OR                   : 43
PASS                 : 15
PLUS                 : 55
RCPAR                : 23 24
RETURN               : 8 9
RPAR                 : 30 30 31 41 56 57
RSPAR                : 22
S16                  : 67
S32                  : 66
S64                  : 65
S8                   : 68
STRING               : 74
U16                  : 71
U32                  : 70
U64                  : 69
U8                   : 72
WHILE                : 10
error                : 

Nonterminals, with rules where they appear:

arglist              : 31 60
argument             : 59 60
block                : 10 11 12 13 31 35 36 37 38
block_statements     : 32 33
chain_statement      : 18
const                : 6 40
elif_statement       : 13 38
else_statement       : 12 37
expression           : 5 7 9 10 11 12 13 14 36 37 38 41 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 63 64
exprlist             : 30 30 56 57 64
import_statement     : 17
key_value_pair       : 26 27 28 29
key_value_pairs      : 23 24 28 29
map_statement        : 16
mapping              : 22
module_list          : 19 21
program              : 1 0
statement            : 3 4
statement_full       : 1 2 33 34
type                 : 5 6 61


state 0

    (0) S' -> . program
    (1) program -> . statement_full program
    (2) program -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . RETURN
    (9) statement -> . RETURN expression
    (10) statement -> . WHILE expression COLON NEWLINE block
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE
    (12) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (13) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (14) statement -> . expression
    (15) statement -> . PASS
    (16) statement -> . map_statement
    (17) statement -> . import_statement
    (18) statement -> . chain_statement
    (65) type -> . S64
    (66) type -> . S32
    (67) type -> . S16
    (68) type -> . S8
    (69) type -> . U64
    (70) type -> . U32
    (71) type -> . U16
    (72) type -> . U8
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (22) map_statement -> . NAME LSPAR NAME RSPAR ASSIGN mapping
    (19) import_statement -> . FROM NAME DOT NAME IMPORT module_list
    (31) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 5
    RETURN          shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    PASS            shift and go to state 11
    S64             shift and go to state 15
    S32             shift and go to state 16
    S16             shift and go to state 17
    S8              shift and go to state 18
    U64             shift and go to state 19
    U32             shift and go to state 20
    U16             shift and go to state 21
    U8              shift and go to state 22
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    FROM            shift and go to state 25
    DEF             shift and go to state 26
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    program                        shift and go to state 1
    statement_full                 shift and go to state 2
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    map_statement                  shift and go to state 12
    import_statement               shift and go to state 13
    chain_statement                shift and go to state 14

state 1

    (0) S' -> program .


state 2

    (1) program -> statement_full . program
    (2) program -> statement_full .
    (1) program -> . statement_full program
    (2) program -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . RETURN
    (9) statement -> . RETURN expression
    (10) statement -> . WHILE expression COLON NEWLINE block
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE
    (12) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (13) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (14) statement -> . expression
    (15) statement -> . PASS
    (16) statement -> . map_statement
    (17) statement -> . import_statement
    (18) statement -> . chain_statement
    (65) type -> . S64
    (66) type -> . S32
    (67) type -> . S16
    (68) type -> . S8
    (69) type -> . U64
    (70) type -> . U32
    (71) type -> . U16
    (72) type -> . U8
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (22) map_statement -> . NAME LSPAR NAME RSPAR ASSIGN mapping
    (19) import_statement -> . FROM NAME DOT NAME IMPORT module_list
    (31) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    $end            reduce using rule 2 (program -> statement_full .)
    NAME            shift and go to state 5
    RETURN          shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    PASS            shift and go to state 11
    S64             shift and go to state 15
    S32             shift and go to state 16
    S16             shift and go to state 17
    S8              shift and go to state 18
    U64             shift and go to state 19
    U32             shift and go to state 20
    U16             shift and go to state 21
    U8              shift and go to state 22
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    FROM            shift and go to state 25
    DEF             shift and go to state 26
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    statement_full                 shift and go to state 2
    program                        shift and go to state 32
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    map_statement                  shift and go to state 12
    import_statement               shift and go to state 13
    chain_statement                shift and go to state 14

state 3

    (3) statement_full -> statement .
    (4) statement_full -> statement . NEWLINE
    NAME            reduce using rule 3 (statement_full -> statement .)
    RETURN          reduce using rule 3 (statement_full -> statement .)
    WHILE           reduce using rule 3 (statement_full -> statement .)
    IF              reduce using rule 3 (statement_full -> statement .)
    PASS            reduce using rule 3 (statement_full -> statement .)
    S64             reduce using rule 3 (statement_full -> statement .)
    S32             reduce using rule 3 (statement_full -> statement .)
    S16             reduce using rule 3 (statement_full -> statement .)
    S8              reduce using rule 3 (statement_full -> statement .)
    U64             reduce using rule 3 (statement_full -> statement .)
    U32             reduce using rule 3 (statement_full -> statement .)
    U16             reduce using rule 3 (statement_full -> statement .)
    U8              reduce using rule 3 (statement_full -> statement .)
    LPAR            reduce using rule 3 (statement_full -> statement .)
    NOT             reduce using rule 3 (statement_full -> statement .)
    FROM            reduce using rule 3 (statement_full -> statement .)
    DEF             reduce using rule 3 (statement_full -> statement .)
    BOOLEAN         reduce using rule 3 (statement_full -> statement .)
    STRING          reduce using rule 3 (statement_full -> statement .)
    INTEGER         reduce using rule 3 (statement_full -> statement .)
    FLOAT           reduce using rule 3 (statement_full -> statement .)
    HEX             reduce using rule 3 (statement_full -> statement .)
    $end            reduce using rule 3 (statement_full -> statement .)
    DEDENT          reduce using rule 3 (statement_full -> statement .)
    NEWLINE         shift and go to state 33


state 4

    (5) statement -> type . COLON NAME ASSIGN expression
    (6) statement -> type . COLON NAME ASSIGN const
    COLON           shift and go to state 34


state 5

    (7) statement -> NAME . ASSIGN expression
    (39) expression -> NAME .
    (56) expression -> NAME . DOT NAME LPAR exprlist RPAR
    (57) expression -> NAME . LPAR exprlist RPAR
    (22) map_statement -> NAME . LSPAR NAME RSPAR ASSIGN mapping
  ! shift/reduce conflict for LPAR resolved as shift
    ASSIGN          shift and go to state 35
    OR              reduce using rule 39 (expression -> NAME .)
    AND             reduce using rule 39 (expression -> NAME .)
    NEQ             reduce using rule 39 (expression -> NAME .)
    EQ              reduce using rule 39 (expression -> NAME .)
    LT              reduce using rule 39 (expression -> NAME .)
    GT              reduce using rule 39 (expression -> NAME .)
    LTE             reduce using rule 39 (expression -> NAME .)
    GTE             reduce using rule 39 (expression -> NAME .)
    MOD             reduce using rule 39 (expression -> NAME .)
    DIV             reduce using rule 39 (expression -> NAME .)
    MULT            reduce using rule 39 (expression -> NAME .)
    MINUS           reduce using rule 39 (expression -> NAME .)
    PLUS            reduce using rule 39 (expression -> NAME .)
    NEWLINE         reduce using rule 39 (expression -> NAME .)
    NAME            reduce using rule 39 (expression -> NAME .)
    RETURN          reduce using rule 39 (expression -> NAME .)
    WHILE           reduce using rule 39 (expression -> NAME .)
    IF              reduce using rule 39 (expression -> NAME .)
    PASS            reduce using rule 39 (expression -> NAME .)
    S64             reduce using rule 39 (expression -> NAME .)
    S32             reduce using rule 39 (expression -> NAME .)
    S16             reduce using rule 39 (expression -> NAME .)
    S8              reduce using rule 39 (expression -> NAME .)
    U64             reduce using rule 39 (expression -> NAME .)
    U32             reduce using rule 39 (expression -> NAME .)
    U16             reduce using rule 39 (expression -> NAME .)
    U8              reduce using rule 39 (expression -> NAME .)
    NOT             reduce using rule 39 (expression -> NAME .)
    FROM            reduce using rule 39 (expression -> NAME .)
    DEF             reduce using rule 39 (expression -> NAME .)
    BOOLEAN         reduce using rule 39 (expression -> NAME .)
    STRING          reduce using rule 39 (expression -> NAME .)
    INTEGER         reduce using rule 39 (expression -> NAME .)
    FLOAT           reduce using rule 39 (expression -> NAME .)
    HEX             reduce using rule 39 (expression -> NAME .)
    $end            reduce using rule 39 (expression -> NAME .)
    DEDENT          reduce using rule 39 (expression -> NAME .)
    DOT             shift and go to state 36
    LPAR            shift and go to state 37
    LSPAR           shift and go to state 38


state 6

    (14) statement -> expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 14 (statement -> expression .)
    NAME            reduce using rule 14 (statement -> expression .)
    RETURN          reduce using rule 14 (statement -> expression .)
    WHILE           reduce using rule 14 (statement -> expression .)
    IF              reduce using rule 14 (statement -> expression .)
    PASS            reduce using rule 14 (statement -> expression .)
    S64             reduce using rule 14 (statement -> expression .)
    S32             reduce using rule 14 (statement -> expression .)
    S16             reduce using rule 14 (statement -> expression .)
    S8              reduce using rule 14 (statement -> expression .)
    U64             reduce using rule 14 (statement -> expression .)
    U32             reduce using rule 14 (statement -> expression .)
    U16             reduce using rule 14 (statement -> expression .)
    U8              reduce using rule 14 (statement -> expression .)
    LPAR            reduce using rule 14 (statement -> expression .)
    NOT             reduce using rule 14 (statement -> expression .)
    FROM            reduce using rule 14 (statement -> expression .)
    DEF             reduce using rule 14 (statement -> expression .)
    BOOLEAN         reduce using rule 14 (statement -> expression .)
    STRING          reduce using rule 14 (statement -> expression .)
    INTEGER         reduce using rule 14 (statement -> expression .)
    FLOAT           reduce using rule 14 (statement -> expression .)
    HEX             reduce using rule 14 (statement -> expression .)
    $end            reduce using rule 14 (statement -> expression .)
    DEDENT          reduce using rule 14 (statement -> expression .)
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 7

    (40) expression -> const .
    OR              reduce using rule 40 (expression -> const .)
    AND             reduce using rule 40 (expression -> const .)
    NEQ             reduce using rule 40 (expression -> const .)
    EQ              reduce using rule 40 (expression -> const .)
    LT              reduce using rule 40 (expression -> const .)
    GT              reduce using rule 40 (expression -> const .)
    LTE             reduce using rule 40 (expression -> const .)
    GTE             reduce using rule 40 (expression -> const .)
    MOD             reduce using rule 40 (expression -> const .)
    DIV             reduce using rule 40 (expression -> const .)
    MULT            reduce using rule 40 (expression -> const .)
    MINUS           reduce using rule 40 (expression -> const .)
    PLUS            reduce using rule 40 (expression -> const .)
    NEWLINE         reduce using rule 40 (expression -> const .)
    NAME            reduce using rule 40 (expression -> const .)
    RETURN          reduce using rule 40 (expression -> const .)
    WHILE           reduce using rule 40 (expression -> const .)
    IF              reduce using rule 40 (expression -> const .)
    PASS            reduce using rule 40 (expression -> const .)
    S64             reduce using rule 40 (expression -> const .)
    S32             reduce using rule 40 (expression -> const .)
    S16             reduce using rule 40 (expression -> const .)
    S8              reduce using rule 40 (expression -> const .)
    U64             reduce using rule 40 (expression -> const .)
    U32             reduce using rule 40 (expression -> const .)
    U16             reduce using rule 40 (expression -> const .)
    U8              reduce using rule 40 (expression -> const .)
    LPAR            reduce using rule 40 (expression -> const .)
    NOT             reduce using rule 40 (expression -> const .)
    FROM            reduce using rule 40 (expression -> const .)
    DEF             reduce using rule 40 (expression -> const .)
    BOOLEAN         reduce using rule 40 (expression -> const .)
    STRING          reduce using rule 40 (expression -> const .)
    INTEGER         reduce using rule 40 (expression -> const .)
    FLOAT           reduce using rule 40 (expression -> const .)
    HEX             reduce using rule 40 (expression -> const .)
    $end            reduce using rule 40 (expression -> const .)
    DEDENT          reduce using rule 40 (expression -> const .)
    COLON           reduce using rule 40 (expression -> const .)
    RPAR            reduce using rule 40 (expression -> const .)
    COMMA           reduce using rule 40 (expression -> const .)


state 8

    (8) statement -> RETURN .
    (9) statement -> RETURN . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for HEX resolved as shift
    NEWLINE         reduce using rule 8 (statement -> RETURN .)
    RETURN          reduce using rule 8 (statement -> RETURN .)
    WHILE           reduce using rule 8 (statement -> RETURN .)
    IF              reduce using rule 8 (statement -> RETURN .)
    PASS            reduce using rule 8 (statement -> RETURN .)
    S64             reduce using rule 8 (statement -> RETURN .)
    S32             reduce using rule 8 (statement -> RETURN .)
    S16             reduce using rule 8 (statement -> RETURN .)
    S8              reduce using rule 8 (statement -> RETURN .)
    U64             reduce using rule 8 (statement -> RETURN .)
    U32             reduce using rule 8 (statement -> RETURN .)
    U16             reduce using rule 8 (statement -> RETURN .)
    U8              reduce using rule 8 (statement -> RETURN .)
    FROM            reduce using rule 8 (statement -> RETURN .)
    DEF             reduce using rule 8 (statement -> RETURN .)
    $end            reduce using rule 8 (statement -> RETURN .)
    DEDENT          reduce using rule 8 (statement -> RETURN .)
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 52
    const                          shift and go to state 7

state 9

    (10) statement -> WHILE . expression COLON NEWLINE block
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 54
    const                          shift and go to state 7

state 10

    (11) statement -> IF . expression COLON NEWLINE block NEWLINE
    (12) statement -> IF . expression COLON NEWLINE block NEWLINE else_statement
    (13) statement -> IF . expression COLON NEWLINE block NEWLINE elif_statement
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 55
    const                          shift and go to state 7

state 11

    (15) statement -> PASS .
    NEWLINE         reduce using rule 15 (statement -> PASS .)
    NAME            reduce using rule 15 (statement -> PASS .)
    RETURN          reduce using rule 15 (statement -> PASS .)
    WHILE           reduce using rule 15 (statement -> PASS .)
    IF              reduce using rule 15 (statement -> PASS .)
    PASS            reduce using rule 15 (statement -> PASS .)
    S64             reduce using rule 15 (statement -> PASS .)
    S32             reduce using rule 15 (statement -> PASS .)
    S16             reduce using rule 15 (statement -> PASS .)
    S8              reduce using rule 15 (statement -> PASS .)
    U64             reduce using rule 15 (statement -> PASS .)
    U32             reduce using rule 15 (statement -> PASS .)
    U16             reduce using rule 15 (statement -> PASS .)
    U8              reduce using rule 15 (statement -> PASS .)
    LPAR            reduce using rule 15 (statement -> PASS .)
    NOT             reduce using rule 15 (statement -> PASS .)
    FROM            reduce using rule 15 (statement -> PASS .)
    DEF             reduce using rule 15 (statement -> PASS .)
    BOOLEAN         reduce using rule 15 (statement -> PASS .)
    STRING          reduce using rule 15 (statement -> PASS .)
    INTEGER         reduce using rule 15 (statement -> PASS .)
    FLOAT           reduce using rule 15 (statement -> PASS .)
    HEX             reduce using rule 15 (statement -> PASS .)
    $end            reduce using rule 15 (statement -> PASS .)
    DEDENT          reduce using rule 15 (statement -> PASS .)


state 12

    (16) statement -> map_statement .
    NEWLINE         reduce using rule 16 (statement -> map_statement .)
    NAME            reduce using rule 16 (statement -> map_statement .)
    RETURN          reduce using rule 16 (statement -> map_statement .)
    WHILE           reduce using rule 16 (statement -> map_statement .)
    IF              reduce using rule 16 (statement -> map_statement .)
    PASS            reduce using rule 16 (statement -> map_statement .)
    S64             reduce using rule 16 (statement -> map_statement .)
    S32             reduce using rule 16 (statement -> map_statement .)
    S16             reduce using rule 16 (statement -> map_statement .)
    S8              reduce using rule 16 (statement -> map_statement .)
    U64             reduce using rule 16 (statement -> map_statement .)
    U32             reduce using rule 16 (statement -> map_statement .)
    U16             reduce using rule 16 (statement -> map_statement .)
    U8              reduce using rule 16 (statement -> map_statement .)
    LPAR            reduce using rule 16 (statement -> map_statement .)
    NOT             reduce using rule 16 (statement -> map_statement .)
    FROM            reduce using rule 16 (statement -> map_statement .)
    DEF             reduce using rule 16 (statement -> map_statement .)
    BOOLEAN         reduce using rule 16 (statement -> map_statement .)
    STRING          reduce using rule 16 (statement -> map_statement .)
    INTEGER         reduce using rule 16 (statement -> map_statement .)
    FLOAT           reduce using rule 16 (statement -> map_statement .)
    HEX             reduce using rule 16 (statement -> map_statement .)
    $end            reduce using rule 16 (statement -> map_statement .)
    DEDENT          reduce using rule 16 (statement -> map_statement .)


state 13

    (17) statement -> import_statement .
    NEWLINE         reduce using rule 17 (statement -> import_statement .)
    NAME            reduce using rule 17 (statement -> import_statement .)
    RETURN          reduce using rule 17 (statement -> import_statement .)
    WHILE           reduce using rule 17 (statement -> import_statement .)
    IF              reduce using rule 17 (statement -> import_statement .)
    PASS            reduce using rule 17 (statement -> import_statement .)
    S64             reduce using rule 17 (statement -> import_statement .)
    S32             reduce using rule 17 (statement -> import_statement .)
    S16             reduce using rule 17 (statement -> import_statement .)
    S8              reduce using rule 17 (statement -> import_statement .)
    U64             reduce using rule 17 (statement -> import_statement .)
    U32             reduce using rule 17 (statement -> import_statement .)
    U16             reduce using rule 17 (statement -> import_statement .)
    U8              reduce using rule 17 (statement -> import_statement .)
    LPAR            reduce using rule 17 (statement -> import_statement .)
    NOT             reduce using rule 17 (statement -> import_statement .)
    FROM            reduce using rule 17 (statement -> import_statement .)
    DEF             reduce using rule 17 (statement -> import_statement .)
    BOOLEAN         reduce using rule 17 (statement -> import_statement .)
    STRING          reduce using rule 17 (statement -> import_statement .)
    INTEGER         reduce using rule 17 (statement -> import_statement .)
    FLOAT           reduce using rule 17 (statement -> import_statement .)
    HEX             reduce using rule 17 (statement -> import_statement .)
    $end            reduce using rule 17 (statement -> import_statement .)
    DEDENT          reduce using rule 17 (statement -> import_statement .)


state 14

    (18) statement -> chain_statement .
    NEWLINE         reduce using rule 18 (statement -> chain_statement .)
    NAME            reduce using rule 18 (statement -> chain_statement .)
    RETURN          reduce using rule 18 (statement -> chain_statement .)
    WHILE           reduce using rule 18 (statement -> chain_statement .)
    IF              reduce using rule 18 (statement -> chain_statement .)
    PASS            reduce using rule 18 (statement -> chain_statement .)
    S64             reduce using rule 18 (statement -> chain_statement .)
    S32             reduce using rule 18 (statement -> chain_statement .)
    S16             reduce using rule 18 (statement -> chain_statement .)
    S8              reduce using rule 18 (statement -> chain_statement .)
    U64             reduce using rule 18 (statement -> chain_statement .)
    U32             reduce using rule 18 (statement -> chain_statement .)
    U16             reduce using rule 18 (statement -> chain_statement .)
    U8              reduce using rule 18 (statement -> chain_statement .)
    LPAR            reduce using rule 18 (statement -> chain_statement .)
    NOT             reduce using rule 18 (statement -> chain_statement .)
    FROM            reduce using rule 18 (statement -> chain_statement .)
    DEF             reduce using rule 18 (statement -> chain_statement .)
    BOOLEAN         reduce using rule 18 (statement -> chain_statement .)
    STRING          reduce using rule 18 (statement -> chain_statement .)
    INTEGER         reduce using rule 18 (statement -> chain_statement .)
    FLOAT           reduce using rule 18 (statement -> chain_statement .)
    HEX             reduce using rule 18 (statement -> chain_statement .)
    $end            reduce using rule 18 (statement -> chain_statement .)
    DEDENT          reduce using rule 18 (statement -> chain_statement .)


state 15

    (65) type -> S64 .
    COLON           reduce using rule 65 (type -> S64 .)


state 16

    (66) type -> S32 .
    COLON           reduce using rule 66 (type -> S32 .)


state 17

    (67) type -> S16 .
    COLON           reduce using rule 67 (type -> S16 .)


state 18

    (68) type -> S8 .
    COLON           reduce using rule 68 (type -> S8 .)


state 19

    (69) type -> U64 .
    COLON           reduce using rule 69 (type -> U64 .)


state 20

    (70) type -> U32 .
    COLON           reduce using rule 70 (type -> U32 .)


state 21

    (71) type -> U16 .
    COLON           reduce using rule 71 (type -> U16 .)


state 22

    (72) type -> U8 .
    COLON           reduce using rule 72 (type -> U8 .)


state 23

    (41) expression -> LPAR . expression RPAR
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 56
    const                          shift and go to state 7

state 24

    (42) expression -> NOT . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 57
    const                          shift and go to state 7

state 25

    (19) import_statement -> FROM . NAME DOT NAME IMPORT module_list
    NAME            shift and go to state 58


state 26

    (31) chain_statement -> DEF . NAME LPAR arglist RPAR COLON NEWLINE block
    NAME            shift and go to state 59


state 27

    (73) const -> BOOLEAN .
    OR              reduce using rule 73 (const -> BOOLEAN .)
    AND             reduce using rule 73 (const -> BOOLEAN .)
    NEQ             reduce using rule 73 (const -> BOOLEAN .)
    EQ              reduce using rule 73 (const -> BOOLEAN .)
    LT              reduce using rule 73 (const -> BOOLEAN .)
    GT              reduce using rule 73 (const -> BOOLEAN .)
    LTE             reduce using rule 73 (const -> BOOLEAN .)
    GTE             reduce using rule 73 (const -> BOOLEAN .)
    MOD             reduce using rule 73 (const -> BOOLEAN .)
    DIV             reduce using rule 73 (const -> BOOLEAN .)
    MULT            reduce using rule 73 (const -> BOOLEAN .)
    MINUS           reduce using rule 73 (const -> BOOLEAN .)
    PLUS            reduce using rule 73 (const -> BOOLEAN .)
    NEWLINE         reduce using rule 73 (const -> BOOLEAN .)
    NAME            reduce using rule 73 (const -> BOOLEAN .)
    RETURN          reduce using rule 73 (const -> BOOLEAN .)
    WHILE           reduce using rule 73 (const -> BOOLEAN .)
    IF              reduce using rule 73 (const -> BOOLEAN .)
    PASS            reduce using rule 73 (const -> BOOLEAN .)
    S64             reduce using rule 73 (const -> BOOLEAN .)
    S32             reduce using rule 73 (const -> BOOLEAN .)
    S16             reduce using rule 73 (const -> BOOLEAN .)
    S8              reduce using rule 73 (const -> BOOLEAN .)
    U64             reduce using rule 73 (const -> BOOLEAN .)
    U32             reduce using rule 73 (const -> BOOLEAN .)
    U16             reduce using rule 73 (const -> BOOLEAN .)
    U8              reduce using rule 73 (const -> BOOLEAN .)
    LPAR            reduce using rule 73 (const -> BOOLEAN .)
    NOT             reduce using rule 73 (const -> BOOLEAN .)
    FROM            reduce using rule 73 (const -> BOOLEAN .)
    DEF             reduce using rule 73 (const -> BOOLEAN .)
    BOOLEAN         reduce using rule 73 (const -> BOOLEAN .)
    STRING          reduce using rule 73 (const -> BOOLEAN .)
    INTEGER         reduce using rule 73 (const -> BOOLEAN .)
    FLOAT           reduce using rule 73 (const -> BOOLEAN .)
    HEX             reduce using rule 73 (const -> BOOLEAN .)
    $end            reduce using rule 73 (const -> BOOLEAN .)
    DEDENT          reduce using rule 73 (const -> BOOLEAN .)
    COLON           reduce using rule 73 (const -> BOOLEAN .)
    RPAR            reduce using rule 73 (const -> BOOLEAN .)
    COMMA           reduce using rule 73 (const -> BOOLEAN .)


state 28

    (74) const -> STRING .
    OR              reduce using rule 74 (const -> STRING .)
    AND             reduce using rule 74 (const -> STRING .)
    NEQ             reduce using rule 74 (const -> STRING .)
    EQ              reduce using rule 74 (const -> STRING .)
    LT              reduce using rule 74 (const -> STRING .)
    GT              reduce using rule 74 (const -> STRING .)
    LTE             reduce using rule 74 (const -> STRING .)
    GTE             reduce using rule 74 (const -> STRING .)
    MOD             reduce using rule 74 (const -> STRING .)
    DIV             reduce using rule 74 (const -> STRING .)
    MULT            reduce using rule 74 (const -> STRING .)
    MINUS           reduce using rule 74 (const -> STRING .)
    PLUS            reduce using rule 74 (const -> STRING .)
    NEWLINE         reduce using rule 74 (const -> STRING .)
    NAME            reduce using rule 74 (const -> STRING .)
    RETURN          reduce using rule 74 (const -> STRING .)
    WHILE           reduce using rule 74 (const -> STRING .)
    IF              reduce using rule 74 (const -> STRING .)
    PASS            reduce using rule 74 (const -> STRING .)
    S64             reduce using rule 74 (const -> STRING .)
    S32             reduce using rule 74 (const -> STRING .)
    S16             reduce using rule 74 (const -> STRING .)
    S8              reduce using rule 74 (const -> STRING .)
    U64             reduce using rule 74 (const -> STRING .)
    U32             reduce using rule 74 (const -> STRING .)
    U16             reduce using rule 74 (const -> STRING .)
    U8              reduce using rule 74 (const -> STRING .)
    LPAR            reduce using rule 74 (const -> STRING .)
    NOT             reduce using rule 74 (const -> STRING .)
    FROM            reduce using rule 74 (const -> STRING .)
    DEF             reduce using rule 74 (const -> STRING .)
    BOOLEAN         reduce using rule 74 (const -> STRING .)
    STRING          reduce using rule 74 (const -> STRING .)
    INTEGER         reduce using rule 74 (const -> STRING .)
    FLOAT           reduce using rule 74 (const -> STRING .)
    HEX             reduce using rule 74 (const -> STRING .)
    $end            reduce using rule 74 (const -> STRING .)
    DEDENT          reduce using rule 74 (const -> STRING .)
    COLON           reduce using rule 74 (const -> STRING .)
    RPAR            reduce using rule 74 (const -> STRING .)
    COMMA           reduce using rule 74 (const -> STRING .)


state 29

    (75) const -> INTEGER .
    OR              reduce using rule 75 (const -> INTEGER .)
    AND             reduce using rule 75 (const -> INTEGER .)
    NEQ             reduce using rule 75 (const -> INTEGER .)
    EQ              reduce using rule 75 (const -> INTEGER .)
    LT              reduce using rule 75 (const -> INTEGER .)
    GT              reduce using rule 75 (const -> INTEGER .)
    LTE             reduce using rule 75 (const -> INTEGER .)
    GTE             reduce using rule 75 (const -> INTEGER .)
    MOD             reduce using rule 75 (const -> INTEGER .)
    DIV             reduce using rule 75 (const -> INTEGER .)
    MULT            reduce using rule 75 (const -> INTEGER .)
    MINUS           reduce using rule 75 (const -> INTEGER .)
    PLUS            reduce using rule 75 (const -> INTEGER .)
    NEWLINE         reduce using rule 75 (const -> INTEGER .)
    NAME            reduce using rule 75 (const -> INTEGER .)
    RETURN          reduce using rule 75 (const -> INTEGER .)
    WHILE           reduce using rule 75 (const -> INTEGER .)
    IF              reduce using rule 75 (const -> INTEGER .)
    PASS            reduce using rule 75 (const -> INTEGER .)
    S64             reduce using rule 75 (const -> INTEGER .)
    S32             reduce using rule 75 (const -> INTEGER .)
    S16             reduce using rule 75 (const -> INTEGER .)
    S8              reduce using rule 75 (const -> INTEGER .)
    U64             reduce using rule 75 (const -> INTEGER .)
    U32             reduce using rule 75 (const -> INTEGER .)
    U16             reduce using rule 75 (const -> INTEGER .)
    U8              reduce using rule 75 (const -> INTEGER .)
    LPAR            reduce using rule 75 (const -> INTEGER .)
    NOT             reduce using rule 75 (const -> INTEGER .)
    FROM            reduce using rule 75 (const -> INTEGER .)
    DEF             reduce using rule 75 (const -> INTEGER .)
    BOOLEAN         reduce using rule 75 (const -> INTEGER .)
    STRING          reduce using rule 75 (const -> INTEGER .)
    INTEGER         reduce using rule 75 (const -> INTEGER .)
    FLOAT           reduce using rule 75 (const -> INTEGER .)
    HEX             reduce using rule 75 (const -> INTEGER .)
    $end            reduce using rule 75 (const -> INTEGER .)
    DEDENT          reduce using rule 75 (const -> INTEGER .)
    COLON           reduce using rule 75 (const -> INTEGER .)
    RPAR            reduce using rule 75 (const -> INTEGER .)
    COMMA           reduce using rule 75 (const -> INTEGER .)


state 30

    (76) const -> FLOAT .
    OR              reduce using rule 76 (const -> FLOAT .)
    AND             reduce using rule 76 (const -> FLOAT .)
    NEQ             reduce using rule 76 (const -> FLOAT .)
    EQ              reduce using rule 76 (const -> FLOAT .)
    LT              reduce using rule 76 (const -> FLOAT .)
    GT              reduce using rule 76 (const -> FLOAT .)
    LTE             reduce using rule 76 (const -> FLOAT .)
    GTE             reduce using rule 76 (const -> FLOAT .)
    MOD             reduce using rule 76 (const -> FLOAT .)
    DIV             reduce using rule 76 (const -> FLOAT .)
    MULT            reduce using rule 76 (const -> FLOAT .)
    MINUS           reduce using rule 76 (const -> FLOAT .)
    PLUS            reduce using rule 76 (const -> FLOAT .)
    NEWLINE         reduce using rule 76 (const -> FLOAT .)
    NAME            reduce using rule 76 (const -> FLOAT .)
    RETURN          reduce using rule 76 (const -> FLOAT .)
    WHILE           reduce using rule 76 (const -> FLOAT .)
    IF              reduce using rule 76 (const -> FLOAT .)
    PASS            reduce using rule 76 (const -> FLOAT .)
    S64             reduce using rule 76 (const -> FLOAT .)
    S32             reduce using rule 76 (const -> FLOAT .)
    S16             reduce using rule 76 (const -> FLOAT .)
    S8              reduce using rule 76 (const -> FLOAT .)
    U64             reduce using rule 76 (const -> FLOAT .)
    U32             reduce using rule 76 (const -> FLOAT .)
    U16             reduce using rule 76 (const -> FLOAT .)
    U8              reduce using rule 76 (const -> FLOAT .)
    LPAR            reduce using rule 76 (const -> FLOAT .)
    NOT             reduce using rule 76 (const -> FLOAT .)
    FROM            reduce using rule 76 (const -> FLOAT .)
    DEF             reduce using rule 76 (const -> FLOAT .)
    BOOLEAN         reduce using rule 76 (const -> FLOAT .)
    STRING          reduce using rule 76 (const -> FLOAT .)
    INTEGER         reduce using rule 76 (const -> FLOAT .)
    FLOAT           reduce using rule 76 (const -> FLOAT .)
    HEX             reduce using rule 76 (const -> FLOAT .)
    $end            reduce using rule 76 (const -> FLOAT .)
    DEDENT          reduce using rule 76 (const -> FLOAT .)
    COLON           reduce using rule 76 (const -> FLOAT .)
    RPAR            reduce using rule 76 (const -> FLOAT .)
    COMMA           reduce using rule 76 (const -> FLOAT .)


state 31

    (77) const -> HEX .
    OR              reduce using rule 77 (const -> HEX .)
    AND             reduce using rule 77 (const -> HEX .)
    NEQ             reduce using rule 77 (const -> HEX .)
    EQ              reduce using rule 77 (const -> HEX .)
    LT              reduce using rule 77 (const -> HEX .)
    GT              reduce using rule 77 (const -> HEX .)
    LTE             reduce using rule 77 (const -> HEX .)
    GTE             reduce using rule 77 (const -> HEX .)
    MOD             reduce using rule 77 (const -> HEX .)
    DIV             reduce using rule 77 (const -> HEX .)
    MULT            reduce using rule 77 (const -> HEX .)
    MINUS           reduce using rule 77 (const -> HEX .)
    PLUS            reduce using rule 77 (const -> HEX .)
    NEWLINE         reduce using rule 77 (const -> HEX .)
    NAME            reduce using rule 77 (const -> HEX .)
    RETURN          reduce using rule 77 (const -> HEX .)
    WHILE           reduce using rule 77 (const -> HEX .)
    IF              reduce using rule 77 (const -> HEX .)
    PASS            reduce using rule 77 (const -> HEX .)
    S64             reduce using rule 77 (const -> HEX .)
    S32             reduce using rule 77 (const -> HEX .)
    S16             reduce using rule 77 (const -> HEX .)
    S8              reduce using rule 77 (const -> HEX .)
    U64             reduce using rule 77 (const -> HEX .)
    U32             reduce using rule 77 (const -> HEX .)
    U16             reduce using rule 77 (const -> HEX .)
    U8              reduce using rule 77 (const -> HEX .)
    LPAR            reduce using rule 77 (const -> HEX .)
    NOT             reduce using rule 77 (const -> HEX .)
    FROM            reduce using rule 77 (const -> HEX .)
    DEF             reduce using rule 77 (const -> HEX .)
    BOOLEAN         reduce using rule 77 (const -> HEX .)
    STRING          reduce using rule 77 (const -> HEX .)
    INTEGER         reduce using rule 77 (const -> HEX .)
    FLOAT           reduce using rule 77 (const -> HEX .)
    HEX             reduce using rule 77 (const -> HEX .)
    $end            reduce using rule 77 (const -> HEX .)
    DEDENT          reduce using rule 77 (const -> HEX .)
    COLON           reduce using rule 77 (const -> HEX .)
    RPAR            reduce using rule 77 (const -> HEX .)
    COMMA           reduce using rule 77 (const -> HEX .)


state 32

    (1) program -> statement_full program .
    $end            reduce using rule 1 (program -> statement_full program .)


state 33

    (4) statement_full -> statement NEWLINE .
    NAME            reduce using rule 4 (statement_full -> statement NEWLINE .)
    RETURN          reduce using rule 4 (statement_full -> statement NEWLINE .)
    WHILE           reduce using rule 4 (statement_full -> statement NEWLINE .)
    IF              reduce using rule 4 (statement_full -> statement NEWLINE .)
    PASS            reduce using rule 4 (statement_full -> statement NEWLINE .)
    S64             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S32             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S16             reduce using rule 4 (statement_full -> statement NEWLINE .)
    S8              reduce using rule 4 (statement_full -> statement NEWLINE .)
    U64             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U32             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U16             reduce using rule 4 (statement_full -> statement NEWLINE .)
    U8              reduce using rule 4 (statement_full -> statement NEWLINE .)
    LPAR            reduce using rule 4 (statement_full -> statement NEWLINE .)
    NOT             reduce using rule 4 (statement_full -> statement NEWLINE .)
    FROM            reduce using rule 4 (statement_full -> statement NEWLINE .)
    DEF             reduce using rule 4 (statement_full -> statement NEWLINE .)
    BOOLEAN         reduce using rule 4 (statement_full -> statement NEWLINE .)
    STRING          reduce using rule 4 (statement_full -> statement NEWLINE .)
    INTEGER         reduce using rule 4 (statement_full -> statement NEWLINE .)
    FLOAT           reduce using rule 4 (statement_full -> statement NEWLINE .)
    HEX             reduce using rule 4 (statement_full -> statement NEWLINE .)
    $end            reduce using rule 4 (statement_full -> statement NEWLINE .)
    DEDENT          reduce using rule 4 (statement_full -> statement NEWLINE .)


state 34

    (5) statement -> type COLON . NAME ASSIGN expression
    (6) statement -> type COLON . NAME ASSIGN const
    NAME            shift and go to state 60


state 35

    (7) statement -> NAME ASSIGN . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 61
    const                          shift and go to state 7

state 36

    (56) expression -> NAME DOT . NAME LPAR exprlist RPAR
    NAME            shift and go to state 62


state 37

    (57) expression -> NAME LPAR . exprlist RPAR
    (62) exprlist -> .
    (63) exprlist -> . expression
    (64) exprlist -> . expression COMMA exprlist
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    RPAR            reduce using rule 62 (exprlist -> .)
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    exprlist                       shift and go to state 63
    expression                     shift and go to state 64
    const                          shift and go to state 7

state 38

    (22) map_statement -> NAME LSPAR . NAME RSPAR ASSIGN mapping
    NAME            shift and go to state 65


state 39

    (43) expression -> expression OR . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 66
    const                          shift and go to state 7

state 40

    (44) expression -> expression AND . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 67
    const                          shift and go to state 7

state 41

    (45) expression -> expression NEQ . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 68
    const                          shift and go to state 7

state 42

    (46) expression -> expression EQ . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 69
    const                          shift and go to state 7

state 43

    (47) expression -> expression LT . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 70
    const                          shift and go to state 7

state 44

    (48) expression -> expression GT . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 71
    const                          shift and go to state 7

state 45

    (49) expression -> expression LTE . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 72
    const                          shift and go to state 7

state 46

    (50) expression -> expression GTE . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 73
    const                          shift and go to state 7

state 47

    (51) expression -> expression MOD . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 74
    const                          shift and go to state 7

state 48

    (52) expression -> expression DIV . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 75
    const                          shift and go to state 7

state 49

    (53) expression -> expression MULT . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 76
    const                          shift and go to state 7

state 50

    (54) expression -> expression MINUS . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 77
    const                          shift and go to state 7

state 51

    (55) expression -> expression PLUS . expression
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 78
    const                          shift and go to state 7

state 52

    (9) statement -> RETURN expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 9 (statement -> RETURN expression .)
    NAME            reduce using rule 9 (statement -> RETURN expression .)
    RETURN          reduce using rule 9 (statement -> RETURN expression .)
    WHILE           reduce using rule 9 (statement -> RETURN expression .)
    IF              reduce using rule 9 (statement -> RETURN expression .)
    PASS            reduce using rule 9 (statement -> RETURN expression .)
    S64             reduce using rule 9 (statement -> RETURN expression .)
    S32             reduce using rule 9 (statement -> RETURN expression .)
    S16             reduce using rule 9 (statement -> RETURN expression .)
    S8              reduce using rule 9 (statement -> RETURN expression .)
    U64             reduce using rule 9 (statement -> RETURN expression .)
    U32             reduce using rule 9 (statement -> RETURN expression .)
    U16             reduce using rule 9 (statement -> RETURN expression .)
    U8              reduce using rule 9 (statement -> RETURN expression .)
    LPAR            reduce using rule 9 (statement -> RETURN expression .)
    NOT             reduce using rule 9 (statement -> RETURN expression .)
    FROM            reduce using rule 9 (statement -> RETURN expression .)
    DEF             reduce using rule 9 (statement -> RETURN expression .)
    BOOLEAN         reduce using rule 9 (statement -> RETURN expression .)
    STRING          reduce using rule 9 (statement -> RETURN expression .)
    INTEGER         reduce using rule 9 (statement -> RETURN expression .)
    FLOAT           reduce using rule 9 (statement -> RETURN expression .)
    HEX             reduce using rule 9 (statement -> RETURN expression .)
    $end            reduce using rule 9 (statement -> RETURN expression .)
    DEDENT          reduce using rule 9 (statement -> RETURN expression .)
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 53

    (39) expression -> NAME .
    (56) expression -> NAME . DOT NAME LPAR exprlist RPAR
    (57) expression -> NAME . LPAR exprlist RPAR
  ! shift/reduce conflict for LPAR resolved as shift
    OR              reduce using rule 39 (expression -> NAME .)
    AND             reduce using rule 39 (expression -> NAME .)
    NEQ             reduce using rule 39 (expression -> NAME .)
    EQ              reduce using rule 39 (expression -> NAME .)
    LT              reduce using rule 39 (expression -> NAME .)
    GT              reduce using rule 39 (expression -> NAME .)
    LTE             reduce using rule 39 (expression -> NAME .)
    GTE             reduce using rule 39 (expression -> NAME .)
    MOD             reduce using rule 39 (expression -> NAME .)
    DIV             reduce using rule 39 (expression -> NAME .)
    MULT            reduce using rule 39 (expression -> NAME .)
    MINUS           reduce using rule 39 (expression -> NAME .)
    PLUS            reduce using rule 39 (expression -> NAME .)
    NEWLINE         reduce using rule 39 (expression -> NAME .)
    NAME            reduce using rule 39 (expression -> NAME .)
    RETURN          reduce using rule 39 (expression -> NAME .)
    WHILE           reduce using rule 39 (expression -> NAME .)
    IF              reduce using rule 39 (expression -> NAME .)
    PASS            reduce using rule 39 (expression -> NAME .)
    S64             reduce using rule 39 (expression -> NAME .)
    S32             reduce using rule 39 (expression -> NAME .)
    S16             reduce using rule 39 (expression -> NAME .)
    S8              reduce using rule 39 (expression -> NAME .)
    U64             reduce using rule 39 (expression -> NAME .)
    U32             reduce using rule 39 (expression -> NAME .)
    U16             reduce using rule 39 (expression -> NAME .)
    U8              reduce using rule 39 (expression -> NAME .)
    NOT             reduce using rule 39 (expression -> NAME .)
    FROM            reduce using rule 39 (expression -> NAME .)
    DEF             reduce using rule 39 (expression -> NAME .)
    BOOLEAN         reduce using rule 39 (expression -> NAME .)
    STRING          reduce using rule 39 (expression -> NAME .)
    INTEGER         reduce using rule 39 (expression -> NAME .)
    FLOAT           reduce using rule 39 (expression -> NAME .)
    HEX             reduce using rule 39 (expression -> NAME .)
    $end            reduce using rule 39 (expression -> NAME .)
    DEDENT          reduce using rule 39 (expression -> NAME .)
    COLON           reduce using rule 39 (expression -> NAME .)
    RPAR            reduce using rule 39 (expression -> NAME .)
    COMMA           reduce using rule 39 (expression -> NAME .)
    DOT             shift and go to state 36
    LPAR            shift and go to state 37


state 54

    (10) statement -> WHILE expression . COLON NEWLINE block
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    COLON           shift and go to state 79
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 55

    (11) statement -> IF expression . COLON NEWLINE block NEWLINE
    (12) statement -> IF expression . COLON NEWLINE block NEWLINE else_statement
    (13) statement -> IF expression . COLON NEWLINE block NEWLINE elif_statement
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    COLON           shift and go to state 80
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 56

    (41) expression -> LPAR expression . RPAR
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    RPAR            shift and go to state 81
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 57

    (42) expression -> NOT expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 42 (expression -> NOT expression .)
    NAME            reduce using rule 42 (expression -> NOT expression .)
    RETURN          reduce using rule 42 (expression -> NOT expression .)
    WHILE           reduce using rule 42 (expression -> NOT expression .)
    IF              reduce using rule 42 (expression -> NOT expression .)
    PASS            reduce using rule 42 (expression -> NOT expression .)
    S64             reduce using rule 42 (expression -> NOT expression .)
    S32             reduce using rule 42 (expression -> NOT expression .)
    S16             reduce using rule 42 (expression -> NOT expression .)
    S8              reduce using rule 42 (expression -> NOT expression .)
    U64             reduce using rule 42 (expression -> NOT expression .)
    U32             reduce using rule 42 (expression -> NOT expression .)
    U16             reduce using rule 42 (expression -> NOT expression .)
    U8              reduce using rule 42 (expression -> NOT expression .)
    LPAR            reduce using rule 42 (expression -> NOT expression .)
    NOT             reduce using rule 42 (expression -> NOT expression .)
    FROM            reduce using rule 42 (expression -> NOT expression .)
    DEF             reduce using rule 42 (expression -> NOT expression .)
    BOOLEAN         reduce using rule 42 (expression -> NOT expression .)
    STRING          reduce using rule 42 (expression -> NOT expression .)
    INTEGER         reduce using rule 42 (expression -> NOT expression .)
    FLOAT           reduce using rule 42 (expression -> NOT expression .)
    HEX             reduce using rule 42 (expression -> NOT expression .)
    $end            reduce using rule 42 (expression -> NOT expression .)
    DEDENT          reduce using rule 42 (expression -> NOT expression .)
    COLON           reduce using rule 42 (expression -> NOT expression .)
    RPAR            reduce using rule 42 (expression -> NOT expression .)
    COMMA           reduce using rule 42 (expression -> NOT expression .)
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 58

    (19) import_statement -> FROM NAME . DOT NAME IMPORT module_list
    DOT             shift and go to state 82


state 59

    (31) chain_statement -> DEF NAME . LPAR arglist RPAR COLON NEWLINE block
    LPAR            shift and go to state 83


state 60

    (5) statement -> type COLON NAME . ASSIGN expression
    (6) statement -> type COLON NAME . ASSIGN const
    ASSIGN          shift and go to state 84


state 61

    (7) statement -> NAME ASSIGN expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    NAME            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    RETURN          reduce using rule 7 (statement -> NAME ASSIGN expression .)
    WHILE           reduce using rule 7 (statement -> NAME ASSIGN expression .)
    IF              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    PASS            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S64             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S32             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S16             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    S8              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U64             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U32             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U16             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    U8              reduce using rule 7 (statement -> NAME ASSIGN expression .)
    LPAR            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    NOT             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    FROM            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    DEF             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    BOOLEAN         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    STRING          reduce using rule 7 (statement -> NAME ASSIGN expression .)
    INTEGER         reduce using rule 7 (statement -> NAME ASSIGN expression .)
    FLOAT           reduce using rule 7 (statement -> NAME ASSIGN expression .)
    HEX             reduce using rule 7 (statement -> NAME ASSIGN expression .)
    $end            reduce using rule 7 (statement -> NAME ASSIGN expression .)
    DEDENT          reduce using rule 7 (statement -> NAME ASSIGN expression .)
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 62

    (56) expression -> NAME DOT NAME . LPAR exprlist RPAR
    LPAR            shift and go to state 85


state 63

    (57) expression -> NAME LPAR exprlist . RPAR
    RPAR            shift and go to state 86


state 64

    (63) exprlist -> expression .
    (64) exprlist -> expression . COMMA exprlist
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    RPAR            reduce using rule 63 (exprlist -> expression .)
    COMMA           shift and go to state 87
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 65

    (22) map_statement -> NAME LSPAR NAME . RSPAR ASSIGN mapping
    RSPAR           shift and go to state 88


state 66

    (43) expression -> expression OR expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 43 (expression -> expression OR expression .)
    NAME            reduce using rule 43 (expression -> expression OR expression .)
    RETURN          reduce using rule 43 (expression -> expression OR expression .)
    WHILE           reduce using rule 43 (expression -> expression OR expression .)
    IF              reduce using rule 43 (expression -> expression OR expression .)
    PASS            reduce using rule 43 (expression -> expression OR expression .)
    S64             reduce using rule 43 (expression -> expression OR expression .)
    S32             reduce using rule 43 (expression -> expression OR expression .)
    S16             reduce using rule 43 (expression -> expression OR expression .)
    S8              reduce using rule 43 (expression -> expression OR expression .)
    U64             reduce using rule 43 (expression -> expression OR expression .)
    U32             reduce using rule 43 (expression -> expression OR expression .)
    U16             reduce using rule 43 (expression -> expression OR expression .)
    U8              reduce using rule 43 (expression -> expression OR expression .)
    LPAR            reduce using rule 43 (expression -> expression OR expression .)
    NOT             reduce using rule 43 (expression -> expression OR expression .)
    FROM            reduce using rule 43 (expression -> expression OR expression .)
    DEF             reduce using rule 43 (expression -> expression OR expression .)
    BOOLEAN         reduce using rule 43 (expression -> expression OR expression .)
    STRING          reduce using rule 43 (expression -> expression OR expression .)
    INTEGER         reduce using rule 43 (expression -> expression OR expression .)
    FLOAT           reduce using rule 43 (expression -> expression OR expression .)
    HEX             reduce using rule 43 (expression -> expression OR expression .)
    $end            reduce using rule 43 (expression -> expression OR expression .)
    DEDENT          reduce using rule 43 (expression -> expression OR expression .)
    COLON           reduce using rule 43 (expression -> expression OR expression .)
    RPAR            reduce using rule 43 (expression -> expression OR expression .)
    COMMA           reduce using rule 43 (expression -> expression OR expression .)
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 67

    (44) expression -> expression AND expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 44 (expression -> expression AND expression .)
    NAME            reduce using rule 44 (expression -> expression AND expression .)
    RETURN          reduce using rule 44 (expression -> expression AND expression .)
    WHILE           reduce using rule 44 (expression -> expression AND expression .)
    IF              reduce using rule 44 (expression -> expression AND expression .)
    PASS            reduce using rule 44 (expression -> expression AND expression .)
    S64             reduce using rule 44 (expression -> expression AND expression .)
    S32             reduce using rule 44 (expression -> expression AND expression .)
    S16             reduce using rule 44 (expression -> expression AND expression .)
    S8              reduce using rule 44 (expression -> expression AND expression .)
    U64             reduce using rule 44 (expression -> expression AND expression .)
    U32             reduce using rule 44 (expression -> expression AND expression .)
    U16             reduce using rule 44 (expression -> expression AND expression .)
    U8              reduce using rule 44 (expression -> expression AND expression .)
    LPAR            reduce using rule 44 (expression -> expression AND expression .)
    NOT             reduce using rule 44 (expression -> expression AND expression .)
    FROM            reduce using rule 44 (expression -> expression AND expression .)
    DEF             reduce using rule 44 (expression -> expression AND expression .)
    BOOLEAN         reduce using rule 44 (expression -> expression AND expression .)
    STRING          reduce using rule 44 (expression -> expression AND expression .)
    INTEGER         reduce using rule 44 (expression -> expression AND expression .)
    FLOAT           reduce using rule 44 (expression -> expression AND expression .)
    HEX             reduce using rule 44 (expression -> expression AND expression .)
    $end            reduce using rule 44 (expression -> expression AND expression .)
    DEDENT          reduce using rule 44 (expression -> expression AND expression .)
    COLON           reduce using rule 44 (expression -> expression AND expression .)
    RPAR            reduce using rule 44 (expression -> expression AND expression .)
    COMMA           reduce using rule 44 (expression -> expression AND expression .)
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 68

    (45) expression -> expression NEQ expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 45 (expression -> expression NEQ expression .)
    AND             reduce using rule 45 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 45 (expression -> expression NEQ expression .)
    EQ              reduce using rule 45 (expression -> expression NEQ expression .)
    LT              reduce using rule 45 (expression -> expression NEQ expression .)
    GT              reduce using rule 45 (expression -> expression NEQ expression .)
    LTE             reduce using rule 45 (expression -> expression NEQ expression .)
    GTE             reduce using rule 45 (expression -> expression NEQ expression .)
    MOD             reduce using rule 45 (expression -> expression NEQ expression .)
    NEWLINE         reduce using rule 45 (expression -> expression NEQ expression .)
    NAME            reduce using rule 45 (expression -> expression NEQ expression .)
    RETURN          reduce using rule 45 (expression -> expression NEQ expression .)
    WHILE           reduce using rule 45 (expression -> expression NEQ expression .)
    IF              reduce using rule 45 (expression -> expression NEQ expression .)
    PASS            reduce using rule 45 (expression -> expression NEQ expression .)
    S64             reduce using rule 45 (expression -> expression NEQ expression .)
    S32             reduce using rule 45 (expression -> expression NEQ expression .)
    S16             reduce using rule 45 (expression -> expression NEQ expression .)
    S8              reduce using rule 45 (expression -> expression NEQ expression .)
    U64             reduce using rule 45 (expression -> expression NEQ expression .)
    U32             reduce using rule 45 (expression -> expression NEQ expression .)
    U16             reduce using rule 45 (expression -> expression NEQ expression .)
    U8              reduce using rule 45 (expression -> expression NEQ expression .)
    LPAR            reduce using rule 45 (expression -> expression NEQ expression .)
    NOT             reduce using rule 45 (expression -> expression NEQ expression .)
    FROM            reduce using rule 45 (expression -> expression NEQ expression .)
    DEF             reduce using rule 45 (expression -> expression NEQ expression .)
    BOOLEAN         reduce using rule 45 (expression -> expression NEQ expression .)
    STRING          reduce using rule 45 (expression -> expression NEQ expression .)
    INTEGER         reduce using rule 45 (expression -> expression NEQ expression .)
    FLOAT           reduce using rule 45 (expression -> expression NEQ expression .)
    HEX             reduce using rule 45 (expression -> expression NEQ expression .)
    $end            reduce using rule 45 (expression -> expression NEQ expression .)
    DEDENT          reduce using rule 45 (expression -> expression NEQ expression .)
    COLON           reduce using rule 45 (expression -> expression NEQ expression .)
    RPAR            reduce using rule 45 (expression -> expression NEQ expression .)
    COMMA           reduce using rule 45 (expression -> expression NEQ expression .)
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 69

    (46) expression -> expression EQ expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 46 (expression -> expression EQ expression .)
    AND             reduce using rule 46 (expression -> expression EQ expression .)
    NEQ             reduce using rule 46 (expression -> expression EQ expression .)
    EQ              reduce using rule 46 (expression -> expression EQ expression .)
    LT              reduce using rule 46 (expression -> expression EQ expression .)
    GT              reduce using rule 46 (expression -> expression EQ expression .)
    LTE             reduce using rule 46 (expression -> expression EQ expression .)
    GTE             reduce using rule 46 (expression -> expression EQ expression .)
    MOD             reduce using rule 46 (expression -> expression EQ expression .)
    NEWLINE         reduce using rule 46 (expression -> expression EQ expression .)
    NAME            reduce using rule 46 (expression -> expression EQ expression .)
    RETURN          reduce using rule 46 (expression -> expression EQ expression .)
    WHILE           reduce using rule 46 (expression -> expression EQ expression .)
    IF              reduce using rule 46 (expression -> expression EQ expression .)
    PASS            reduce using rule 46 (expression -> expression EQ expression .)
    S64             reduce using rule 46 (expression -> expression EQ expression .)
    S32             reduce using rule 46 (expression -> expression EQ expression .)
    S16             reduce using rule 46 (expression -> expression EQ expression .)
    S8              reduce using rule 46 (expression -> expression EQ expression .)
    U64             reduce using rule 46 (expression -> expression EQ expression .)
    U32             reduce using rule 46 (expression -> expression EQ expression .)
    U16             reduce using rule 46 (expression -> expression EQ expression .)
    U8              reduce using rule 46 (expression -> expression EQ expression .)
    LPAR            reduce using rule 46 (expression -> expression EQ expression .)
    NOT             reduce using rule 46 (expression -> expression EQ expression .)
    FROM            reduce using rule 46 (expression -> expression EQ expression .)
    DEF             reduce using rule 46 (expression -> expression EQ expression .)
    BOOLEAN         reduce using rule 46 (expression -> expression EQ expression .)
    STRING          reduce using rule 46 (expression -> expression EQ expression .)
    INTEGER         reduce using rule 46 (expression -> expression EQ expression .)
    FLOAT           reduce using rule 46 (expression -> expression EQ expression .)
    HEX             reduce using rule 46 (expression -> expression EQ expression .)
    $end            reduce using rule 46 (expression -> expression EQ expression .)
    DEDENT          reduce using rule 46 (expression -> expression EQ expression .)
    COLON           reduce using rule 46 (expression -> expression EQ expression .)
    RPAR            reduce using rule 46 (expression -> expression EQ expression .)
    COMMA           reduce using rule 46 (expression -> expression EQ expression .)
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 70

    (47) expression -> expression LT expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 47 (expression -> expression LT expression .)
    AND             reduce using rule 47 (expression -> expression LT expression .)
    NEQ             reduce using rule 47 (expression -> expression LT expression .)
    EQ              reduce using rule 47 (expression -> expression LT expression .)
    LT              reduce using rule 47 (expression -> expression LT expression .)
    GT              reduce using rule 47 (expression -> expression LT expression .)
    LTE             reduce using rule 47 (expression -> expression LT expression .)
    GTE             reduce using rule 47 (expression -> expression LT expression .)
    MOD             reduce using rule 47 (expression -> expression LT expression .)
    NEWLINE         reduce using rule 47 (expression -> expression LT expression .)
    NAME            reduce using rule 47 (expression -> expression LT expression .)
    RETURN          reduce using rule 47 (expression -> expression LT expression .)
    WHILE           reduce using rule 47 (expression -> expression LT expression .)
    IF              reduce using rule 47 (expression -> expression LT expression .)
    PASS            reduce using rule 47 (expression -> expression LT expression .)
    S64             reduce using rule 47 (expression -> expression LT expression .)
    S32             reduce using rule 47 (expression -> expression LT expression .)
    S16             reduce using rule 47 (expression -> expression LT expression .)
    S8              reduce using rule 47 (expression -> expression LT expression .)
    U64             reduce using rule 47 (expression -> expression LT expression .)
    U32             reduce using rule 47 (expression -> expression LT expression .)
    U16             reduce using rule 47 (expression -> expression LT expression .)
    U8              reduce using rule 47 (expression -> expression LT expression .)
    LPAR            reduce using rule 47 (expression -> expression LT expression .)
    NOT             reduce using rule 47 (expression -> expression LT expression .)
    FROM            reduce using rule 47 (expression -> expression LT expression .)
    DEF             reduce using rule 47 (expression -> expression LT expression .)
    BOOLEAN         reduce using rule 47 (expression -> expression LT expression .)
    STRING          reduce using rule 47 (expression -> expression LT expression .)
    INTEGER         reduce using rule 47 (expression -> expression LT expression .)
    FLOAT           reduce using rule 47 (expression -> expression LT expression .)
    HEX             reduce using rule 47 (expression -> expression LT expression .)
    $end            reduce using rule 47 (expression -> expression LT expression .)
    DEDENT          reduce using rule 47 (expression -> expression LT expression .)
    COLON           reduce using rule 47 (expression -> expression LT expression .)
    RPAR            reduce using rule 47 (expression -> expression LT expression .)
    COMMA           reduce using rule 47 (expression -> expression LT expression .)
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 71

    (48) expression -> expression GT expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 48 (expression -> expression GT expression .)
    AND             reduce using rule 48 (expression -> expression GT expression .)
    NEQ             reduce using rule 48 (expression -> expression GT expression .)
    EQ              reduce using rule 48 (expression -> expression GT expression .)
    LT              reduce using rule 48 (expression -> expression GT expression .)
    GT              reduce using rule 48 (expression -> expression GT expression .)
    LTE             reduce using rule 48 (expression -> expression GT expression .)
    GTE             reduce using rule 48 (expression -> expression GT expression .)
    MOD             reduce using rule 48 (expression -> expression GT expression .)
    NEWLINE         reduce using rule 48 (expression -> expression GT expression .)
    NAME            reduce using rule 48 (expression -> expression GT expression .)
    RETURN          reduce using rule 48 (expression -> expression GT expression .)
    WHILE           reduce using rule 48 (expression -> expression GT expression .)
    IF              reduce using rule 48 (expression -> expression GT expression .)
    PASS            reduce using rule 48 (expression -> expression GT expression .)
    S64             reduce using rule 48 (expression -> expression GT expression .)
    S32             reduce using rule 48 (expression -> expression GT expression .)
    S16             reduce using rule 48 (expression -> expression GT expression .)
    S8              reduce using rule 48 (expression -> expression GT expression .)
    U64             reduce using rule 48 (expression -> expression GT expression .)
    U32             reduce using rule 48 (expression -> expression GT expression .)
    U16             reduce using rule 48 (expression -> expression GT expression .)
    U8              reduce using rule 48 (expression -> expression GT expression .)
    LPAR            reduce using rule 48 (expression -> expression GT expression .)
    NOT             reduce using rule 48 (expression -> expression GT expression .)
    FROM            reduce using rule 48 (expression -> expression GT expression .)
    DEF             reduce using rule 48 (expression -> expression GT expression .)
    BOOLEAN         reduce using rule 48 (expression -> expression GT expression .)
    STRING          reduce using rule 48 (expression -> expression GT expression .)
    INTEGER         reduce using rule 48 (expression -> expression GT expression .)
    FLOAT           reduce using rule 48 (expression -> expression GT expression .)
    HEX             reduce using rule 48 (expression -> expression GT expression .)
    $end            reduce using rule 48 (expression -> expression GT expression .)
    DEDENT          reduce using rule 48 (expression -> expression GT expression .)
    COLON           reduce using rule 48 (expression -> expression GT expression .)
    RPAR            reduce using rule 48 (expression -> expression GT expression .)
    COMMA           reduce using rule 48 (expression -> expression GT expression .)
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 72

    (49) expression -> expression LTE expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 49 (expression -> expression LTE expression .)
    AND             reduce using rule 49 (expression -> expression LTE expression .)
    NEQ             reduce using rule 49 (expression -> expression LTE expression .)
    EQ              reduce using rule 49 (expression -> expression LTE expression .)
    LT              reduce using rule 49 (expression -> expression LTE expression .)
    GT              reduce using rule 49 (expression -> expression LTE expression .)
    LTE             reduce using rule 49 (expression -> expression LTE expression .)
    GTE             reduce using rule 49 (expression -> expression LTE expression .)
    MOD             reduce using rule 49 (expression -> expression LTE expression .)
    NEWLINE         reduce using rule 49 (expression -> expression LTE expression .)
    NAME            reduce using rule 49 (expression -> expression LTE expression .)
    RETURN          reduce using rule 49 (expression -> expression LTE expression .)
    WHILE           reduce using rule 49 (expression -> expression LTE expression .)
    IF              reduce using rule 49 (expression -> expression LTE expression .)
    PASS            reduce using rule 49 (expression -> expression LTE expression .)
    S64             reduce using rule 49 (expression -> expression LTE expression .)
    S32             reduce using rule 49 (expression -> expression LTE expression .)
    S16             reduce using rule 49 (expression -> expression LTE expression .)
    S8              reduce using rule 49 (expression -> expression LTE expression .)
    U64             reduce using rule 49 (expression -> expression LTE expression .)
    U32             reduce using rule 49 (expression -> expression LTE expression .)
    U16             reduce using rule 49 (expression -> expression LTE expression .)
    U8              reduce using rule 49 (expression -> expression LTE expression .)
    LPAR            reduce using rule 49 (expression -> expression LTE expression .)
    NOT             reduce using rule 49 (expression -> expression LTE expression .)
    FROM            reduce using rule 49 (expression -> expression LTE expression .)
    DEF             reduce using rule 49 (expression -> expression LTE expression .)
    BOOLEAN         reduce using rule 49 (expression -> expression LTE expression .)
    STRING          reduce using rule 49 (expression -> expression LTE expression .)
    INTEGER         reduce using rule 49 (expression -> expression LTE expression .)
    FLOAT           reduce using rule 49 (expression -> expression LTE expression .)
    HEX             reduce using rule 49 (expression -> expression LTE expression .)
    $end            reduce using rule 49 (expression -> expression LTE expression .)
    DEDENT          reduce using rule 49 (expression -> expression LTE expression .)
    COLON           reduce using rule 49 (expression -> expression LTE expression .)
    RPAR            reduce using rule 49 (expression -> expression LTE expression .)
    COMMA           reduce using rule 49 (expression -> expression LTE expression .)
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 73

    (50) expression -> expression GTE expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 50 (expression -> expression GTE expression .)
    AND             reduce using rule 50 (expression -> expression GTE expression .)
    NEQ             reduce using rule 50 (expression -> expression GTE expression .)
    EQ              reduce using rule 50 (expression -> expression GTE expression .)
    LT              reduce using rule 50 (expression -> expression GTE expression .)
    GT              reduce using rule 50 (expression -> expression GTE expression .)
    LTE             reduce using rule 50 (expression -> expression GTE expression .)
    GTE             reduce using rule 50 (expression -> expression GTE expression .)
    MOD             reduce using rule 50 (expression -> expression GTE expression .)
    NEWLINE         reduce using rule 50 (expression -> expression GTE expression .)
    NAME            reduce using rule 50 (expression -> expression GTE expression .)
    RETURN          reduce using rule 50 (expression -> expression GTE expression .)
    WHILE           reduce using rule 50 (expression -> expression GTE expression .)
    IF              reduce using rule 50 (expression -> expression GTE expression .)
    PASS            reduce using rule 50 (expression -> expression GTE expression .)
    S64             reduce using rule 50 (expression -> expression GTE expression .)
    S32             reduce using rule 50 (expression -> expression GTE expression .)
    S16             reduce using rule 50 (expression -> expression GTE expression .)
    S8              reduce using rule 50 (expression -> expression GTE expression .)
    U64             reduce using rule 50 (expression -> expression GTE expression .)
    U32             reduce using rule 50 (expression -> expression GTE expression .)
    U16             reduce using rule 50 (expression -> expression GTE expression .)
    U8              reduce using rule 50 (expression -> expression GTE expression .)
    LPAR            reduce using rule 50 (expression -> expression GTE expression .)
    NOT             reduce using rule 50 (expression -> expression GTE expression .)
    FROM            reduce using rule 50 (expression -> expression GTE expression .)
    DEF             reduce using rule 50 (expression -> expression GTE expression .)
    BOOLEAN         reduce using rule 50 (expression -> expression GTE expression .)
    STRING          reduce using rule 50 (expression -> expression GTE expression .)
    INTEGER         reduce using rule 50 (expression -> expression GTE expression .)
    FLOAT           reduce using rule 50 (expression -> expression GTE expression .)
    HEX             reduce using rule 50 (expression -> expression GTE expression .)
    $end            reduce using rule 50 (expression -> expression GTE expression .)
    DEDENT          reduce using rule 50 (expression -> expression GTE expression .)
    COLON           reduce using rule 50 (expression -> expression GTE expression .)
    RPAR            reduce using rule 50 (expression -> expression GTE expression .)
    COMMA           reduce using rule 50 (expression -> expression GTE expression .)
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 74

    (51) expression -> expression MOD expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    NEWLINE         reduce using rule 51 (expression -> expression MOD expression .)
    NAME            reduce using rule 51 (expression -> expression MOD expression .)
    RETURN          reduce using rule 51 (expression -> expression MOD expression .)
    WHILE           reduce using rule 51 (expression -> expression MOD expression .)
    IF              reduce using rule 51 (expression -> expression MOD expression .)
    PASS            reduce using rule 51 (expression -> expression MOD expression .)
    S64             reduce using rule 51 (expression -> expression MOD expression .)
    S32             reduce using rule 51 (expression -> expression MOD expression .)
    S16             reduce using rule 51 (expression -> expression MOD expression .)
    S8              reduce using rule 51 (expression -> expression MOD expression .)
    U64             reduce using rule 51 (expression -> expression MOD expression .)
    U32             reduce using rule 51 (expression -> expression MOD expression .)
    U16             reduce using rule 51 (expression -> expression MOD expression .)
    U8              reduce using rule 51 (expression -> expression MOD expression .)
    LPAR            reduce using rule 51 (expression -> expression MOD expression .)
    NOT             reduce using rule 51 (expression -> expression MOD expression .)
    FROM            reduce using rule 51 (expression -> expression MOD expression .)
    DEF             reduce using rule 51 (expression -> expression MOD expression .)
    BOOLEAN         reduce using rule 51 (expression -> expression MOD expression .)
    STRING          reduce using rule 51 (expression -> expression MOD expression .)
    INTEGER         reduce using rule 51 (expression -> expression MOD expression .)
    FLOAT           reduce using rule 51 (expression -> expression MOD expression .)
    HEX             reduce using rule 51 (expression -> expression MOD expression .)
    $end            reduce using rule 51 (expression -> expression MOD expression .)
    DEDENT          reduce using rule 51 (expression -> expression MOD expression .)
    COLON           reduce using rule 51 (expression -> expression MOD expression .)
    RPAR            reduce using rule 51 (expression -> expression MOD expression .)
    COMMA           reduce using rule 51 (expression -> expression MOD expression .)
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 75

    (52) expression -> expression DIV expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 52 (expression -> expression DIV expression .)
    AND             reduce using rule 52 (expression -> expression DIV expression .)
    NEQ             reduce using rule 52 (expression -> expression DIV expression .)
    EQ              reduce using rule 52 (expression -> expression DIV expression .)
    LT              reduce using rule 52 (expression -> expression DIV expression .)
    GT              reduce using rule 52 (expression -> expression DIV expression .)
    LTE             reduce using rule 52 (expression -> expression DIV expression .)
    GTE             reduce using rule 52 (expression -> expression DIV expression .)
    MOD             reduce using rule 52 (expression -> expression DIV expression .)
    DIV             reduce using rule 52 (expression -> expression DIV expression .)
    MULT            reduce using rule 52 (expression -> expression DIV expression .)
    MINUS           reduce using rule 52 (expression -> expression DIV expression .)
    PLUS            reduce using rule 52 (expression -> expression DIV expression .)
    NEWLINE         reduce using rule 52 (expression -> expression DIV expression .)
    NAME            reduce using rule 52 (expression -> expression DIV expression .)
    RETURN          reduce using rule 52 (expression -> expression DIV expression .)
    WHILE           reduce using rule 52 (expression -> expression DIV expression .)
    IF              reduce using rule 52 (expression -> expression DIV expression .)
    PASS            reduce using rule 52 (expression -> expression DIV expression .)
    S64             reduce using rule 52 (expression -> expression DIV expression .)
    S32             reduce using rule 52 (expression -> expression DIV expression .)
    S16             reduce using rule 52 (expression -> expression DIV expression .)
    S8              reduce using rule 52 (expression -> expression DIV expression .)
    U64             reduce using rule 52 (expression -> expression DIV expression .)
    U32             reduce using rule 52 (expression -> expression DIV expression .)
    U16             reduce using rule 52 (expression -> expression DIV expression .)
    U8              reduce using rule 52 (expression -> expression DIV expression .)
    LPAR            reduce using rule 52 (expression -> expression DIV expression .)
    NOT             reduce using rule 52 (expression -> expression DIV expression .)
    FROM            reduce using rule 52 (expression -> expression DIV expression .)
    DEF             reduce using rule 52 (expression -> expression DIV expression .)
    BOOLEAN         reduce using rule 52 (expression -> expression DIV expression .)
    STRING          reduce using rule 52 (expression -> expression DIV expression .)
    INTEGER         reduce using rule 52 (expression -> expression DIV expression .)
    FLOAT           reduce using rule 52 (expression -> expression DIV expression .)
    HEX             reduce using rule 52 (expression -> expression DIV expression .)
    $end            reduce using rule 52 (expression -> expression DIV expression .)
    DEDENT          reduce using rule 52 (expression -> expression DIV expression .)
    COLON           reduce using rule 52 (expression -> expression DIV expression .)
    RPAR            reduce using rule 52 (expression -> expression DIV expression .)
    COMMA           reduce using rule 52 (expression -> expression DIV expression .)


state 76

    (53) expression -> expression MULT expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 53 (expression -> expression MULT expression .)
    AND             reduce using rule 53 (expression -> expression MULT expression .)
    NEQ             reduce using rule 53 (expression -> expression MULT expression .)
    EQ              reduce using rule 53 (expression -> expression MULT expression .)
    LT              reduce using rule 53 (expression -> expression MULT expression .)
    GT              reduce using rule 53 (expression -> expression MULT expression .)
    LTE             reduce using rule 53 (expression -> expression MULT expression .)
    GTE             reduce using rule 53 (expression -> expression MULT expression .)
    MOD             reduce using rule 53 (expression -> expression MULT expression .)
    DIV             reduce using rule 53 (expression -> expression MULT expression .)
    MULT            reduce using rule 53 (expression -> expression MULT expression .)
    MINUS           reduce using rule 53 (expression -> expression MULT expression .)
    PLUS            reduce using rule 53 (expression -> expression MULT expression .)
    NEWLINE         reduce using rule 53 (expression -> expression MULT expression .)
    NAME            reduce using rule 53 (expression -> expression MULT expression .)
    RETURN          reduce using rule 53 (expression -> expression MULT expression .)
    WHILE           reduce using rule 53 (expression -> expression MULT expression .)
    IF              reduce using rule 53 (expression -> expression MULT expression .)
    PASS            reduce using rule 53 (expression -> expression MULT expression .)
    S64             reduce using rule 53 (expression -> expression MULT expression .)
    S32             reduce using rule 53 (expression -> expression MULT expression .)
    S16             reduce using rule 53 (expression -> expression MULT expression .)
    S8              reduce using rule 53 (expression -> expression MULT expression .)
    U64             reduce using rule 53 (expression -> expression MULT expression .)
    U32             reduce using rule 53 (expression -> expression MULT expression .)
    U16             reduce using rule 53 (expression -> expression MULT expression .)
    U8              reduce using rule 53 (expression -> expression MULT expression .)
    LPAR            reduce using rule 53 (expression -> expression MULT expression .)
    NOT             reduce using rule 53 (expression -> expression MULT expression .)
    FROM            reduce using rule 53 (expression -> expression MULT expression .)
    DEF             reduce using rule 53 (expression -> expression MULT expression .)
    BOOLEAN         reduce using rule 53 (expression -> expression MULT expression .)
    STRING          reduce using rule 53 (expression -> expression MULT expression .)
    INTEGER         reduce using rule 53 (expression -> expression MULT expression .)
    FLOAT           reduce using rule 53 (expression -> expression MULT expression .)
    HEX             reduce using rule 53 (expression -> expression MULT expression .)
    $end            reduce using rule 53 (expression -> expression MULT expression .)
    DEDENT          reduce using rule 53 (expression -> expression MULT expression .)
    COLON           reduce using rule 53 (expression -> expression MULT expression .)
    RPAR            reduce using rule 53 (expression -> expression MULT expression .)
    COMMA           reduce using rule 53 (expression -> expression MULT expression .)


state 77

    (54) expression -> expression MINUS expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 54 (expression -> expression MINUS expression .)
    AND             reduce using rule 54 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 54 (expression -> expression MINUS expression .)
    EQ              reduce using rule 54 (expression -> expression MINUS expression .)
    LT              reduce using rule 54 (expression -> expression MINUS expression .)
    GT              reduce using rule 54 (expression -> expression MINUS expression .)
    LTE             reduce using rule 54 (expression -> expression MINUS expression .)
    GTE             reduce using rule 54 (expression -> expression MINUS expression .)
    MOD             reduce using rule 54 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 54 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 54 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 54 (expression -> expression MINUS expression .)
    NAME            reduce using rule 54 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 54 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 54 (expression -> expression MINUS expression .)
    IF              reduce using rule 54 (expression -> expression MINUS expression .)
    PASS            reduce using rule 54 (expression -> expression MINUS expression .)
    S64             reduce using rule 54 (expression -> expression MINUS expression .)
    S32             reduce using rule 54 (expression -> expression MINUS expression .)
    S16             reduce using rule 54 (expression -> expression MINUS expression .)
    S8              reduce using rule 54 (expression -> expression MINUS expression .)
    U64             reduce using rule 54 (expression -> expression MINUS expression .)
    U32             reduce using rule 54 (expression -> expression MINUS expression .)
    U16             reduce using rule 54 (expression -> expression MINUS expression .)
    U8              reduce using rule 54 (expression -> expression MINUS expression .)
    LPAR            reduce using rule 54 (expression -> expression MINUS expression .)
    NOT             reduce using rule 54 (expression -> expression MINUS expression .)
    FROM            reduce using rule 54 (expression -> expression MINUS expression .)
    DEF             reduce using rule 54 (expression -> expression MINUS expression .)
    BOOLEAN         reduce using rule 54 (expression -> expression MINUS expression .)
    STRING          reduce using rule 54 (expression -> expression MINUS expression .)
    INTEGER         reduce using rule 54 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 54 (expression -> expression MINUS expression .)
    HEX             reduce using rule 54 (expression -> expression MINUS expression .)
    $end            reduce using rule 54 (expression -> expression MINUS expression .)
    DEDENT          reduce using rule 54 (expression -> expression MINUS expression .)
    COLON           reduce using rule 54 (expression -> expression MINUS expression .)
    RPAR            reduce using rule 54 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 54 (expression -> expression MINUS expression .)
    DIV             shift and go to state 48
    MULT            shift and go to state 49


state 78

    (55) expression -> expression PLUS expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    OR              reduce using rule 55 (expression -> expression PLUS expression .)
    AND             reduce using rule 55 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 55 (expression -> expression PLUS expression .)
    EQ              reduce using rule 55 (expression -> expression PLUS expression .)
    LT              reduce using rule 55 (expression -> expression PLUS expression .)
    GT              reduce using rule 55 (expression -> expression PLUS expression .)
    LTE             reduce using rule 55 (expression -> expression PLUS expression .)
    GTE             reduce using rule 55 (expression -> expression PLUS expression .)
    MOD             reduce using rule 55 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 55 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 55 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 55 (expression -> expression PLUS expression .)
    NAME            reduce using rule 55 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 55 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 55 (expression -> expression PLUS expression .)
    IF              reduce using rule 55 (expression -> expression PLUS expression .)
    PASS            reduce using rule 55 (expression -> expression PLUS expression .)
    S64             reduce using rule 55 (expression -> expression PLUS expression .)
    S32             reduce using rule 55 (expression -> expression PLUS expression .)
    S16             reduce using rule 55 (expression -> expression PLUS expression .)
    S8              reduce using rule 55 (expression -> expression PLUS expression .)
    U64             reduce using rule 55 (expression -> expression PLUS expression .)
    U32             reduce using rule 55 (expression -> expression PLUS expression .)
    U16             reduce using rule 55 (expression -> expression PLUS expression .)
    U8              reduce using rule 55 (expression -> expression PLUS expression .)
    LPAR            reduce using rule 55 (expression -> expression PLUS expression .)
    NOT             reduce using rule 55 (expression -> expression PLUS expression .)
    FROM            reduce using rule 55 (expression -> expression PLUS expression .)
    DEF             reduce using rule 55 (expression -> expression PLUS expression .)
    BOOLEAN         reduce using rule 55 (expression -> expression PLUS expression .)
    STRING          reduce using rule 55 (expression -> expression PLUS expression .)
    INTEGER         reduce using rule 55 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 55 (expression -> expression PLUS expression .)
    HEX             reduce using rule 55 (expression -> expression PLUS expression .)
    $end            reduce using rule 55 (expression -> expression PLUS expression .)
    DEDENT          reduce using rule 55 (expression -> expression PLUS expression .)
    COLON           reduce using rule 55 (expression -> expression PLUS expression .)
    RPAR            reduce using rule 55 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (expression -> expression PLUS expression .)
    DIV             shift and go to state 48
    MULT            shift and go to state 49


state 79

    (10) statement -> WHILE expression COLON . NEWLINE block
    NEWLINE         shift and go to state 89


state 80

    (11) statement -> IF expression COLON . NEWLINE block NEWLINE
    (12) statement -> IF expression COLON . NEWLINE block NEWLINE else_statement
    (13) statement -> IF expression COLON . NEWLINE block NEWLINE elif_statement
    NEWLINE         shift and go to state 90


state 81

    (41) expression -> LPAR expression RPAR .
    OR              reduce using rule 41 (expression -> LPAR expression RPAR .)
    AND             reduce using rule 41 (expression -> LPAR expression RPAR .)
    NEQ             reduce using rule 41 (expression -> LPAR expression RPAR .)
    EQ              reduce using rule 41 (expression -> LPAR expression RPAR .)
    LT              reduce using rule 41 (expression -> LPAR expression RPAR .)
    GT              reduce using rule 41 (expression -> LPAR expression RPAR .)
    LTE             reduce using rule 41 (expression -> LPAR expression RPAR .)
    GTE             reduce using rule 41 (expression -> LPAR expression RPAR .)
    MOD             reduce using rule 41 (expression -> LPAR expression RPAR .)
    DIV             reduce using rule 41 (expression -> LPAR expression RPAR .)
    MULT            reduce using rule 41 (expression -> LPAR expression RPAR .)
    MINUS           reduce using rule 41 (expression -> LPAR expression RPAR .)
    PLUS            reduce using rule 41 (expression -> LPAR expression RPAR .)
    NEWLINE         reduce using rule 41 (expression -> LPAR expression RPAR .)
    NAME            reduce using rule 41 (expression -> LPAR expression RPAR .)
    RETURN          reduce using rule 41 (expression -> LPAR expression RPAR .)
    WHILE           reduce using rule 41 (expression -> LPAR expression RPAR .)
    IF              reduce using rule 41 (expression -> LPAR expression RPAR .)
    PASS            reduce using rule 41 (expression -> LPAR expression RPAR .)
    S64             reduce using rule 41 (expression -> LPAR expression RPAR .)
    S32             reduce using rule 41 (expression -> LPAR expression RPAR .)
    S16             reduce using rule 41 (expression -> LPAR expression RPAR .)
    S8              reduce using rule 41 (expression -> LPAR expression RPAR .)
    U64             reduce using rule 41 (expression -> LPAR expression RPAR .)
    U32             reduce using rule 41 (expression -> LPAR expression RPAR .)
    U16             reduce using rule 41 (expression -> LPAR expression RPAR .)
    U8              reduce using rule 41 (expression -> LPAR expression RPAR .)
    LPAR            reduce using rule 41 (expression -> LPAR expression RPAR .)
    NOT             reduce using rule 41 (expression -> LPAR expression RPAR .)
    FROM            reduce using rule 41 (expression -> LPAR expression RPAR .)
    DEF             reduce using rule 41 (expression -> LPAR expression RPAR .)
    BOOLEAN         reduce using rule 41 (expression -> LPAR expression RPAR .)
    STRING          reduce using rule 41 (expression -> LPAR expression RPAR .)
    INTEGER         reduce using rule 41 (expression -> LPAR expression RPAR .)
    FLOAT           reduce using rule 41 (expression -> LPAR expression RPAR .)
    HEX             reduce using rule 41 (expression -> LPAR expression RPAR .)
    $end            reduce using rule 41 (expression -> LPAR expression RPAR .)
    DEDENT          reduce using rule 41 (expression -> LPAR expression RPAR .)
    COLON           reduce using rule 41 (expression -> LPAR expression RPAR .)
    RPAR            reduce using rule 41 (expression -> LPAR expression RPAR .)
    COMMA           reduce using rule 41 (expression -> LPAR expression RPAR .)


state 82

    (19) import_statement -> FROM NAME DOT . NAME IMPORT module_list
    NAME            shift and go to state 91


state 83

    (31) chain_statement -> DEF NAME LPAR . arglist RPAR COLON NEWLINE block
    (58) arglist -> .
    (59) arglist -> . argument
    (60) arglist -> . argument COMMA arglist
    (61) argument -> . type COLON NAME
    (65) type -> . S64
    (66) type -> . S32
    (67) type -> . S16
    (68) type -> . S8
    (69) type -> . U64
    (70) type -> . U32
    (71) type -> . U16
    (72) type -> . U8
    RPAR            reduce using rule 58 (arglist -> .)
    S64             shift and go to state 15
    S32             shift and go to state 16
    S16             shift and go to state 17
    S8              shift and go to state 18
    U64             shift and go to state 19
    U32             shift and go to state 20
    U16             shift and go to state 21
    U8              shift and go to state 22

    arglist                        shift and go to state 92
    argument                       shift and go to state 93
    type                           shift and go to state 94

state 84

    (5) statement -> type COLON NAME ASSIGN . expression
    (6) statement -> type COLON NAME ASSIGN . const
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 95
    const                          shift and go to state 96

state 85

    (56) expression -> NAME DOT NAME LPAR . exprlist RPAR
    (62) exprlist -> .
    (63) exprlist -> . expression
    (64) exprlist -> . expression COMMA exprlist
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    RPAR            reduce using rule 62 (exprlist -> .)
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    exprlist                       shift and go to state 97
    expression                     shift and go to state 64
    const                          shift and go to state 7

state 86

    (57) expression -> NAME LPAR exprlist RPAR .
    OR              reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    AND             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    NEQ             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    EQ              reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    LT              reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    GT              reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    LTE             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    GTE             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    MOD             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    DIV             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    MULT            reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    MINUS           reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    PLUS            reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    NEWLINE         reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    NAME            reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    RETURN          reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    WHILE           reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    IF              reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    PASS            reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    S64             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    S32             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    S16             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    S8              reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    U64             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    U32             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    U16             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    U8              reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    LPAR            reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    NOT             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    FROM            reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    DEF             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    BOOLEAN         reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    STRING          reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    INTEGER         reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    FLOAT           reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    HEX             reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    $end            reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    DEDENT          reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    COLON           reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    RPAR            reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)
    COMMA           reduce using rule 57 (expression -> NAME LPAR exprlist RPAR .)


state 87

    (64) exprlist -> expression COMMA . exprlist
    (62) exprlist -> .
    (63) exprlist -> . expression
    (64) exprlist -> . expression COMMA exprlist
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    RPAR            reduce using rule 62 (exprlist -> .)
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 64
    exprlist                       shift and go to state 98
    const                          shift and go to state 7

state 88

    (22) map_statement -> NAME LSPAR NAME RSPAR . ASSIGN mapping
    ASSIGN          shift and go to state 99


state 89

    (10) statement -> WHILE expression COLON NEWLINE . block
    (32) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 101

    block                          shift and go to state 100

state 90

    (11) statement -> IF expression COLON NEWLINE . block NEWLINE
    (12) statement -> IF expression COLON NEWLINE . block NEWLINE else_statement
    (13) statement -> IF expression COLON NEWLINE . block NEWLINE elif_statement
    (32) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 101

    block                          shift and go to state 102

state 91

    (19) import_statement -> FROM NAME DOT NAME . IMPORT module_list
    IMPORT          shift and go to state 103


state 92

    (31) chain_statement -> DEF NAME LPAR arglist . RPAR COLON NEWLINE block
    RPAR            shift and go to state 104


state 93

    (59) arglist -> argument .
    (60) arglist -> argument . COMMA arglist
    RPAR            reduce using rule 59 (arglist -> argument .)
    COMMA           shift and go to state 105


state 94

    (61) argument -> type . COLON NAME
    COLON           shift and go to state 106


state 95

    (5) statement -> type COLON NAME ASSIGN expression .
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    NEWLINE         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    NAME            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    RETURN          reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    WHILE           reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    IF              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    PASS            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S64             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S32             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S16             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    S8              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U64             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U32             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U16             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    U8              reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    LPAR            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    NOT             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    FROM            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    DEF             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    BOOLEAN         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    STRING          reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    INTEGER         reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    FLOAT           reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    HEX             reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    $end            reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    DEDENT          reduce using rule 5 (statement -> type COLON NAME ASSIGN expression .)
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 96

    (6) statement -> type COLON NAME ASSIGN const .
    (40) expression -> const .
  ! reduce/reduce conflict for NEWLINE resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for NAME resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for WHILE resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for IF resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for PASS resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for S64 resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for S32 resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for S16 resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for S8 resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for U64 resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for U32 resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for U16 resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for U8 resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for LPAR resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for NOT resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for FROM resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for DEF resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for BOOLEAN resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for STRING resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for INTEGER resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for FLOAT resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for HEX resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for $end resolved using rule 40 (expression -> const .)
  ! reduce/reduce conflict for DEDENT resolved using rule 40 (expression -> const .)
    OR              reduce using rule 40 (expression -> const .)
    AND             reduce using rule 40 (expression -> const .)
    NEQ             reduce using rule 40 (expression -> const .)
    EQ              reduce using rule 40 (expression -> const .)
    LT              reduce using rule 40 (expression -> const .)
    GT              reduce using rule 40 (expression -> const .)
    LTE             reduce using rule 40 (expression -> const .)
    GTE             reduce using rule 40 (expression -> const .)
    MOD             reduce using rule 40 (expression -> const .)
    DIV             reduce using rule 40 (expression -> const .)
    MULT            reduce using rule 40 (expression -> const .)
    MINUS           reduce using rule 40 (expression -> const .)
    PLUS            reduce using rule 40 (expression -> const .)
    NEWLINE         reduce using rule 40 (expression -> const .)
    NAME            reduce using rule 40 (expression -> const .)
    RETURN          reduce using rule 40 (expression -> const .)
    WHILE           reduce using rule 40 (expression -> const .)
    IF              reduce using rule 40 (expression -> const .)
    PASS            reduce using rule 40 (expression -> const .)
    S64             reduce using rule 40 (expression -> const .)
    S32             reduce using rule 40 (expression -> const .)
    S16             reduce using rule 40 (expression -> const .)
    S8              reduce using rule 40 (expression -> const .)
    U64             reduce using rule 40 (expression -> const .)
    U32             reduce using rule 40 (expression -> const .)
    U16             reduce using rule 40 (expression -> const .)
    U8              reduce using rule 40 (expression -> const .)
    LPAR            reduce using rule 40 (expression -> const .)
    NOT             reduce using rule 40 (expression -> const .)
    FROM            reduce using rule 40 (expression -> const .)
    DEF             reduce using rule 40 (expression -> const .)
    BOOLEAN         reduce using rule 40 (expression -> const .)
    STRING          reduce using rule 40 (expression -> const .)
    INTEGER         reduce using rule 40 (expression -> const .)
    FLOAT           reduce using rule 40 (expression -> const .)
    HEX             reduce using rule 40 (expression -> const .)
    $end            reduce using rule 40 (expression -> const .)
    DEDENT          reduce using rule 40 (expression -> const .)


state 97

    (56) expression -> NAME DOT NAME LPAR exprlist . RPAR
    RPAR            shift and go to state 107


state 98

    (64) exprlist -> expression COMMA exprlist .
    RPAR            reduce using rule 64 (exprlist -> expression COMMA exprlist .)


state 99

    (22) map_statement -> NAME LSPAR NAME RSPAR ASSIGN . mapping
    (23) mapping -> . LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR
    (24) mapping -> . LCPAR key_value_pairs RCPAR
    LCPAR           shift and go to state 109

    mapping                        shift and go to state 108

state 100

    (10) statement -> WHILE expression COLON NEWLINE block .
    NEWLINE         reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    NAME            reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    RETURN          reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    IF              reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    PASS            reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    S64             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    S32             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    S16             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    S8              reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    U64             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    U32             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    U16             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    U8              reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    LPAR            reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    NOT             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    FROM            reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    DEF             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    BOOLEAN         reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    STRING          reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    INTEGER         reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    FLOAT           reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    HEX             reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)
    DEDENT          reduce using rule 10 (statement -> WHILE expression COLON NEWLINE block .)


state 101

    (32) block -> INDENT . block_statements DEDENT
    (33) block_statements -> . statement_full block_statements
    (34) block_statements -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . RETURN
    (9) statement -> . RETURN expression
    (10) statement -> . WHILE expression COLON NEWLINE block
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE
    (12) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (13) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (14) statement -> . expression
    (15) statement -> . PASS
    (16) statement -> . map_statement
    (17) statement -> . import_statement
    (18) statement -> . chain_statement
    (65) type -> . S64
    (66) type -> . S32
    (67) type -> . S16
    (68) type -> . S8
    (69) type -> . U64
    (70) type -> . U32
    (71) type -> . U16
    (72) type -> . U8
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (22) map_statement -> . NAME LSPAR NAME RSPAR ASSIGN mapping
    (19) import_statement -> . FROM NAME DOT NAME IMPORT module_list
    (31) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 5
    RETURN          shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    PASS            shift and go to state 11
    S64             shift and go to state 15
    S32             shift and go to state 16
    S16             shift and go to state 17
    S8              shift and go to state 18
    U64             shift and go to state 19
    U32             shift and go to state 20
    U16             shift and go to state 21
    U8              shift and go to state 22
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    FROM            shift and go to state 25
    DEF             shift and go to state 26
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    block_statements               shift and go to state 110
    statement_full                 shift and go to state 111
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    map_statement                  shift and go to state 12
    import_statement               shift and go to state 13
    chain_statement                shift and go to state 14

state 102

    (11) statement -> IF expression COLON NEWLINE block . NEWLINE
    (12) statement -> IF expression COLON NEWLINE block . NEWLINE else_statement
    (13) statement -> IF expression COLON NEWLINE block . NEWLINE elif_statement
    NEWLINE         shift and go to state 112


state 103

    (19) import_statement -> FROM NAME DOT NAME IMPORT . module_list
    (20) module_list -> . NAME
    (21) module_list -> . NAME COMMA module_list
    NAME            shift and go to state 113

    module_list                    shift and go to state 114

state 104

    (31) chain_statement -> DEF NAME LPAR arglist RPAR . COLON NEWLINE block
    COLON           shift and go to state 115


state 105

    (60) arglist -> argument COMMA . arglist
    (58) arglist -> .
    (59) arglist -> . argument
    (60) arglist -> . argument COMMA arglist
    (61) argument -> . type COLON NAME
    (65) type -> . S64
    (66) type -> . S32
    (67) type -> . S16
    (68) type -> . S8
    (69) type -> . U64
    (70) type -> . U32
    (71) type -> . U16
    (72) type -> . U8
    RPAR            reduce using rule 58 (arglist -> .)
    S64             shift and go to state 15
    S32             shift and go to state 16
    S16             shift and go to state 17
    S8              shift and go to state 18
    U64             shift and go to state 19
    U32             shift and go to state 20
    U16             shift and go to state 21
    U8              shift and go to state 22

    argument                       shift and go to state 93
    arglist                        shift and go to state 116
    type                           shift and go to state 94

state 106

    (61) argument -> type COLON . NAME
    NAME            shift and go to state 117


state 107

    (56) expression -> NAME DOT NAME LPAR exprlist RPAR .
    OR              reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    AND             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    NEQ             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    EQ              reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    LT              reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    GT              reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    LTE             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    GTE             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    MOD             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    DIV             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    MULT            reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    MINUS           reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    PLUS            reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    NEWLINE         reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    NAME            reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    RETURN          reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    WHILE           reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    IF              reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    PASS            reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    S64             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    S32             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    S16             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    S8              reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    U64             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    U32             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    U16             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    U8              reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    LPAR            reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    NOT             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    FROM            reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    DEF             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    BOOLEAN         reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    STRING          reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    INTEGER         reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    FLOAT           reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    HEX             reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    $end            reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    DEDENT          reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    COLON           reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    RPAR            reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)
    COMMA           reduce using rule 56 (expression -> NAME DOT NAME LPAR exprlist RPAR .)


state 108

    (22) map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .
    NEWLINE         reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    NAME            reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    RETURN          reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    WHILE           reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    IF              reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    PASS            reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    S64             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    S32             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    S16             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    S8              reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    U64             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    U32             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    U16             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    U8              reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    LPAR            reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    NOT             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    FROM            reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    DEF             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    BOOLEAN         reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    STRING          reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    INTEGER         reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    FLOAT           reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    HEX             reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    $end            reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)
    DEDENT          reduce using rule 22 (map_statement -> NAME LSPAR NAME RSPAR ASSIGN mapping .)


state 109

    (23) mapping -> LCPAR . NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR
    (24) mapping -> LCPAR . key_value_pairs RCPAR
    (25) key_value_pairs -> .
    (26) key_value_pairs -> . key_value_pair
    (27) key_value_pairs -> . key_value_pair NEWLINE
    (28) key_value_pairs -> . key_value_pair COMMA NEWLINE key_value_pairs
    (29) key_value_pairs -> . key_value_pair COMMA key_value_pairs
    (30) key_value_pair -> . LPAR exprlist RPAR COLON LPAR exprlist RPAR
    NEWLINE         shift and go to state 118
    RCPAR           reduce using rule 25 (key_value_pairs -> .)
    LPAR            shift and go to state 121

    key_value_pairs                shift and go to state 119
    key_value_pair                 shift and go to state 120

state 110

    (32) block -> INDENT block_statements . DEDENT
    DEDENT          shift and go to state 122


state 111

    (33) block_statements -> statement_full . block_statements
    (34) block_statements -> statement_full .
    (33) block_statements -> . statement_full block_statements
    (34) block_statements -> . statement_full
    (3) statement_full -> . statement
    (4) statement_full -> . statement NEWLINE
    (5) statement -> . type COLON NAME ASSIGN expression
    (6) statement -> . type COLON NAME ASSIGN const
    (7) statement -> . NAME ASSIGN expression
    (8) statement -> . RETURN
    (9) statement -> . RETURN expression
    (10) statement -> . WHILE expression COLON NEWLINE block
    (11) statement -> . IF expression COLON NEWLINE block NEWLINE
    (12) statement -> . IF expression COLON NEWLINE block NEWLINE else_statement
    (13) statement -> . IF expression COLON NEWLINE block NEWLINE elif_statement
    (14) statement -> . expression
    (15) statement -> . PASS
    (16) statement -> . map_statement
    (17) statement -> . import_statement
    (18) statement -> . chain_statement
    (65) type -> . S64
    (66) type -> . S32
    (67) type -> . S16
    (68) type -> . S8
    (69) type -> . U64
    (70) type -> . U32
    (71) type -> . U16
    (72) type -> . U8
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (22) map_statement -> . NAME LSPAR NAME RSPAR ASSIGN mapping
    (19) import_statement -> . FROM NAME DOT NAME IMPORT module_list
    (31) chain_statement -> . DEF NAME LPAR arglist RPAR COLON NEWLINE block
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    DEDENT          reduce using rule 34 (block_statements -> statement_full .)
    NAME            shift and go to state 5
    RETURN          shift and go to state 8
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    PASS            shift and go to state 11
    S64             shift and go to state 15
    S32             shift and go to state 16
    S16             shift and go to state 17
    S8              shift and go to state 18
    U64             shift and go to state 19
    U32             shift and go to state 20
    U16             shift and go to state 21
    U8              shift and go to state 22
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    FROM            shift and go to state 25
    DEF             shift and go to state 26
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    statement_full                 shift and go to state 111
    block_statements               shift and go to state 123
    statement                      shift and go to state 3
    type                           shift and go to state 4
    expression                     shift and go to state 6
    const                          shift and go to state 7
    map_statement                  shift and go to state 12
    import_statement               shift and go to state 13
    chain_statement                shift and go to state 14

state 112

    (11) statement -> IF expression COLON NEWLINE block NEWLINE .
    (12) statement -> IF expression COLON NEWLINE block NEWLINE . else_statement
    (13) statement -> IF expression COLON NEWLINE block NEWLINE . elif_statement
    (35) else_statement -> . ELSE COLON NEWLINE block
    (36) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE
    (37) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE else_statement
    (38) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE elif_statement
    NEWLINE         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    NAME            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    RETURN          reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    WHILE           reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    IF              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    PASS            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S64             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S32             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S16             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    S8              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U64             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U32             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U16             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    U8              reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    LPAR            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    NOT             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    FROM            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    DEF             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    BOOLEAN         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    STRING          reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    INTEGER         reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    FLOAT           reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    HEX             reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    $end            reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    DEDENT          reduce using rule 11 (statement -> IF expression COLON NEWLINE block NEWLINE .)
    ELSE            shift and go to state 126
    ELIF            shift and go to state 127

    else_statement                 shift and go to state 124
    elif_statement                 shift and go to state 125

state 113

    (20) module_list -> NAME .
    (21) module_list -> NAME . COMMA module_list
    NEWLINE         reduce using rule 20 (module_list -> NAME .)
    NAME            reduce using rule 20 (module_list -> NAME .)
    RETURN          reduce using rule 20 (module_list -> NAME .)
    WHILE           reduce using rule 20 (module_list -> NAME .)
    IF              reduce using rule 20 (module_list -> NAME .)
    PASS            reduce using rule 20 (module_list -> NAME .)
    S64             reduce using rule 20 (module_list -> NAME .)
    S32             reduce using rule 20 (module_list -> NAME .)
    S16             reduce using rule 20 (module_list -> NAME .)
    S8              reduce using rule 20 (module_list -> NAME .)
    U64             reduce using rule 20 (module_list -> NAME .)
    U32             reduce using rule 20 (module_list -> NAME .)
    U16             reduce using rule 20 (module_list -> NAME .)
    U8              reduce using rule 20 (module_list -> NAME .)
    LPAR            reduce using rule 20 (module_list -> NAME .)
    NOT             reduce using rule 20 (module_list -> NAME .)
    FROM            reduce using rule 20 (module_list -> NAME .)
    DEF             reduce using rule 20 (module_list -> NAME .)
    BOOLEAN         reduce using rule 20 (module_list -> NAME .)
    STRING          reduce using rule 20 (module_list -> NAME .)
    INTEGER         reduce using rule 20 (module_list -> NAME .)
    FLOAT           reduce using rule 20 (module_list -> NAME .)
    HEX             reduce using rule 20 (module_list -> NAME .)
    $end            reduce using rule 20 (module_list -> NAME .)
    DEDENT          reduce using rule 20 (module_list -> NAME .)
    COMMA           shift and go to state 128


state 114

    (19) import_statement -> FROM NAME DOT NAME IMPORT module_list .
    NEWLINE         reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    NAME            reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    RETURN          reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    WHILE           reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    IF              reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    PASS            reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    S64             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    S32             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    S16             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    S8              reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    U64             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    U32             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    U16             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    U8              reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    LPAR            reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    NOT             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    FROM            reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    DEF             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    BOOLEAN         reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    STRING          reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    INTEGER         reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    FLOAT           reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    HEX             reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    $end            reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)
    DEDENT          reduce using rule 19 (import_statement -> FROM NAME DOT NAME IMPORT module_list .)


state 115

    (31) chain_statement -> DEF NAME LPAR arglist RPAR COLON . NEWLINE block
    NEWLINE         shift and go to state 129


state 116

    (60) arglist -> argument COMMA arglist .
    RPAR            reduce using rule 60 (arglist -> argument COMMA arglist .)


state 117

    (61) argument -> type COLON NAME .
    COMMA           reduce using rule 61 (argument -> type COLON NAME .)
    RPAR            reduce using rule 61 (argument -> type COLON NAME .)


state 118

    (23) mapping -> LCPAR NEWLINE . INDENT key_value_pairs DEDENT NEWLINE RCPAR
    INDENT          shift and go to state 130


state 119

    (24) mapping -> LCPAR key_value_pairs . RCPAR
    RCPAR           shift and go to state 131


state 120

    (26) key_value_pairs -> key_value_pair .
    (27) key_value_pairs -> key_value_pair . NEWLINE
    (28) key_value_pairs -> key_value_pair . COMMA NEWLINE key_value_pairs
    (29) key_value_pairs -> key_value_pair . COMMA key_value_pairs
    RCPAR           reduce using rule 26 (key_value_pairs -> key_value_pair .)
    DEDENT          reduce using rule 26 (key_value_pairs -> key_value_pair .)
    NEWLINE         shift and go to state 132
    COMMA           shift and go to state 133


state 121

    (30) key_value_pair -> LPAR . exprlist RPAR COLON LPAR exprlist RPAR
    (62) exprlist -> .
    (63) exprlist -> . expression
    (64) exprlist -> . expression COMMA exprlist
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    RPAR            reduce using rule 62 (exprlist -> .)
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    exprlist                       shift and go to state 134
    expression                     shift and go to state 64
    const                          shift and go to state 7

state 122

    (32) block -> INDENT block_statements DEDENT .
    NEWLINE         reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    NAME            reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    RETURN          reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    WHILE           reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    IF              reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    PASS            reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    S64             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    S32             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    S16             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    S8              reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    U64             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    U32             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    U16             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    U8              reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    LPAR            reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    NOT             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    FROM            reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    DEF             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    BOOLEAN         reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    STRING          reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    INTEGER         reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    FLOAT           reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    HEX             reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    $end            reduce using rule 32 (block -> INDENT block_statements DEDENT .)
    DEDENT          reduce using rule 32 (block -> INDENT block_statements DEDENT .)


state 123

    (33) block_statements -> statement_full block_statements .
    DEDENT          reduce using rule 33 (block_statements -> statement_full block_statements .)


state 124

    (12) statement -> IF expression COLON NEWLINE block NEWLINE else_statement .
    NEWLINE         reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    NAME            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    RETURN          reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    WHILE           reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    IF              reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    PASS            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S64             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S32             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S16             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    S8              reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U64             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U32             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U16             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    U8              reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    LPAR            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    NOT             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    FROM            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    DEF             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    BOOLEAN         reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    STRING          reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    INTEGER         reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    FLOAT           reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    HEX             reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    $end            reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)
    DEDENT          reduce using rule 12 (statement -> IF expression COLON NEWLINE block NEWLINE else_statement .)


state 125

    (13) statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .
    NEWLINE         reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    NAME            reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    RETURN          reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    WHILE           reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    IF              reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    PASS            reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S64             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S32             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S16             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    S8              reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U64             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U32             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U16             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    U8              reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    LPAR            reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    NOT             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    FROM            reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEF             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    BOOLEAN         reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    STRING          reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    INTEGER         reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    FLOAT           reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    HEX             reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    $end            reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEDENT          reduce using rule 13 (statement -> IF expression COLON NEWLINE block NEWLINE elif_statement .)


state 126

    (35) else_statement -> ELSE . COLON NEWLINE block
    COLON           shift and go to state 135


state 127

    (36) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE
    (37) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE else_statement
    (38) elif_statement -> ELIF . expression COLON NEWLINE block NEWLINE elif_statement
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    expression                     shift and go to state 136
    const                          shift and go to state 7

state 128

    (21) module_list -> NAME COMMA . module_list
    (20) module_list -> . NAME
    (21) module_list -> . NAME COMMA module_list
    NAME            shift and go to state 113

    module_list                    shift and go to state 137

state 129

    (31) chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE . block
    (32) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 101

    block                          shift and go to state 138

state 130

    (23) mapping -> LCPAR NEWLINE INDENT . key_value_pairs DEDENT NEWLINE RCPAR
    (25) key_value_pairs -> .
    (26) key_value_pairs -> . key_value_pair
    (27) key_value_pairs -> . key_value_pair NEWLINE
    (28) key_value_pairs -> . key_value_pair COMMA NEWLINE key_value_pairs
    (29) key_value_pairs -> . key_value_pair COMMA key_value_pairs
    (30) key_value_pair -> . LPAR exprlist RPAR COLON LPAR exprlist RPAR
    DEDENT          reduce using rule 25 (key_value_pairs -> .)
    LPAR            shift and go to state 121

    key_value_pairs                shift and go to state 139
    key_value_pair                 shift and go to state 120

state 131

    (24) mapping -> LCPAR key_value_pairs RCPAR .
    NEWLINE         reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    NAME            reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    RETURN          reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    WHILE           reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    IF              reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    PASS            reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    S64             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    S32             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    S16             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    S8              reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    U64             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    U32             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    U16             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    U8              reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    LPAR            reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    NOT             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    FROM            reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    DEF             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    BOOLEAN         reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    STRING          reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    INTEGER         reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    FLOAT           reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    HEX             reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    $end            reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)
    DEDENT          reduce using rule 24 (mapping -> LCPAR key_value_pairs RCPAR .)


state 132

    (27) key_value_pairs -> key_value_pair NEWLINE .
    RCPAR           reduce using rule 27 (key_value_pairs -> key_value_pair NEWLINE .)
    DEDENT          reduce using rule 27 (key_value_pairs -> key_value_pair NEWLINE .)


state 133

    (28) key_value_pairs -> key_value_pair COMMA . NEWLINE key_value_pairs
    (29) key_value_pairs -> key_value_pair COMMA . key_value_pairs
    (25) key_value_pairs -> .
    (26) key_value_pairs -> . key_value_pair
    (27) key_value_pairs -> . key_value_pair NEWLINE
    (28) key_value_pairs -> . key_value_pair COMMA NEWLINE key_value_pairs
    (29) key_value_pairs -> . key_value_pair COMMA key_value_pairs
    (30) key_value_pair -> . LPAR exprlist RPAR COLON LPAR exprlist RPAR
    NEWLINE         shift and go to state 140
    RCPAR           reduce using rule 25 (key_value_pairs -> .)
    DEDENT          reduce using rule 25 (key_value_pairs -> .)
    LPAR            shift and go to state 121

    key_value_pair                 shift and go to state 120
    key_value_pairs                shift and go to state 141

state 134

    (30) key_value_pair -> LPAR exprlist . RPAR COLON LPAR exprlist RPAR
    RPAR            shift and go to state 142


state 135

    (35) else_statement -> ELSE COLON . NEWLINE block
    NEWLINE         shift and go to state 143


state 136

    (36) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE
    (37) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE else_statement
    (38) elif_statement -> ELIF expression . COLON NEWLINE block NEWLINE elif_statement
    (43) expression -> expression . OR expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . NEQ expression
    (46) expression -> expression . EQ expression
    (47) expression -> expression . LT expression
    (48) expression -> expression . GT expression
    (49) expression -> expression . LTE expression
    (50) expression -> expression . GTE expression
    (51) expression -> expression . MOD expression
    (52) expression -> expression . DIV expression
    (53) expression -> expression . MULT expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . PLUS expression
    COLON           shift and go to state 144
    OR              shift and go to state 39
    AND             shift and go to state 40
    NEQ             shift and go to state 41
    EQ              shift and go to state 42
    LT              shift and go to state 43
    GT              shift and go to state 44
    LTE             shift and go to state 45
    GTE             shift and go to state 46
    MOD             shift and go to state 47
    DIV             shift and go to state 48
    MULT            shift and go to state 49
    MINUS           shift and go to state 50
    PLUS            shift and go to state 51


state 137

    (21) module_list -> NAME COMMA module_list .
    NEWLINE         reduce using rule 21 (module_list -> NAME COMMA module_list .)
    NAME            reduce using rule 21 (module_list -> NAME COMMA module_list .)
    RETURN          reduce using rule 21 (module_list -> NAME COMMA module_list .)
    WHILE           reduce using rule 21 (module_list -> NAME COMMA module_list .)
    IF              reduce using rule 21 (module_list -> NAME COMMA module_list .)
    PASS            reduce using rule 21 (module_list -> NAME COMMA module_list .)
    S64             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    S32             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    S16             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    S8              reduce using rule 21 (module_list -> NAME COMMA module_list .)
    U64             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    U32             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    U16             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    U8              reduce using rule 21 (module_list -> NAME COMMA module_list .)
    LPAR            reduce using rule 21 (module_list -> NAME COMMA module_list .)
    NOT             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    FROM            reduce using rule 21 (module_list -> NAME COMMA module_list .)
    DEF             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    BOOLEAN         reduce using rule 21 (module_list -> NAME COMMA module_list .)
    STRING          reduce using rule 21 (module_list -> NAME COMMA module_list .)
    INTEGER         reduce using rule 21 (module_list -> NAME COMMA module_list .)
    FLOAT           reduce using rule 21 (module_list -> NAME COMMA module_list .)
    HEX             reduce using rule 21 (module_list -> NAME COMMA module_list .)
    $end            reduce using rule 21 (module_list -> NAME COMMA module_list .)
    DEDENT          reduce using rule 21 (module_list -> NAME COMMA module_list .)


state 138

    (31) chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .
    NEWLINE         reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    NAME            reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    RETURN          reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    WHILE           reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    IF              reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    PASS            reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S64             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S32             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S16             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    S8              reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U64             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U32             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U16             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    U8              reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    LPAR            reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    NOT             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    FROM            reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    DEF             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    BOOLEAN         reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    STRING          reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    INTEGER         reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    FLOAT           reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    HEX             reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    $end            reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)
    DEDENT          reduce using rule 31 (chain_statement -> DEF NAME LPAR arglist RPAR COLON NEWLINE block .)


state 139

    (23) mapping -> LCPAR NEWLINE INDENT key_value_pairs . DEDENT NEWLINE RCPAR
    DEDENT          shift and go to state 145


state 140

    (28) key_value_pairs -> key_value_pair COMMA NEWLINE . key_value_pairs
    (25) key_value_pairs -> .
    (26) key_value_pairs -> . key_value_pair
    (27) key_value_pairs -> . key_value_pair NEWLINE
    (28) key_value_pairs -> . key_value_pair COMMA NEWLINE key_value_pairs
    (29) key_value_pairs -> . key_value_pair COMMA key_value_pairs
    (30) key_value_pair -> . LPAR exprlist RPAR COLON LPAR exprlist RPAR
    RCPAR           reduce using rule 25 (key_value_pairs -> .)
    DEDENT          reduce using rule 25 (key_value_pairs -> .)
    LPAR            shift and go to state 121

    key_value_pair                 shift and go to state 120
    key_value_pairs                shift and go to state 146

state 141

    (29) key_value_pairs -> key_value_pair COMMA key_value_pairs .
    RCPAR           reduce using rule 29 (key_value_pairs -> key_value_pair COMMA key_value_pairs .)
    DEDENT          reduce using rule 29 (key_value_pairs -> key_value_pair COMMA key_value_pairs .)


state 142

    (30) key_value_pair -> LPAR exprlist RPAR . COLON LPAR exprlist RPAR
    COLON           shift and go to state 147


state 143

    (35) else_statement -> ELSE COLON NEWLINE . block
    (32) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 101

    block                          shift and go to state 148

state 144

    (36) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE
    (37) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE else_statement
    (38) elif_statement -> ELIF expression COLON . NEWLINE block NEWLINE elif_statement
    NEWLINE         shift and go to state 149


state 145

    (23) mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT . NEWLINE RCPAR
    NEWLINE         shift and go to state 150


state 146

    (28) key_value_pairs -> key_value_pair COMMA NEWLINE key_value_pairs .
    RCPAR           reduce using rule 28 (key_value_pairs -> key_value_pair COMMA NEWLINE key_value_pairs .)
    DEDENT          reduce using rule 28 (key_value_pairs -> key_value_pair COMMA NEWLINE key_value_pairs .)


state 147

    (30) key_value_pair -> LPAR exprlist RPAR COLON . LPAR exprlist RPAR
    LPAR            shift and go to state 151


state 148

    (35) else_statement -> ELSE COLON NEWLINE block .
    NEWLINE         reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    NAME            reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    RETURN          reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    IF              reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    PASS            reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    S64             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    S32             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    S16             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    S8              reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    U64             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    U32             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    U16             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    U8              reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    LPAR            reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    NOT             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    FROM            reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    DEF             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    BOOLEAN         reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    STRING          reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    INTEGER         reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    FLOAT           reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    HEX             reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    $end            reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)
    DEDENT          reduce using rule 35 (else_statement -> ELSE COLON NEWLINE block .)


state 149

    (36) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE
    (37) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE else_statement
    (38) elif_statement -> ELIF expression COLON NEWLINE . block NEWLINE elif_statement
    (32) block -> . INDENT block_statements DEDENT
    INDENT          shift and go to state 101

    block                          shift and go to state 152

state 150

    (23) mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE . RCPAR
    RCPAR           shift and go to state 153


state 151

    (30) key_value_pair -> LPAR exprlist RPAR COLON LPAR . exprlist RPAR
    (62) exprlist -> .
    (63) exprlist -> . expression
    (64) exprlist -> . expression COMMA exprlist
    (39) expression -> . NAME
    (40) expression -> . const
    (41) expression -> . LPAR expression RPAR
    (42) expression -> . NOT expression
    (43) expression -> . expression OR expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression NEQ expression
    (46) expression -> . expression EQ expression
    (47) expression -> . expression LT expression
    (48) expression -> . expression GT expression
    (49) expression -> . expression LTE expression
    (50) expression -> . expression GTE expression
    (51) expression -> . expression MOD expression
    (52) expression -> . expression DIV expression
    (53) expression -> . expression MULT expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression PLUS expression
    (56) expression -> . NAME DOT NAME LPAR exprlist RPAR
    (57) expression -> . NAME LPAR exprlist RPAR
    (73) const -> . BOOLEAN
    (74) const -> . STRING
    (75) const -> . INTEGER
    (76) const -> . FLOAT
    (77) const -> . HEX
    RPAR            reduce using rule 62 (exprlist -> .)
    NAME            shift and go to state 53
    LPAR            shift and go to state 23
    NOT             shift and go to state 24
    BOOLEAN         shift and go to state 27
    STRING          shift and go to state 28
    INTEGER         shift and go to state 29
    FLOAT           shift and go to state 30
    HEX             shift and go to state 31

    exprlist                       shift and go to state 154
    expression                     shift and go to state 64
    const                          shift and go to state 7

state 152

    (36) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE
    (37) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE else_statement
    (38) elif_statement -> ELIF expression COLON NEWLINE block . NEWLINE elif_statement
    NEWLINE         shift and go to state 155


state 153

    (23) mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .
    NEWLINE         reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    NAME            reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    RETURN          reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    WHILE           reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    IF              reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    PASS            reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    S64             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    S32             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    S16             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    S8              reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    U64             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    U32             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    U16             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    U8              reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    LPAR            reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    NOT             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    FROM            reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    DEF             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    BOOLEAN         reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    STRING          reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    INTEGER         reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    FLOAT           reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    HEX             reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    $end            reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)
    DEDENT          reduce using rule 23 (mapping -> LCPAR NEWLINE INDENT key_value_pairs DEDENT NEWLINE RCPAR .)


state 154

    (30) key_value_pair -> LPAR exprlist RPAR COLON LPAR exprlist . RPAR
    RPAR            shift and go to state 156


state 155

    (36) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .
    (37) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE . else_statement
    (38) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE . elif_statement
    (35) else_statement -> . ELSE COLON NEWLINE block
    (36) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE
    (37) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE else_statement
    (38) elif_statement -> . ELIF expression COLON NEWLINE block NEWLINE elif_statement
    NEWLINE         reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    NAME            reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    RETURN          reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    WHILE           reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    IF              reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    PASS            reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S64             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S32             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S16             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    S8              reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U64             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U32             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U16             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    U8              reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    LPAR            reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    NOT             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    FROM            reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    DEF             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    BOOLEAN         reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    STRING          reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    INTEGER         reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    FLOAT           reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    HEX             reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    $end            reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    DEDENT          reduce using rule 36 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE .)
    ELSE            shift and go to state 126
    ELIF            shift and go to state 127

    else_statement                 shift and go to state 157
    elif_statement                 shift and go to state 158

state 156

    (30) key_value_pair -> LPAR exprlist RPAR COLON LPAR exprlist RPAR .
    NEWLINE         reduce using rule 30 (key_value_pair -> LPAR exprlist RPAR COLON LPAR exprlist RPAR .)
    COMMA           reduce using rule 30 (key_value_pair -> LPAR exprlist RPAR COLON LPAR exprlist RPAR .)
    RCPAR           reduce using rule 30 (key_value_pair -> LPAR exprlist RPAR COLON LPAR exprlist RPAR .)
    DEDENT          reduce using rule 30 (key_value_pair -> LPAR exprlist RPAR COLON LPAR exprlist RPAR .)


state 157

    (37) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .
    NEWLINE         reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    NAME            reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    RETURN          reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    WHILE           reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    IF              reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    PASS            reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S64             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S32             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S16             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    S8              reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U64             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U32             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U16             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    U8              reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    LPAR            reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    NOT             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    FROM            reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    DEF             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    BOOLEAN         reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    STRING          reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    INTEGER         reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    FLOAT           reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    HEX             reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    $end            reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)
    DEDENT          reduce using rule 37 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE else_statement .)


state 158

    (38) elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .
    NEWLINE         reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    NAME            reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    RETURN          reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    WHILE           reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    IF              reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    PASS            reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S64             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S32             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S16             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    S8              reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U64             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U32             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U16             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    U8              reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    LPAR            reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    NOT             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    FROM            reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEF             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    BOOLEAN         reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    STRING          reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    INTEGER         reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    FLOAT           reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    HEX             reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    $end            reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)
    DEDENT          reduce using rule 38 (elif_statement -> ELIF expression COLON NEWLINE block NEWLINE elif_statement .)


Conflicts:

shift/reduce conflict for LPAR in state 5 resolved as shift
shift/reduce conflict for NAME in state 8 resolved as shift
shift/reduce conflict for LPAR in state 8 resolved as shift
shift/reduce conflict for NOT in state 8 resolved as shift
shift/reduce conflict for BOOLEAN in state 8 resolved as shift
shift/reduce conflict for STRING in state 8 resolved as shift
shift/reduce conflict for INTEGER in state 8 resolved as shift
shift/reduce conflict for FLOAT in state 8 resolved as shift
shift/reduce conflict for HEX in state 8 resolved as shift
shift/reduce conflict for LPAR in state 53 resolved as shift
shift/reduce conflict for OR in state 57 resolved as shift
shift/reduce conflict for AND in state 57 resolved as shift
shift/reduce conflict for NEQ in state 57 resolved as shift
shift/reduce conflict for EQ in state 57 resolved as shift
shift/reduce conflict for LT in state 57 resolved as shift
shift/reduce conflict for GT in state 57 resolved as shift
shift/reduce conflict for LTE in state 57 resolved as shift
shift/reduce conflict for GTE in state 57 resolved as shift
shift/reduce conflict for MOD in state 57 resolved as shift
shift/reduce conflict for DIV in state 57 resolved as shift
shift/reduce conflict for MULT in state 57 resolved as shift
shift/reduce conflict for MINUS in state 57 resolved as shift
shift/reduce conflict for PLUS in state 57 resolved as shift
shift/reduce conflict for OR in state 66 resolved as shift
shift/reduce conflict for AND in state 66 resolved as shift
shift/reduce conflict for NEQ in state 66 resolved as shift
shift/reduce conflict for EQ in state 66 resolved as shift
shift/reduce conflict for LT in state 66 resolved as shift
shift/reduce conflict for GT in state 66 resolved as shift
shift/reduce conflict for LTE in state 66 resolved as shift
shift/reduce conflict for GTE in state 66 resolved as shift
shift/reduce conflict for MOD in state 66 resolved as shift
shift/reduce conflict for DIV in state 66 resolved as shift
shift/reduce conflict for MULT in state 66 resolved as shift
shift/reduce conflict for MINUS in state 66 resolved as shift
shift/reduce conflict for PLUS in state 66 resolved as shift
shift/reduce conflict for OR in state 67 resolved as shift
shift/reduce conflict for AND in state 67 resolved as shift
shift/reduce conflict for NEQ in state 67 resolved as shift
shift/reduce conflict for EQ in state 67 resolved as shift
shift/reduce conflict for LT in state 67 resolved as shift
shift/reduce conflict for GT in state 67 resolved as shift
shift/reduce conflict for LTE in state 67 resolved as shift
shift/reduce conflict for GTE in state 67 resolved as shift
shift/reduce conflict for MOD in state 67 resolved as shift
shift/reduce conflict for DIV in state 67 resolved as shift
shift/reduce conflict for MULT in state 67 resolved as shift
shift/reduce conflict for MINUS in state 67 resolved as shift
shift/reduce conflict for PLUS in state 67 resolved as shift
shift/reduce conflict for OR in state 74 resolved as shift
shift/reduce conflict for AND in state 74 resolved as shift
shift/reduce conflict for NEQ in state 74 resolved as shift
shift/reduce conflict for EQ in state 74 resolved as shift
shift/reduce conflict for LT in state 74 resolved as shift
shift/reduce conflict for GT in state 74 resolved as shift
shift/reduce conflict for LTE in state 74 resolved as shift
shift/reduce conflict for GTE in state 74 resolved as shift
shift/reduce conflict for MOD in state 74 resolved as shift
shift/reduce conflict for DIV in state 74 resolved as shift
shift/reduce conflict for MULT in state 74 resolved as shift
shift/reduce conflict for MINUS in state 74 resolved as shift
shift/reduce conflict for PLUS in state 74 resolved as shift
reduce/reduce conflict in state 96 resolved using rule expression -> const
rejected rule (statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]) in state 96
Rule (statement -> type COLON NAME ASSIGN const  [precedence=left, level=2]) is never reduced